// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Camera/FRCameraStateProto.proto

#include "Camera/FRCameraStateProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace DJIFRProto {
namespace Standard {
class CameraStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CameraState>
      _instance;
} _CameraState_default_instance_;
}  // namespace Standard
}  // namespace DJIFRProto
namespace protobuf_Camera_2fFRCameraStateProto_2eproto {
void InitDefaultsCameraStateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::DJIFRProto::Standard::_CameraState_default_instance_;
    new (ptr) ::DJIFRProto::Standard::CameraState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DJIFRProto::Standard::CameraState::InitAsDefaultInstance();
}

void InitDefaultsCameraState() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCameraStateImpl);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::CameraState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::CameraState, isrecording_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::CameraState, isshootingsinglephoto_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::CameraState, isinserted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::CameraState, isinitializing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::CameraState, haserror_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::CameraState, isverified_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::CameraState, isfull_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::CameraState, isformatted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::CameraState, isformatting_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::CameraState, isinvalidformat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::CameraState, isreadonly_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::CameraState, totalspaceinmb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::CameraState, remainingspaceinmb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::CameraState, availablecapturecount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::CameraState, availablerecordingtimeinseconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::CameraState, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::CameraState, mode_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::DJIFRProto::Standard::CameraState)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::DJIFRProto::Standard::_CameraState_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "Camera/FRCameraStateProto.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\037Camera/FRCameraStateProto.proto\022\023DJIFR"
      "Proto.Standard\"\256\004\n\013CameraState\022\023\n\013isReco"
      "rding\030\001 \001(\010\022\035\n\025isShootingSinglePhoto\030\002 \001"
      "(\010\022\022\n\nisInserted\030\003 \001(\010\022\026\n\016isInitializing"
      "\030\004 \001(\010\022\020\n\010hasError\030\005 \001(\010\022\022\n\nisVerified\030\006"
      " \001(\010\022\016\n\006isFull\030\007 \001(\010\022\023\n\013isFormatted\030\010 \001("
      "\010\022\024\n\014isFormatting\030\t \001(\010\022\027\n\017isInvalidForm"
      "at\030\n \001(\010\022\022\n\nisReadOnly\030\013 \001(\010\022\026\n\016totalSpa"
      "ceInMB\030\014 \001(\r\022\032\n\022remainingSpaceInMB\030\r \001(\r"
      "\022\035\n\025availableCaptureCount\030\016 \001(\r\022\'\n\037avail"
      "ableRecordingTimeInSeconds\030\017 \001(\r\022\r\n\005inde"
      "x\030\020 \001(\005\0229\n\004mode\030\021 \001(\0162+.DJIFRProto.Stand"
      "ard.CameraState.CameraMode\"k\n\nCameraMode"
      "\022\016\n\nShootPhoto\020\000\022\017\n\013RecordVideo\020\001\022\014\n\010Pla"
      "yback\020\002\022\021\n\rMediaDownload\020\003\022\r\n\tBroadcast\020"
      "\004\022\014\n\007Unknown\020\377\001B\r\242\002\nDJIFRProtob\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 638);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Camera/FRCameraStateProto.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Camera_2fFRCameraStateProto_2eproto
namespace DJIFRProto {
namespace Standard {
const ::google::protobuf::EnumDescriptor* CameraState_CameraMode_descriptor() {
  protobuf_Camera_2fFRCameraStateProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Camera_2fFRCameraStateProto_2eproto::file_level_enum_descriptors[0];
}
bool CameraState_CameraMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 255:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CameraState_CameraMode CameraState::ShootPhoto;
const CameraState_CameraMode CameraState::RecordVideo;
const CameraState_CameraMode CameraState::Playback;
const CameraState_CameraMode CameraState::MediaDownload;
const CameraState_CameraMode CameraState::Broadcast;
const CameraState_CameraMode CameraState::Unknown;
const CameraState_CameraMode CameraState::CameraMode_MIN;
const CameraState_CameraMode CameraState::CameraMode_MAX;
const int CameraState::CameraMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void CameraState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraState::kIsRecordingFieldNumber;
const int CameraState::kIsShootingSinglePhotoFieldNumber;
const int CameraState::kIsInsertedFieldNumber;
const int CameraState::kIsInitializingFieldNumber;
const int CameraState::kHasErrorFieldNumber;
const int CameraState::kIsVerifiedFieldNumber;
const int CameraState::kIsFullFieldNumber;
const int CameraState::kIsFormattedFieldNumber;
const int CameraState::kIsFormattingFieldNumber;
const int CameraState::kIsInvalidFormatFieldNumber;
const int CameraState::kIsReadOnlyFieldNumber;
const int CameraState::kTotalSpaceInMBFieldNumber;
const int CameraState::kRemainingSpaceInMBFieldNumber;
const int CameraState::kAvailableCaptureCountFieldNumber;
const int CameraState::kAvailableRecordingTimeInSecondsFieldNumber;
const int CameraState::kIndexFieldNumber;
const int CameraState::kModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraState::CameraState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Camera_2fFRCameraStateProto_2eproto::InitDefaultsCameraState();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DJIFRProto.Standard.CameraState)
}
CameraState::CameraState(const CameraState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&isrecording_, &from.isrecording_,
    static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&isrecording_)) + sizeof(mode_));
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.CameraState)
}

void CameraState::SharedCtor() {
  ::memset(&isrecording_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&isrecording_)) + sizeof(mode_));
  _cached_size_ = 0;
}

CameraState::~CameraState() {
  // @@protoc_insertion_point(destructor:DJIFRProto.Standard.CameraState)
  SharedDtor();
}

void CameraState::SharedDtor() {
}

void CameraState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraState::descriptor() {
  ::protobuf_Camera_2fFRCameraStateProto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Camera_2fFRCameraStateProto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CameraState& CameraState::default_instance() {
  ::protobuf_Camera_2fFRCameraStateProto_2eproto::InitDefaultsCameraState();
  return *internal_default_instance();
}

CameraState* CameraState::New(::google::protobuf::Arena* arena) const {
  CameraState* n = new CameraState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CameraState::Clear() {
// @@protoc_insertion_point(message_clear_start:DJIFRProto.Standard.CameraState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&isrecording_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&isrecording_)) + sizeof(mode_));
  _internal_metadata_.Clear();
}

bool CameraState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DJIFRProto.Standard.CameraState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool isRecording = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrecording_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isShootingSinglePhoto = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isshootingsinglephoto_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isInserted = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isinserted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isInitializing = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isinitializing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool hasError = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &haserror_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isVerified = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isverified_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isFull = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfull_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isFormatted = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isformatted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isFormatting = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isformatting_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isInvalidFormat = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isinvalidformat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isReadOnly = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isreadonly_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 totalSpaceInMB = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalspaceinmb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 remainingSpaceInMB = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remainingspaceinmb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 availableCaptureCount = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &availablecapturecount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 availableRecordingTimeInSeconds = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &availablerecordingtimeinseconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 index = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DJIFRProto.Standard.CameraState.CameraMode mode = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mode(static_cast< ::DJIFRProto::Standard::CameraState_CameraMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DJIFRProto.Standard.CameraState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DJIFRProto.Standard.CameraState)
  return false;
#undef DO_
}

void CameraState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DJIFRProto.Standard.CameraState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isRecording = 1;
  if (this->isrecording() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isrecording(), output);
  }

  // bool isShootingSinglePhoto = 2;
  if (this->isshootingsinglephoto() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isshootingsinglephoto(), output);
  }

  // bool isInserted = 3;
  if (this->isinserted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isinserted(), output);
  }

  // bool isInitializing = 4;
  if (this->isinitializing() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isinitializing(), output);
  }

  // bool hasError = 5;
  if (this->haserror() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->haserror(), output);
  }

  // bool isVerified = 6;
  if (this->isverified() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isverified(), output);
  }

  // bool isFull = 7;
  if (this->isfull() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isfull(), output);
  }

  // bool isFormatted = 8;
  if (this->isformatted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->isformatted(), output);
  }

  // bool isFormatting = 9;
  if (this->isformatting() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->isformatting(), output);
  }

  // bool isInvalidFormat = 10;
  if (this->isinvalidformat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->isinvalidformat(), output);
  }

  // bool isReadOnly = 11;
  if (this->isreadonly() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->isreadonly(), output);
  }

  // uint32 totalSpaceInMB = 12;
  if (this->totalspaceinmb() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->totalspaceinmb(), output);
  }

  // uint32 remainingSpaceInMB = 13;
  if (this->remainingspaceinmb() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->remainingspaceinmb(), output);
  }

  // uint32 availableCaptureCount = 14;
  if (this->availablecapturecount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->availablecapturecount(), output);
  }

  // uint32 availableRecordingTimeInSeconds = 15;
  if (this->availablerecordingtimeinseconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->availablerecordingtimeinseconds(), output);
  }

  // int32 index = 16;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->index(), output);
  }

  // .DJIFRProto.Standard.CameraState.CameraMode mode = 17;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->mode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DJIFRProto.Standard.CameraState)
}

::google::protobuf::uint8* CameraState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DJIFRProto.Standard.CameraState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isRecording = 1;
  if (this->isrecording() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isrecording(), target);
  }

  // bool isShootingSinglePhoto = 2;
  if (this->isshootingsinglephoto() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isshootingsinglephoto(), target);
  }

  // bool isInserted = 3;
  if (this->isinserted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isinserted(), target);
  }

  // bool isInitializing = 4;
  if (this->isinitializing() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isinitializing(), target);
  }

  // bool hasError = 5;
  if (this->haserror() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->haserror(), target);
  }

  // bool isVerified = 6;
  if (this->isverified() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isverified(), target);
  }

  // bool isFull = 7;
  if (this->isfull() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isfull(), target);
  }

  // bool isFormatted = 8;
  if (this->isformatted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->isformatted(), target);
  }

  // bool isFormatting = 9;
  if (this->isformatting() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->isformatting(), target);
  }

  // bool isInvalidFormat = 10;
  if (this->isinvalidformat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->isinvalidformat(), target);
  }

  // bool isReadOnly = 11;
  if (this->isreadonly() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->isreadonly(), target);
  }

  // uint32 totalSpaceInMB = 12;
  if (this->totalspaceinmb() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->totalspaceinmb(), target);
  }

  // uint32 remainingSpaceInMB = 13;
  if (this->remainingspaceinmb() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->remainingspaceinmb(), target);
  }

  // uint32 availableCaptureCount = 14;
  if (this->availablecapturecount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->availablecapturecount(), target);
  }

  // uint32 availableRecordingTimeInSeconds = 15;
  if (this->availablerecordingtimeinseconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->availablerecordingtimeinseconds(), target);
  }

  // int32 index = 16;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->index(), target);
  }

  // .DJIFRProto.Standard.CameraState.CameraMode mode = 17;
  if (this->mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->mode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DJIFRProto.Standard.CameraState)
  return target;
}

size_t CameraState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DJIFRProto.Standard.CameraState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool isRecording = 1;
  if (this->isrecording() != 0) {
    total_size += 1 + 1;
  }

  // bool isShootingSinglePhoto = 2;
  if (this->isshootingsinglephoto() != 0) {
    total_size += 1 + 1;
  }

  // bool isInserted = 3;
  if (this->isinserted() != 0) {
    total_size += 1 + 1;
  }

  // bool isInitializing = 4;
  if (this->isinitializing() != 0) {
    total_size += 1 + 1;
  }

  // bool hasError = 5;
  if (this->haserror() != 0) {
    total_size += 1 + 1;
  }

  // bool isVerified = 6;
  if (this->isverified() != 0) {
    total_size += 1 + 1;
  }

  // bool isFull = 7;
  if (this->isfull() != 0) {
    total_size += 1 + 1;
  }

  // bool isFormatted = 8;
  if (this->isformatted() != 0) {
    total_size += 1 + 1;
  }

  // bool isFormatting = 9;
  if (this->isformatting() != 0) {
    total_size += 1 + 1;
  }

  // bool isInvalidFormat = 10;
  if (this->isinvalidformat() != 0) {
    total_size += 1 + 1;
  }

  // bool isReadOnly = 11;
  if (this->isreadonly() != 0) {
    total_size += 1 + 1;
  }

  // uint32 totalSpaceInMB = 12;
  if (this->totalspaceinmb() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totalspaceinmb());
  }

  // uint32 remainingSpaceInMB = 13;
  if (this->remainingspaceinmb() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->remainingspaceinmb());
  }

  // uint32 availableCaptureCount = 14;
  if (this->availablecapturecount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->availablecapturecount());
  }

  // uint32 availableRecordingTimeInSeconds = 15;
  if (this->availablerecordingtimeinseconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->availablerecordingtimeinseconds());
  }

  // int32 index = 16;
  if (this->index() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());
  }

  // .DJIFRProto.Standard.CameraState.CameraMode mode = 17;
  if (this->mode() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DJIFRProto.Standard.CameraState)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DJIFRProto.Standard.CameraState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DJIFRProto.Standard.CameraState)
    MergeFrom(*source);
  }
}

void CameraState::MergeFrom(const CameraState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DJIFRProto.Standard.CameraState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.isrecording() != 0) {
    set_isrecording(from.isrecording());
  }
  if (from.isshootingsinglephoto() != 0) {
    set_isshootingsinglephoto(from.isshootingsinglephoto());
  }
  if (from.isinserted() != 0) {
    set_isinserted(from.isinserted());
  }
  if (from.isinitializing() != 0) {
    set_isinitializing(from.isinitializing());
  }
  if (from.haserror() != 0) {
    set_haserror(from.haserror());
  }
  if (from.isverified() != 0) {
    set_isverified(from.isverified());
  }
  if (from.isfull() != 0) {
    set_isfull(from.isfull());
  }
  if (from.isformatted() != 0) {
    set_isformatted(from.isformatted());
  }
  if (from.isformatting() != 0) {
    set_isformatting(from.isformatting());
  }
  if (from.isinvalidformat() != 0) {
    set_isinvalidformat(from.isinvalidformat());
  }
  if (from.isreadonly() != 0) {
    set_isreadonly(from.isreadonly());
  }
  if (from.totalspaceinmb() != 0) {
    set_totalspaceinmb(from.totalspaceinmb());
  }
  if (from.remainingspaceinmb() != 0) {
    set_remainingspaceinmb(from.remainingspaceinmb());
  }
  if (from.availablecapturecount() != 0) {
    set_availablecapturecount(from.availablecapturecount());
  }
  if (from.availablerecordingtimeinseconds() != 0) {
    set_availablerecordingtimeinseconds(from.availablerecordingtimeinseconds());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
}

void CameraState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DJIFRProto.Standard.CameraState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraState::CopyFrom(const CameraState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DJIFRProto.Standard.CameraState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraState::IsInitialized() const {
  return true;
}

void CameraState::Swap(CameraState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraState::InternalSwap(CameraState* other) {
  using std::swap;
  swap(isrecording_, other->isrecording_);
  swap(isshootingsinglephoto_, other->isshootingsinglephoto_);
  swap(isinserted_, other->isinserted_);
  swap(isinitializing_, other->isinitializing_);
  swap(haserror_, other->haserror_);
  swap(isverified_, other->isverified_);
  swap(isfull_, other->isfull_);
  swap(isformatted_, other->isformatted_);
  swap(isformatting_, other->isformatting_);
  swap(isinvalidformat_, other->isinvalidformat_);
  swap(isreadonly_, other->isreadonly_);
  swap(totalspaceinmb_, other->totalspaceinmb_);
  swap(remainingspaceinmb_, other->remainingspaceinmb_);
  swap(availablecapturecount_, other->availablecapturecount_);
  swap(availablerecordingtimeinseconds_, other->availablerecordingtimeinseconds_);
  swap(index_, other->index_);
  swap(mode_, other->mode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CameraState::GetMetadata() const {
  protobuf_Camera_2fFRCameraStateProto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Camera_2fFRCameraStateProto_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Standard
}  // namespace DJIFRProto

// @@protoc_insertion_point(global_scope)
