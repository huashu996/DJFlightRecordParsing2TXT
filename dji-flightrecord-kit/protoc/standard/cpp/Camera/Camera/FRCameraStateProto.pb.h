// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Camera/FRCameraStateProto.proto

#ifndef PROTOBUF_Camera_2fFRCameraStateProto_2eproto__INCLUDED
#define PROTOBUF_Camera_2fFRCameraStateProto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_Camera_2fFRCameraStateProto_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsCameraStateImpl();
void InitDefaultsCameraState();
inline void InitDefaults() {
  InitDefaultsCameraState();
}
}  // namespace protobuf_Camera_2fFRCameraStateProto_2eproto
namespace DJIFRProto {
namespace Standard {
class CameraState;
class CameraStateDefaultTypeInternal;
extern CameraStateDefaultTypeInternal _CameraState_default_instance_;
}  // namespace Standard
}  // namespace DJIFRProto
namespace DJIFRProto {
namespace Standard {

enum CameraState_CameraMode {
  CameraState_CameraMode_ShootPhoto = 0,
  CameraState_CameraMode_RecordVideo = 1,
  CameraState_CameraMode_Playback = 2,
  CameraState_CameraMode_MediaDownload = 3,
  CameraState_CameraMode_Broadcast = 4,
  CameraState_CameraMode_Unknown = 255,
  CameraState_CameraMode_CameraState_CameraMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CameraState_CameraMode_CameraState_CameraMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CameraState_CameraMode_IsValid(int value);
const CameraState_CameraMode CameraState_CameraMode_CameraMode_MIN = CameraState_CameraMode_ShootPhoto;
const CameraState_CameraMode CameraState_CameraMode_CameraMode_MAX = CameraState_CameraMode_Unknown;
const int CameraState_CameraMode_CameraMode_ARRAYSIZE = CameraState_CameraMode_CameraMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* CameraState_CameraMode_descriptor();
inline const ::std::string& CameraState_CameraMode_Name(CameraState_CameraMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    CameraState_CameraMode_descriptor(), value);
}
inline bool CameraState_CameraMode_Parse(
    const ::std::string& name, CameraState_CameraMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CameraState_CameraMode>(
    CameraState_CameraMode_descriptor(), name, value);
}
// ===================================================================

class CameraState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.CameraState) */ {
 public:
  CameraState();
  virtual ~CameraState();

  CameraState(const CameraState& from);

  inline CameraState& operator=(const CameraState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CameraState(CameraState&& from) noexcept
    : CameraState() {
    *this = ::std::move(from);
  }

  inline CameraState& operator=(CameraState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraState* internal_default_instance() {
    return reinterpret_cast<const CameraState*>(
               &_CameraState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CameraState* other);
  friend void swap(CameraState& a, CameraState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CameraState* New() const PROTOBUF_FINAL { return New(NULL); }

  CameraState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CameraState& from);
  void MergeFrom(const CameraState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CameraState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CameraState_CameraMode CameraMode;
  static const CameraMode ShootPhoto =
    CameraState_CameraMode_ShootPhoto;
  static const CameraMode RecordVideo =
    CameraState_CameraMode_RecordVideo;
  static const CameraMode Playback =
    CameraState_CameraMode_Playback;
  static const CameraMode MediaDownload =
    CameraState_CameraMode_MediaDownload;
  static const CameraMode Broadcast =
    CameraState_CameraMode_Broadcast;
  static const CameraMode Unknown =
    CameraState_CameraMode_Unknown;
  static inline bool CameraMode_IsValid(int value) {
    return CameraState_CameraMode_IsValid(value);
  }
  static const CameraMode CameraMode_MIN =
    CameraState_CameraMode_CameraMode_MIN;
  static const CameraMode CameraMode_MAX =
    CameraState_CameraMode_CameraMode_MAX;
  static const int CameraMode_ARRAYSIZE =
    CameraState_CameraMode_CameraMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CameraMode_descriptor() {
    return CameraState_CameraMode_descriptor();
  }
  static inline const ::std::string& CameraMode_Name(CameraMode value) {
    return CameraState_CameraMode_Name(value);
  }
  static inline bool CameraMode_Parse(const ::std::string& name,
      CameraMode* value) {
    return CameraState_CameraMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bool isRecording = 1;
  void clear_isrecording();
  static const int kIsRecordingFieldNumber = 1;
  bool isrecording() const;
  void set_isrecording(bool value);

  // bool isShootingSinglePhoto = 2;
  void clear_isshootingsinglephoto();
  static const int kIsShootingSinglePhotoFieldNumber = 2;
  bool isshootingsinglephoto() const;
  void set_isshootingsinglephoto(bool value);

  // bool isInserted = 3;
  void clear_isinserted();
  static const int kIsInsertedFieldNumber = 3;
  bool isinserted() const;
  void set_isinserted(bool value);

  // bool isInitializing = 4;
  void clear_isinitializing();
  static const int kIsInitializingFieldNumber = 4;
  bool isinitializing() const;
  void set_isinitializing(bool value);

  // bool hasError = 5;
  void clear_haserror();
  static const int kHasErrorFieldNumber = 5;
  bool haserror() const;
  void set_haserror(bool value);

  // bool isVerified = 6;
  void clear_isverified();
  static const int kIsVerifiedFieldNumber = 6;
  bool isverified() const;
  void set_isverified(bool value);

  // bool isFull = 7;
  void clear_isfull();
  static const int kIsFullFieldNumber = 7;
  bool isfull() const;
  void set_isfull(bool value);

  // bool isFormatted = 8;
  void clear_isformatted();
  static const int kIsFormattedFieldNumber = 8;
  bool isformatted() const;
  void set_isformatted(bool value);

  // bool isFormatting = 9;
  void clear_isformatting();
  static const int kIsFormattingFieldNumber = 9;
  bool isformatting() const;
  void set_isformatting(bool value);

  // bool isInvalidFormat = 10;
  void clear_isinvalidformat();
  static const int kIsInvalidFormatFieldNumber = 10;
  bool isinvalidformat() const;
  void set_isinvalidformat(bool value);

  // bool isReadOnly = 11;
  void clear_isreadonly();
  static const int kIsReadOnlyFieldNumber = 11;
  bool isreadonly() const;
  void set_isreadonly(bool value);

  // uint32 totalSpaceInMB = 12;
  void clear_totalspaceinmb();
  static const int kTotalSpaceInMBFieldNumber = 12;
  ::google::protobuf::uint32 totalspaceinmb() const;
  void set_totalspaceinmb(::google::protobuf::uint32 value);

  // uint32 remainingSpaceInMB = 13;
  void clear_remainingspaceinmb();
  static const int kRemainingSpaceInMBFieldNumber = 13;
  ::google::protobuf::uint32 remainingspaceinmb() const;
  void set_remainingspaceinmb(::google::protobuf::uint32 value);

  // uint32 availableCaptureCount = 14;
  void clear_availablecapturecount();
  static const int kAvailableCaptureCountFieldNumber = 14;
  ::google::protobuf::uint32 availablecapturecount() const;
  void set_availablecapturecount(::google::protobuf::uint32 value);

  // uint32 availableRecordingTimeInSeconds = 15;
  void clear_availablerecordingtimeinseconds();
  static const int kAvailableRecordingTimeInSecondsFieldNumber = 15;
  ::google::protobuf::uint32 availablerecordingtimeinseconds() const;
  void set_availablerecordingtimeinseconds(::google::protobuf::uint32 value);

  // int32 index = 16;
  void clear_index();
  static const int kIndexFieldNumber = 16;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // .DJIFRProto.Standard.CameraState.CameraMode mode = 17;
  void clear_mode();
  static const int kModeFieldNumber = 17;
  ::DJIFRProto::Standard::CameraState_CameraMode mode() const;
  void set_mode(::DJIFRProto::Standard::CameraState_CameraMode value);

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.CameraState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool isrecording_;
  bool isshootingsinglephoto_;
  bool isinserted_;
  bool isinitializing_;
  bool haserror_;
  bool isverified_;
  bool isfull_;
  bool isformatted_;
  bool isformatting_;
  bool isinvalidformat_;
  bool isreadonly_;
  ::google::protobuf::uint32 totalspaceinmb_;
  ::google::protobuf::uint32 remainingspaceinmb_;
  ::google::protobuf::uint32 availablecapturecount_;
  ::google::protobuf::uint32 availablerecordingtimeinseconds_;
  ::google::protobuf::int32 index_;
  int mode_;
  mutable int _cached_size_;
  friend struct ::protobuf_Camera_2fFRCameraStateProto_2eproto::TableStruct;
  friend void ::protobuf_Camera_2fFRCameraStateProto_2eproto::InitDefaultsCameraStateImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CameraState

// bool isRecording = 1;
inline void CameraState::clear_isrecording() {
  isrecording_ = false;
}
inline bool CameraState::isrecording() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.CameraState.isRecording)
  return isrecording_;
}
inline void CameraState::set_isrecording(bool value) {
  
  isrecording_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.CameraState.isRecording)
}

// bool isShootingSinglePhoto = 2;
inline void CameraState::clear_isshootingsinglephoto() {
  isshootingsinglephoto_ = false;
}
inline bool CameraState::isshootingsinglephoto() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.CameraState.isShootingSinglePhoto)
  return isshootingsinglephoto_;
}
inline void CameraState::set_isshootingsinglephoto(bool value) {
  
  isshootingsinglephoto_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.CameraState.isShootingSinglePhoto)
}

// bool isInserted = 3;
inline void CameraState::clear_isinserted() {
  isinserted_ = false;
}
inline bool CameraState::isinserted() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.CameraState.isInserted)
  return isinserted_;
}
inline void CameraState::set_isinserted(bool value) {
  
  isinserted_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.CameraState.isInserted)
}

// bool isInitializing = 4;
inline void CameraState::clear_isinitializing() {
  isinitializing_ = false;
}
inline bool CameraState::isinitializing() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.CameraState.isInitializing)
  return isinitializing_;
}
inline void CameraState::set_isinitializing(bool value) {
  
  isinitializing_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.CameraState.isInitializing)
}

// bool hasError = 5;
inline void CameraState::clear_haserror() {
  haserror_ = false;
}
inline bool CameraState::haserror() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.CameraState.hasError)
  return haserror_;
}
inline void CameraState::set_haserror(bool value) {
  
  haserror_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.CameraState.hasError)
}

// bool isVerified = 6;
inline void CameraState::clear_isverified() {
  isverified_ = false;
}
inline bool CameraState::isverified() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.CameraState.isVerified)
  return isverified_;
}
inline void CameraState::set_isverified(bool value) {
  
  isverified_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.CameraState.isVerified)
}

// bool isFull = 7;
inline void CameraState::clear_isfull() {
  isfull_ = false;
}
inline bool CameraState::isfull() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.CameraState.isFull)
  return isfull_;
}
inline void CameraState::set_isfull(bool value) {
  
  isfull_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.CameraState.isFull)
}

// bool isFormatted = 8;
inline void CameraState::clear_isformatted() {
  isformatted_ = false;
}
inline bool CameraState::isformatted() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.CameraState.isFormatted)
  return isformatted_;
}
inline void CameraState::set_isformatted(bool value) {
  
  isformatted_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.CameraState.isFormatted)
}

// bool isFormatting = 9;
inline void CameraState::clear_isformatting() {
  isformatting_ = false;
}
inline bool CameraState::isformatting() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.CameraState.isFormatting)
  return isformatting_;
}
inline void CameraState::set_isformatting(bool value) {
  
  isformatting_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.CameraState.isFormatting)
}

// bool isInvalidFormat = 10;
inline void CameraState::clear_isinvalidformat() {
  isinvalidformat_ = false;
}
inline bool CameraState::isinvalidformat() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.CameraState.isInvalidFormat)
  return isinvalidformat_;
}
inline void CameraState::set_isinvalidformat(bool value) {
  
  isinvalidformat_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.CameraState.isInvalidFormat)
}

// bool isReadOnly = 11;
inline void CameraState::clear_isreadonly() {
  isreadonly_ = false;
}
inline bool CameraState::isreadonly() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.CameraState.isReadOnly)
  return isreadonly_;
}
inline void CameraState::set_isreadonly(bool value) {
  
  isreadonly_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.CameraState.isReadOnly)
}

// uint32 totalSpaceInMB = 12;
inline void CameraState::clear_totalspaceinmb() {
  totalspaceinmb_ = 0u;
}
inline ::google::protobuf::uint32 CameraState::totalspaceinmb() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.CameraState.totalSpaceInMB)
  return totalspaceinmb_;
}
inline void CameraState::set_totalspaceinmb(::google::protobuf::uint32 value) {
  
  totalspaceinmb_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.CameraState.totalSpaceInMB)
}

// uint32 remainingSpaceInMB = 13;
inline void CameraState::clear_remainingspaceinmb() {
  remainingspaceinmb_ = 0u;
}
inline ::google::protobuf::uint32 CameraState::remainingspaceinmb() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.CameraState.remainingSpaceInMB)
  return remainingspaceinmb_;
}
inline void CameraState::set_remainingspaceinmb(::google::protobuf::uint32 value) {
  
  remainingspaceinmb_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.CameraState.remainingSpaceInMB)
}

// uint32 availableCaptureCount = 14;
inline void CameraState::clear_availablecapturecount() {
  availablecapturecount_ = 0u;
}
inline ::google::protobuf::uint32 CameraState::availablecapturecount() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.CameraState.availableCaptureCount)
  return availablecapturecount_;
}
inline void CameraState::set_availablecapturecount(::google::protobuf::uint32 value) {
  
  availablecapturecount_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.CameraState.availableCaptureCount)
}

// uint32 availableRecordingTimeInSeconds = 15;
inline void CameraState::clear_availablerecordingtimeinseconds() {
  availablerecordingtimeinseconds_ = 0u;
}
inline ::google::protobuf::uint32 CameraState::availablerecordingtimeinseconds() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.CameraState.availableRecordingTimeInSeconds)
  return availablerecordingtimeinseconds_;
}
inline void CameraState::set_availablerecordingtimeinseconds(::google::protobuf::uint32 value) {
  
  availablerecordingtimeinseconds_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.CameraState.availableRecordingTimeInSeconds)
}

// int32 index = 16;
inline void CameraState::clear_index() {
  index_ = 0;
}
inline ::google::protobuf::int32 CameraState::index() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.CameraState.index)
  return index_;
}
inline void CameraState::set_index(::google::protobuf::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.CameraState.index)
}

// .DJIFRProto.Standard.CameraState.CameraMode mode = 17;
inline void CameraState::clear_mode() {
  mode_ = 0;
}
inline ::DJIFRProto::Standard::CameraState_CameraMode CameraState::mode() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.CameraState.mode)
  return static_cast< ::DJIFRProto::Standard::CameraState_CameraMode >(mode_);
}
inline void CameraState::set_mode(::DJIFRProto::Standard::CameraState_CameraMode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.CameraState.mode)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Standard
}  // namespace DJIFRProto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::DJIFRProto::Standard::CameraState_CameraMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DJIFRProto::Standard::CameraState_CameraMode>() {
  return ::DJIFRProto::Standard::CameraState_CameraMode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Camera_2fFRCameraStateProto_2eproto__INCLUDED
