// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FlightController/FRFlightControllerModelProto.proto

#include "FlightController/FRFlightControllerModelProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace DJIFRProto {
namespace Standard {
class FlightWindDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FlightWind>
      _instance;
} _FlightWind_default_instance_;
class ConnectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Connection>
      _instance;
} _Connection_default_instance_;
class SmartRTHDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SmartRTH>
      _instance;
} _SmartRTH_default_instance_;
class VirtualStickVerticalControlDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VirtualStickVerticalControl>
      _instance;
} _VirtualStickVerticalControl_default_instance_;
class VirtualStickRollPitchControlDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VirtualStickRollPitchControl>
      _instance;
} _VirtualStickRollPitchControl_default_instance_;
class VirtualStickYawControlDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VirtualStickYawControl>
      _instance;
} _VirtualStickYawControl_default_instance_;
class VirtualStickFlightCoordinateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VirtualStickFlightCoordinate>
      _instance;
} _VirtualStickFlightCoordinate_default_instance_;
class VirtualStickFlightControlDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VirtualStickFlightControlData>
      _instance;
} _VirtualStickFlightControlData_default_instance_;
class FlightControllerStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FlightControllerState>
      _instance;
} _FlightControllerState_default_instance_;
}  // namespace Standard
}  // namespace DJIFRProto
namespace protobuf_FlightController_2fFRFlightControllerModelProto_2eproto {
void InitDefaultsFlightWindImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::DJIFRProto::Standard::_FlightWind_default_instance_;
    new (ptr) ::DJIFRProto::Standard::FlightWind();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DJIFRProto::Standard::FlightWind::InitAsDefaultInstance();
}

void InitDefaultsFlightWind() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFlightWindImpl);
}

void InitDefaultsConnectionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::DJIFRProto::Standard::_Connection_default_instance_;
    new (ptr) ::DJIFRProto::Standard::Connection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DJIFRProto::Standard::Connection::InitAsDefaultInstance();
}

void InitDefaultsConnection() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsConnectionImpl);
}

void InitDefaultsSmartRTHImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::DJIFRProto::Standard::_SmartRTH_default_instance_;
    new (ptr) ::DJIFRProto::Standard::SmartRTH();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DJIFRProto::Standard::SmartRTH::InitAsDefaultInstance();
}

void InitDefaultsSmartRTH() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSmartRTHImpl);
}

void InitDefaultsVirtualStickVerticalControlImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::DJIFRProto::Standard::_VirtualStickVerticalControl_default_instance_;
    new (ptr) ::DJIFRProto::Standard::VirtualStickVerticalControl();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DJIFRProto::Standard::VirtualStickVerticalControl::InitAsDefaultInstance();
}

void InitDefaultsVirtualStickVerticalControl() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVirtualStickVerticalControlImpl);
}

void InitDefaultsVirtualStickRollPitchControlImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::DJIFRProto::Standard::_VirtualStickRollPitchControl_default_instance_;
    new (ptr) ::DJIFRProto::Standard::VirtualStickRollPitchControl();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DJIFRProto::Standard::VirtualStickRollPitchControl::InitAsDefaultInstance();
}

void InitDefaultsVirtualStickRollPitchControl() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVirtualStickRollPitchControlImpl);
}

void InitDefaultsVirtualStickYawControlImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::DJIFRProto::Standard::_VirtualStickYawControl_default_instance_;
    new (ptr) ::DJIFRProto::Standard::VirtualStickYawControl();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DJIFRProto::Standard::VirtualStickYawControl::InitAsDefaultInstance();
}

void InitDefaultsVirtualStickYawControl() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVirtualStickYawControlImpl);
}

void InitDefaultsVirtualStickFlightCoordinateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::DJIFRProto::Standard::_VirtualStickFlightCoordinate_default_instance_;
    new (ptr) ::DJIFRProto::Standard::VirtualStickFlightCoordinate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DJIFRProto::Standard::VirtualStickFlightCoordinate::InitAsDefaultInstance();
}

void InitDefaultsVirtualStickFlightCoordinate() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVirtualStickFlightCoordinateImpl);
}

void InitDefaultsVirtualStickFlightControlDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::DJIFRProto::Standard::_VirtualStickFlightControlData_default_instance_;
    new (ptr) ::DJIFRProto::Standard::VirtualStickFlightControlData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DJIFRProto::Standard::VirtualStickFlightControlData::InitAsDefaultInstance();
}

void InitDefaultsVirtualStickFlightControlData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVirtualStickFlightControlDataImpl);
}

void InitDefaultsFlightControllerStateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_Common_2fFRCommonModelProto_2eproto::InitDefaultsAttitude();
  protobuf_Common_2fFRCommonModelProto_2eproto::InitDefaultsLocationCoordinate2D();
  protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::InitDefaultsVirtualStickFlightControlData();
  protobuf_Common_2fFRCommonModelProto_2eproto::InitDefaultsVelocity();
  {
    void* ptr = &::DJIFRProto::Standard::_FlightControllerState_default_instance_;
    new (ptr) ::DJIFRProto::Standard::FlightControllerState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DJIFRProto::Standard::FlightControllerState::InitAsDefaultInstance();
}

void InitDefaultsFlightControllerState() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFlightControllerStateImpl);
}

::google::protobuf::Metadata file_level_metadata[9];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[8];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FlightWind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::Connection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::SmartRTH, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::VirtualStickVerticalControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::VirtualStickRollPitchControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::VirtualStickYawControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::VirtualStickFlightCoordinate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::VirtualStickFlightControlData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::VirtualStickFlightControlData, pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::VirtualStickFlightControlData, roll_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::VirtualStickFlightControlData, yaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::VirtualStickFlightControlData, verticalthrottle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::VirtualStickFlightControlData, verticalcontrolmode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::VirtualStickFlightControlData, rollpitchcontrolmode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::VirtualStickFlightControlData, yawcontrolmode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::VirtualStickFlightControlData, rollpitchcoordinatesystem_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, attitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, homelocationcoordinate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, takeofflocationaltitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, aircraftlocation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, altitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, flightmode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, gpssignallevel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, satellitecount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, remainingflighttime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, batterypercentageneededtolandfromcurrentheight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, batterypercentageneededtogohome_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, smartrthstate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, behavior_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, virtualcontroldata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, isfailsafeenabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, aremotorson_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, ishomelocationset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, islandingconfirmationneeded_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, hasreachedmaxflightheight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, hasreachedmaxflightradius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, windwarning_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, countofflights_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, flightlogindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, isflying_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, smartrthcountdown_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, isgpsbeingused_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, flighttimeinseconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, cumulativeflightdistance_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::DJIFRProto::Standard::FlightWind)},
  { 5, -1, sizeof(::DJIFRProto::Standard::Connection)},
  { 10, -1, sizeof(::DJIFRProto::Standard::SmartRTH)},
  { 15, -1, sizeof(::DJIFRProto::Standard::VirtualStickVerticalControl)},
  { 20, -1, sizeof(::DJIFRProto::Standard::VirtualStickRollPitchControl)},
  { 25, -1, sizeof(::DJIFRProto::Standard::VirtualStickYawControl)},
  { 30, -1, sizeof(::DJIFRProto::Standard::VirtualStickFlightCoordinate)},
  { 35, -1, sizeof(::DJIFRProto::Standard::VirtualStickFlightControlData)},
  { 48, -1, sizeof(::DJIFRProto::Standard::FlightControllerState)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::DJIFRProto::Standard::_FlightWind_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DJIFRProto::Standard::_Connection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DJIFRProto::Standard::_SmartRTH_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DJIFRProto::Standard::_VirtualStickVerticalControl_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DJIFRProto::Standard::_VirtualStickRollPitchControl_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DJIFRProto::Standard::_VirtualStickYawControl_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DJIFRProto::Standard::_VirtualStickFlightCoordinate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DJIFRProto::Standard::_VirtualStickFlightControlData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DJIFRProto::Standard::_FlightControllerState_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "FlightController/FRFlightControllerModelProto.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n3FlightController/FRFlightControllerMod"
      "elProto.proto\022\023DJIFRProto.Standard\032\037Comm"
      "on/FRCommonModelProto.proto\"H\n\nFlightWin"
      "d\":\n\007Warning\022\n\n\006Level0\020\000\022\n\n\006Level1\020\001\022\n\n\006"
      "Level2\020\002\022\013\n\007Unknown\020\003\"Q\n\nConnection\"C\n\020F"
      "ailSafeBehavior\022\t\n\005Hover\020\000\022\013\n\007Landing\020\001\022"
      "\n\n\006GoHome\020\002\022\013\n\007Unknown\020\003\"Y\n\010SmartRTH\"M\n\005"
      "State\022\010\n\004Idle\020\000\022\020\n\014CountingDown\020\001\022\014\n\010Exe"
      "cuted\020\002\022\r\n\tCancelled\020\003\022\013\n\007Unknown\020\004\"N\n\033V"
      "irtualStickVerticalControl\"/\n\004Mode\022\014\n\010Ve"
      "locity\020\000\022\014\n\010Position\020\001\022\013\n\007Unknown\020\002\"L\n\034V"
      "irtualStickRollPitchControl\",\n\004Mode\022\t\n\005A"
      "ngle\020\000\022\014\n\010Velocity\020\001\022\013\n\007Unknown\020\002\"F\n\026Vir"
      "tualStickYawControl\",\n\004Mode\022\t\n\005Angle\020\000\022\014"
      "\n\010Velocity\020\001\022\013\n\007Unknown\020\002\"K\n\034VirtualStic"
      "kFlightCoordinate\"+\n\006System\022\n\n\006Ground\020\000\022"
      "\010\n\004Body\020\001\022\013\n\007Unknown\020\002\"\264\003\n\035VirtualStickF"
      "lightControlData\022\r\n\005pitch\030\001 \001(\002\022\014\n\004roll\030"
      "\002 \001(\002\022\013\n\003yaw\030\003 \001(\002\022\030\n\020verticalThrottle\030\004"
      " \001(\002\022R\n\023verticalControlMode\030\005 \001(\01625.DJIF"
      "RProto.Standard.VirtualStickVerticalCont"
      "rol.Mode\022T\n\024rollPitchControlMode\030\006 \001(\01626"
      ".DJIFRProto.Standard.VirtualStickRollPit"
      "chControl.Mode\022H\n\016yawControlMode\030\007 \001(\01620"
      ".DJIFRProto.Standard.VirtualStickYawCont"
      "rol.Mode\022[\n\031rollPitchCoordinateSystem\030\010 "
      "\001(\01628.DJIFRProto.Standard.VirtualStickFl"
      "ightCoordinate.System\"\275\t\n\025FlightControll"
      "erState\022/\n\010attitude\030\001 \001(\0132\035.DJIFRProto.S"
      "tandard.Attitude\022I\n\026homeLocationCoordina"
      "te\030\002 \001(\0132).DJIFRProto.Standard.LocationC"
      "oordinate2D\022\037\n\027takeoffLocationAltitude\030\003"
      " \001(\002\022C\n\020aircraftLocation\030\004 \001(\0132).DJIFRPr"
      "oto.Standard.LocationCoordinate2D\022\020\n\010alt"
      "itude\030\005 \001(\002\0223\n\nflightMode\030\006 \001(\0162\037.DJIFRP"
      "roto.Standard.FlightMode\022<\n\016GPSSignalLev"
      "el\030\007 \001(\0162$.DJIFRProto.Standard.GPSSignal"
      ".Level\022\026\n\016satelliteCount\030\010 \001(\005\022\033\n\023remain"
      "ingFlightTime\030\t \001(\005\0226\n.batteryPercentage"
      "NeededToLandFromCurrentHeight\030\n \001(\005\022\'\n\037b"
      "atteryPercentageNeededToGoHome\030\013 \001(\005\022:\n\r"
      "smartRTHState\030\014 \001(\0162#.DJIFRProto.Standar"
      "d.SmartRTH.State\022B\n\010behavior\030\r \001(\01620.DJI"
      "FRProto.Standard.Connection.FailSafeBeha"
      "vior\022N\n\022virtualControlData\030\016 \001(\01322.DJIFR"
      "Proto.Standard.VirtualStickFlightControl"
      "Data\022\031\n\021isFailsafeEnabled\030\017 \001(\010\022\023\n\013areMo"
      "torsOn\030\020 \001(\010\022\031\n\021isHomeLocationSet\030\021 \001(\010\022"
      "#\n\033isLandingConfirmationNeeded\030\022 \001(\010\022!\n\031"
      "hasReachedMaxFlightHeight\030\023 \001(\010\022!\n\031hasRe"
      "achedMaxFlightRadius\030\024 \001(\010\022<\n\013windWarnin"
      "g\030\025 \001(\0162\'.DJIFRProto.Standard.FlightWind"
      ".Warning\022\026\n\016countOfFlights\030\026 \001(\005\022\026\n\016flig"
      "htLogIndex\030\027 \001(\005\022\020\n\010isFlying\030\030 \001(\010\022\031\n\021sm"
      "artRTHCountdown\030\031 \001(\005\022/\n\010velocity\030\032 \001(\0132"
      "\035.DJIFRProto.Standard.Velocity\022\026\n\016isGPSB"
      "eingUsed\030\033 \001(\010\022\033\n\023flightTimeInSeconds\030\034 "
      "\001(\001\022 \n\030cumulativeFlightDistance\030\035 \001(\001*\267\003"
      "\n\nFlightMode\022\n\n\006Manual\020\000\022\010\n\004Atti\020\001\022\022\n\016At"
      "tiCourseLock\020\002\022\013\n\007GPSAtti\020\006\022\021\n\rGPSCourse"
      "Lock\020\007\022\017\n\013GPSHomeLock\020\010\022\017\n\013GPSHotPoint\020\t"
      "\022\023\n\017AssistedTakeoff\020\n\022\017\n\013AutoTakeoff\020\013\022\017"
      "\n\013AutoLanding\020\014\022\017\n\013GPSWaypoint\020\016\022\n\n\006GoHo"
      "me\020\017\022\014\n\010Joystick\020\021\022\024\n\020GPSAttiWristband\020\022"
      "\022\010\n\004Draw\020\030\022\017\n\013GPSFollowMe\020\031\022\017\n\013ActiveTra"
      "ck\020\032\022\n\n\006TapFly\020\033\022\014\n\010GPSSport\020\037\022\r\n\tGPSNov"
      "ice\020 \022\022\n\016ConfirmLanding\020!\022\021\n\rTerrainFoll"
      "ow\020#\022\n\n\006Tripod\020&\022\030\n\024ActiveTrackSpotlight"
      "\020\'\022\025\n\021MotorsJustStarted\020)\022\014\n\007Unknown\020\377\001B"
      "\r\242\002\nDJIFRProtob\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2782);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FlightController/FRFlightControllerModelProto.proto", &protobuf_RegisterTypes);
  ::protobuf_Common_2fFRCommonModelProto_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_FlightController_2fFRFlightControllerModelProto_2eproto
namespace DJIFRProto {
namespace Standard {
const ::google::protobuf::EnumDescriptor* FlightWind_Warning_descriptor() {
  protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::file_level_enum_descriptors[0];
}
bool FlightWind_Warning_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FlightWind_Warning FlightWind::Level0;
const FlightWind_Warning FlightWind::Level1;
const FlightWind_Warning FlightWind::Level2;
const FlightWind_Warning FlightWind::Unknown;
const FlightWind_Warning FlightWind::Warning_MIN;
const FlightWind_Warning FlightWind::Warning_MAX;
const int FlightWind::Warning_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Connection_FailSafeBehavior_descriptor() {
  protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::file_level_enum_descriptors[1];
}
bool Connection_FailSafeBehavior_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Connection_FailSafeBehavior Connection::Hover;
const Connection_FailSafeBehavior Connection::Landing;
const Connection_FailSafeBehavior Connection::GoHome;
const Connection_FailSafeBehavior Connection::Unknown;
const Connection_FailSafeBehavior Connection::FailSafeBehavior_MIN;
const Connection_FailSafeBehavior Connection::FailSafeBehavior_MAX;
const int Connection::FailSafeBehavior_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SmartRTH_State_descriptor() {
  protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::file_level_enum_descriptors[2];
}
bool SmartRTH_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SmartRTH_State SmartRTH::Idle;
const SmartRTH_State SmartRTH::CountingDown;
const SmartRTH_State SmartRTH::Executed;
const SmartRTH_State SmartRTH::Cancelled;
const SmartRTH_State SmartRTH::Unknown;
const SmartRTH_State SmartRTH::State_MIN;
const SmartRTH_State SmartRTH::State_MAX;
const int SmartRTH::State_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* VirtualStickVerticalControl_Mode_descriptor() {
  protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::file_level_enum_descriptors[3];
}
bool VirtualStickVerticalControl_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VirtualStickVerticalControl_Mode VirtualStickVerticalControl::Velocity;
const VirtualStickVerticalControl_Mode VirtualStickVerticalControl::Position;
const VirtualStickVerticalControl_Mode VirtualStickVerticalControl::Unknown;
const VirtualStickVerticalControl_Mode VirtualStickVerticalControl::Mode_MIN;
const VirtualStickVerticalControl_Mode VirtualStickVerticalControl::Mode_MAX;
const int VirtualStickVerticalControl::Mode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* VirtualStickRollPitchControl_Mode_descriptor() {
  protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::file_level_enum_descriptors[4];
}
bool VirtualStickRollPitchControl_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VirtualStickRollPitchControl_Mode VirtualStickRollPitchControl::Angle;
const VirtualStickRollPitchControl_Mode VirtualStickRollPitchControl::Velocity;
const VirtualStickRollPitchControl_Mode VirtualStickRollPitchControl::Unknown;
const VirtualStickRollPitchControl_Mode VirtualStickRollPitchControl::Mode_MIN;
const VirtualStickRollPitchControl_Mode VirtualStickRollPitchControl::Mode_MAX;
const int VirtualStickRollPitchControl::Mode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* VirtualStickYawControl_Mode_descriptor() {
  protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::file_level_enum_descriptors[5];
}
bool VirtualStickYawControl_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VirtualStickYawControl_Mode VirtualStickYawControl::Angle;
const VirtualStickYawControl_Mode VirtualStickYawControl::Velocity;
const VirtualStickYawControl_Mode VirtualStickYawControl::Unknown;
const VirtualStickYawControl_Mode VirtualStickYawControl::Mode_MIN;
const VirtualStickYawControl_Mode VirtualStickYawControl::Mode_MAX;
const int VirtualStickYawControl::Mode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* VirtualStickFlightCoordinate_System_descriptor() {
  protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::file_level_enum_descriptors[6];
}
bool VirtualStickFlightCoordinate_System_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VirtualStickFlightCoordinate_System VirtualStickFlightCoordinate::Ground;
const VirtualStickFlightCoordinate_System VirtualStickFlightCoordinate::Body;
const VirtualStickFlightCoordinate_System VirtualStickFlightCoordinate::Unknown;
const VirtualStickFlightCoordinate_System VirtualStickFlightCoordinate::System_MIN;
const VirtualStickFlightCoordinate_System VirtualStickFlightCoordinate::System_MAX;
const int VirtualStickFlightCoordinate::System_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* FlightMode_descriptor() {
  protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::file_level_enum_descriptors[7];
}
bool FlightMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 14:
    case 15:
    case 17:
    case 18:
    case 24:
    case 25:
    case 26:
    case 27:
    case 31:
    case 32:
    case 33:
    case 35:
    case 38:
    case 39:
    case 41:
    case 255:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void FlightWind::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlightWind::FlightWind()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::InitDefaultsFlightWind();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DJIFRProto.Standard.FlightWind)
}
FlightWind::FlightWind(const FlightWind& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.FlightWind)
}

void FlightWind::SharedCtor() {
  _cached_size_ = 0;
}

FlightWind::~FlightWind() {
  // @@protoc_insertion_point(destructor:DJIFRProto.Standard.FlightWind)
  SharedDtor();
}

void FlightWind::SharedDtor() {
}

void FlightWind::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlightWind::descriptor() {
  ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FlightWind& FlightWind::default_instance() {
  ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::InitDefaultsFlightWind();
  return *internal_default_instance();
}

FlightWind* FlightWind::New(::google::protobuf::Arena* arena) const {
  FlightWind* n = new FlightWind;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FlightWind::Clear() {
// @@protoc_insertion_point(message_clear_start:DJIFRProto.Standard.FlightWind)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool FlightWind::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DJIFRProto.Standard.FlightWind)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:DJIFRProto.Standard.FlightWind)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DJIFRProto.Standard.FlightWind)
  return false;
#undef DO_
}

void FlightWind::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DJIFRProto.Standard.FlightWind)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DJIFRProto.Standard.FlightWind)
}

::google::protobuf::uint8* FlightWind::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DJIFRProto.Standard.FlightWind)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DJIFRProto.Standard.FlightWind)
  return target;
}

size_t FlightWind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DJIFRProto.Standard.FlightWind)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlightWind::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DJIFRProto.Standard.FlightWind)
  GOOGLE_DCHECK_NE(&from, this);
  const FlightWind* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FlightWind>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DJIFRProto.Standard.FlightWind)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DJIFRProto.Standard.FlightWind)
    MergeFrom(*source);
  }
}

void FlightWind::MergeFrom(const FlightWind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DJIFRProto.Standard.FlightWind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FlightWind::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DJIFRProto.Standard.FlightWind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlightWind::CopyFrom(const FlightWind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DJIFRProto.Standard.FlightWind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlightWind::IsInitialized() const {
  return true;
}

void FlightWind::Swap(FlightWind* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlightWind::InternalSwap(FlightWind* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FlightWind::GetMetadata() const {
  protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Connection::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Connection::Connection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::InitDefaultsConnection();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DJIFRProto.Standard.Connection)
}
Connection::Connection(const Connection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.Connection)
}

void Connection::SharedCtor() {
  _cached_size_ = 0;
}

Connection::~Connection() {
  // @@protoc_insertion_point(destructor:DJIFRProto.Standard.Connection)
  SharedDtor();
}

void Connection::SharedDtor() {
}

void Connection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Connection::descriptor() {
  ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Connection& Connection::default_instance() {
  ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::InitDefaultsConnection();
  return *internal_default_instance();
}

Connection* Connection::New(::google::protobuf::Arena* arena) const {
  Connection* n = new Connection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Connection::Clear() {
// @@protoc_insertion_point(message_clear_start:DJIFRProto.Standard.Connection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool Connection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DJIFRProto.Standard.Connection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:DJIFRProto.Standard.Connection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DJIFRProto.Standard.Connection)
  return false;
#undef DO_
}

void Connection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DJIFRProto.Standard.Connection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DJIFRProto.Standard.Connection)
}

::google::protobuf::uint8* Connection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DJIFRProto.Standard.Connection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DJIFRProto.Standard.Connection)
  return target;
}

size_t Connection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DJIFRProto.Standard.Connection)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Connection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DJIFRProto.Standard.Connection)
  GOOGLE_DCHECK_NE(&from, this);
  const Connection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Connection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DJIFRProto.Standard.Connection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DJIFRProto.Standard.Connection)
    MergeFrom(*source);
  }
}

void Connection::MergeFrom(const Connection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DJIFRProto.Standard.Connection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Connection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DJIFRProto.Standard.Connection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Connection::CopyFrom(const Connection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DJIFRProto.Standard.Connection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Connection::IsInitialized() const {
  return true;
}

void Connection::Swap(Connection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Connection::InternalSwap(Connection* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Connection::GetMetadata() const {
  protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SmartRTH::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SmartRTH::SmartRTH()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::InitDefaultsSmartRTH();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DJIFRProto.Standard.SmartRTH)
}
SmartRTH::SmartRTH(const SmartRTH& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.SmartRTH)
}

void SmartRTH::SharedCtor() {
  _cached_size_ = 0;
}

SmartRTH::~SmartRTH() {
  // @@protoc_insertion_point(destructor:DJIFRProto.Standard.SmartRTH)
  SharedDtor();
}

void SmartRTH::SharedDtor() {
}

void SmartRTH::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SmartRTH::descriptor() {
  ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SmartRTH& SmartRTH::default_instance() {
  ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::InitDefaultsSmartRTH();
  return *internal_default_instance();
}

SmartRTH* SmartRTH::New(::google::protobuf::Arena* arena) const {
  SmartRTH* n = new SmartRTH;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SmartRTH::Clear() {
// @@protoc_insertion_point(message_clear_start:DJIFRProto.Standard.SmartRTH)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool SmartRTH::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DJIFRProto.Standard.SmartRTH)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:DJIFRProto.Standard.SmartRTH)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DJIFRProto.Standard.SmartRTH)
  return false;
#undef DO_
}

void SmartRTH::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DJIFRProto.Standard.SmartRTH)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DJIFRProto.Standard.SmartRTH)
}

::google::protobuf::uint8* SmartRTH::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DJIFRProto.Standard.SmartRTH)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DJIFRProto.Standard.SmartRTH)
  return target;
}

size_t SmartRTH::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DJIFRProto.Standard.SmartRTH)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SmartRTH::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DJIFRProto.Standard.SmartRTH)
  GOOGLE_DCHECK_NE(&from, this);
  const SmartRTH* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SmartRTH>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DJIFRProto.Standard.SmartRTH)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DJIFRProto.Standard.SmartRTH)
    MergeFrom(*source);
  }
}

void SmartRTH::MergeFrom(const SmartRTH& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DJIFRProto.Standard.SmartRTH)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SmartRTH::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DJIFRProto.Standard.SmartRTH)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmartRTH::CopyFrom(const SmartRTH& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DJIFRProto.Standard.SmartRTH)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmartRTH::IsInitialized() const {
  return true;
}

void SmartRTH::Swap(SmartRTH* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SmartRTH::InternalSwap(SmartRTH* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SmartRTH::GetMetadata() const {
  protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VirtualStickVerticalControl::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VirtualStickVerticalControl::VirtualStickVerticalControl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::InitDefaultsVirtualStickVerticalControl();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DJIFRProto.Standard.VirtualStickVerticalControl)
}
VirtualStickVerticalControl::VirtualStickVerticalControl(const VirtualStickVerticalControl& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.VirtualStickVerticalControl)
}

void VirtualStickVerticalControl::SharedCtor() {
  _cached_size_ = 0;
}

VirtualStickVerticalControl::~VirtualStickVerticalControl() {
  // @@protoc_insertion_point(destructor:DJIFRProto.Standard.VirtualStickVerticalControl)
  SharedDtor();
}

void VirtualStickVerticalControl::SharedDtor() {
}

void VirtualStickVerticalControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VirtualStickVerticalControl::descriptor() {
  ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VirtualStickVerticalControl& VirtualStickVerticalControl::default_instance() {
  ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::InitDefaultsVirtualStickVerticalControl();
  return *internal_default_instance();
}

VirtualStickVerticalControl* VirtualStickVerticalControl::New(::google::protobuf::Arena* arena) const {
  VirtualStickVerticalControl* n = new VirtualStickVerticalControl;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VirtualStickVerticalControl::Clear() {
// @@protoc_insertion_point(message_clear_start:DJIFRProto.Standard.VirtualStickVerticalControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool VirtualStickVerticalControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DJIFRProto.Standard.VirtualStickVerticalControl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:DJIFRProto.Standard.VirtualStickVerticalControl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DJIFRProto.Standard.VirtualStickVerticalControl)
  return false;
#undef DO_
}

void VirtualStickVerticalControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DJIFRProto.Standard.VirtualStickVerticalControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DJIFRProto.Standard.VirtualStickVerticalControl)
}

::google::protobuf::uint8* VirtualStickVerticalControl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DJIFRProto.Standard.VirtualStickVerticalControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DJIFRProto.Standard.VirtualStickVerticalControl)
  return target;
}

size_t VirtualStickVerticalControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DJIFRProto.Standard.VirtualStickVerticalControl)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VirtualStickVerticalControl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DJIFRProto.Standard.VirtualStickVerticalControl)
  GOOGLE_DCHECK_NE(&from, this);
  const VirtualStickVerticalControl* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VirtualStickVerticalControl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DJIFRProto.Standard.VirtualStickVerticalControl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DJIFRProto.Standard.VirtualStickVerticalControl)
    MergeFrom(*source);
  }
}

void VirtualStickVerticalControl::MergeFrom(const VirtualStickVerticalControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DJIFRProto.Standard.VirtualStickVerticalControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void VirtualStickVerticalControl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DJIFRProto.Standard.VirtualStickVerticalControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VirtualStickVerticalControl::CopyFrom(const VirtualStickVerticalControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DJIFRProto.Standard.VirtualStickVerticalControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualStickVerticalControl::IsInitialized() const {
  return true;
}

void VirtualStickVerticalControl::Swap(VirtualStickVerticalControl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VirtualStickVerticalControl::InternalSwap(VirtualStickVerticalControl* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VirtualStickVerticalControl::GetMetadata() const {
  protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VirtualStickRollPitchControl::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VirtualStickRollPitchControl::VirtualStickRollPitchControl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::InitDefaultsVirtualStickRollPitchControl();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DJIFRProto.Standard.VirtualStickRollPitchControl)
}
VirtualStickRollPitchControl::VirtualStickRollPitchControl(const VirtualStickRollPitchControl& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.VirtualStickRollPitchControl)
}

void VirtualStickRollPitchControl::SharedCtor() {
  _cached_size_ = 0;
}

VirtualStickRollPitchControl::~VirtualStickRollPitchControl() {
  // @@protoc_insertion_point(destructor:DJIFRProto.Standard.VirtualStickRollPitchControl)
  SharedDtor();
}

void VirtualStickRollPitchControl::SharedDtor() {
}

void VirtualStickRollPitchControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VirtualStickRollPitchControl::descriptor() {
  ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VirtualStickRollPitchControl& VirtualStickRollPitchControl::default_instance() {
  ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::InitDefaultsVirtualStickRollPitchControl();
  return *internal_default_instance();
}

VirtualStickRollPitchControl* VirtualStickRollPitchControl::New(::google::protobuf::Arena* arena) const {
  VirtualStickRollPitchControl* n = new VirtualStickRollPitchControl;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VirtualStickRollPitchControl::Clear() {
// @@protoc_insertion_point(message_clear_start:DJIFRProto.Standard.VirtualStickRollPitchControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool VirtualStickRollPitchControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DJIFRProto.Standard.VirtualStickRollPitchControl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:DJIFRProto.Standard.VirtualStickRollPitchControl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DJIFRProto.Standard.VirtualStickRollPitchControl)
  return false;
#undef DO_
}

void VirtualStickRollPitchControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DJIFRProto.Standard.VirtualStickRollPitchControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DJIFRProto.Standard.VirtualStickRollPitchControl)
}

::google::protobuf::uint8* VirtualStickRollPitchControl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DJIFRProto.Standard.VirtualStickRollPitchControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DJIFRProto.Standard.VirtualStickRollPitchControl)
  return target;
}

size_t VirtualStickRollPitchControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DJIFRProto.Standard.VirtualStickRollPitchControl)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VirtualStickRollPitchControl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DJIFRProto.Standard.VirtualStickRollPitchControl)
  GOOGLE_DCHECK_NE(&from, this);
  const VirtualStickRollPitchControl* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VirtualStickRollPitchControl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DJIFRProto.Standard.VirtualStickRollPitchControl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DJIFRProto.Standard.VirtualStickRollPitchControl)
    MergeFrom(*source);
  }
}

void VirtualStickRollPitchControl::MergeFrom(const VirtualStickRollPitchControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DJIFRProto.Standard.VirtualStickRollPitchControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void VirtualStickRollPitchControl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DJIFRProto.Standard.VirtualStickRollPitchControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VirtualStickRollPitchControl::CopyFrom(const VirtualStickRollPitchControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DJIFRProto.Standard.VirtualStickRollPitchControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualStickRollPitchControl::IsInitialized() const {
  return true;
}

void VirtualStickRollPitchControl::Swap(VirtualStickRollPitchControl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VirtualStickRollPitchControl::InternalSwap(VirtualStickRollPitchControl* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VirtualStickRollPitchControl::GetMetadata() const {
  protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VirtualStickYawControl::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VirtualStickYawControl::VirtualStickYawControl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::InitDefaultsVirtualStickYawControl();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DJIFRProto.Standard.VirtualStickYawControl)
}
VirtualStickYawControl::VirtualStickYawControl(const VirtualStickYawControl& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.VirtualStickYawControl)
}

void VirtualStickYawControl::SharedCtor() {
  _cached_size_ = 0;
}

VirtualStickYawControl::~VirtualStickYawControl() {
  // @@protoc_insertion_point(destructor:DJIFRProto.Standard.VirtualStickYawControl)
  SharedDtor();
}

void VirtualStickYawControl::SharedDtor() {
}

void VirtualStickYawControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VirtualStickYawControl::descriptor() {
  ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VirtualStickYawControl& VirtualStickYawControl::default_instance() {
  ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::InitDefaultsVirtualStickYawControl();
  return *internal_default_instance();
}

VirtualStickYawControl* VirtualStickYawControl::New(::google::protobuf::Arena* arena) const {
  VirtualStickYawControl* n = new VirtualStickYawControl;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VirtualStickYawControl::Clear() {
// @@protoc_insertion_point(message_clear_start:DJIFRProto.Standard.VirtualStickYawControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool VirtualStickYawControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DJIFRProto.Standard.VirtualStickYawControl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:DJIFRProto.Standard.VirtualStickYawControl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DJIFRProto.Standard.VirtualStickYawControl)
  return false;
#undef DO_
}

void VirtualStickYawControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DJIFRProto.Standard.VirtualStickYawControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DJIFRProto.Standard.VirtualStickYawControl)
}

::google::protobuf::uint8* VirtualStickYawControl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DJIFRProto.Standard.VirtualStickYawControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DJIFRProto.Standard.VirtualStickYawControl)
  return target;
}

size_t VirtualStickYawControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DJIFRProto.Standard.VirtualStickYawControl)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VirtualStickYawControl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DJIFRProto.Standard.VirtualStickYawControl)
  GOOGLE_DCHECK_NE(&from, this);
  const VirtualStickYawControl* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VirtualStickYawControl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DJIFRProto.Standard.VirtualStickYawControl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DJIFRProto.Standard.VirtualStickYawControl)
    MergeFrom(*source);
  }
}

void VirtualStickYawControl::MergeFrom(const VirtualStickYawControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DJIFRProto.Standard.VirtualStickYawControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void VirtualStickYawControl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DJIFRProto.Standard.VirtualStickYawControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VirtualStickYawControl::CopyFrom(const VirtualStickYawControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DJIFRProto.Standard.VirtualStickYawControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualStickYawControl::IsInitialized() const {
  return true;
}

void VirtualStickYawControl::Swap(VirtualStickYawControl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VirtualStickYawControl::InternalSwap(VirtualStickYawControl* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VirtualStickYawControl::GetMetadata() const {
  protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VirtualStickFlightCoordinate::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VirtualStickFlightCoordinate::VirtualStickFlightCoordinate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::InitDefaultsVirtualStickFlightCoordinate();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DJIFRProto.Standard.VirtualStickFlightCoordinate)
}
VirtualStickFlightCoordinate::VirtualStickFlightCoordinate(const VirtualStickFlightCoordinate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.VirtualStickFlightCoordinate)
}

void VirtualStickFlightCoordinate::SharedCtor() {
  _cached_size_ = 0;
}

VirtualStickFlightCoordinate::~VirtualStickFlightCoordinate() {
  // @@protoc_insertion_point(destructor:DJIFRProto.Standard.VirtualStickFlightCoordinate)
  SharedDtor();
}

void VirtualStickFlightCoordinate::SharedDtor() {
}

void VirtualStickFlightCoordinate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VirtualStickFlightCoordinate::descriptor() {
  ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VirtualStickFlightCoordinate& VirtualStickFlightCoordinate::default_instance() {
  ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::InitDefaultsVirtualStickFlightCoordinate();
  return *internal_default_instance();
}

VirtualStickFlightCoordinate* VirtualStickFlightCoordinate::New(::google::protobuf::Arena* arena) const {
  VirtualStickFlightCoordinate* n = new VirtualStickFlightCoordinate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VirtualStickFlightCoordinate::Clear() {
// @@protoc_insertion_point(message_clear_start:DJIFRProto.Standard.VirtualStickFlightCoordinate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool VirtualStickFlightCoordinate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DJIFRProto.Standard.VirtualStickFlightCoordinate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:DJIFRProto.Standard.VirtualStickFlightCoordinate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DJIFRProto.Standard.VirtualStickFlightCoordinate)
  return false;
#undef DO_
}

void VirtualStickFlightCoordinate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DJIFRProto.Standard.VirtualStickFlightCoordinate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DJIFRProto.Standard.VirtualStickFlightCoordinate)
}

::google::protobuf::uint8* VirtualStickFlightCoordinate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DJIFRProto.Standard.VirtualStickFlightCoordinate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DJIFRProto.Standard.VirtualStickFlightCoordinate)
  return target;
}

size_t VirtualStickFlightCoordinate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DJIFRProto.Standard.VirtualStickFlightCoordinate)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VirtualStickFlightCoordinate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DJIFRProto.Standard.VirtualStickFlightCoordinate)
  GOOGLE_DCHECK_NE(&from, this);
  const VirtualStickFlightCoordinate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VirtualStickFlightCoordinate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DJIFRProto.Standard.VirtualStickFlightCoordinate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DJIFRProto.Standard.VirtualStickFlightCoordinate)
    MergeFrom(*source);
  }
}

void VirtualStickFlightCoordinate::MergeFrom(const VirtualStickFlightCoordinate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DJIFRProto.Standard.VirtualStickFlightCoordinate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void VirtualStickFlightCoordinate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DJIFRProto.Standard.VirtualStickFlightCoordinate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VirtualStickFlightCoordinate::CopyFrom(const VirtualStickFlightCoordinate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DJIFRProto.Standard.VirtualStickFlightCoordinate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualStickFlightCoordinate::IsInitialized() const {
  return true;
}

void VirtualStickFlightCoordinate::Swap(VirtualStickFlightCoordinate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VirtualStickFlightCoordinate::InternalSwap(VirtualStickFlightCoordinate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VirtualStickFlightCoordinate::GetMetadata() const {
  protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VirtualStickFlightControlData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VirtualStickFlightControlData::kPitchFieldNumber;
const int VirtualStickFlightControlData::kRollFieldNumber;
const int VirtualStickFlightControlData::kYawFieldNumber;
const int VirtualStickFlightControlData::kVerticalThrottleFieldNumber;
const int VirtualStickFlightControlData::kVerticalControlModeFieldNumber;
const int VirtualStickFlightControlData::kRollPitchControlModeFieldNumber;
const int VirtualStickFlightControlData::kYawControlModeFieldNumber;
const int VirtualStickFlightControlData::kRollPitchCoordinateSystemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VirtualStickFlightControlData::VirtualStickFlightControlData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::InitDefaultsVirtualStickFlightControlData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DJIFRProto.Standard.VirtualStickFlightControlData)
}
VirtualStickFlightControlData::VirtualStickFlightControlData(const VirtualStickFlightControlData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pitch_, &from.pitch_,
    static_cast<size_t>(reinterpret_cast<char*>(&rollpitchcoordinatesystem_) -
    reinterpret_cast<char*>(&pitch_)) + sizeof(rollpitchcoordinatesystem_));
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.VirtualStickFlightControlData)
}

void VirtualStickFlightControlData::SharedCtor() {
  ::memset(&pitch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rollpitchcoordinatesystem_) -
      reinterpret_cast<char*>(&pitch_)) + sizeof(rollpitchcoordinatesystem_));
  _cached_size_ = 0;
}

VirtualStickFlightControlData::~VirtualStickFlightControlData() {
  // @@protoc_insertion_point(destructor:DJIFRProto.Standard.VirtualStickFlightControlData)
  SharedDtor();
}

void VirtualStickFlightControlData::SharedDtor() {
}

void VirtualStickFlightControlData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VirtualStickFlightControlData::descriptor() {
  ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VirtualStickFlightControlData& VirtualStickFlightControlData::default_instance() {
  ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::InitDefaultsVirtualStickFlightControlData();
  return *internal_default_instance();
}

VirtualStickFlightControlData* VirtualStickFlightControlData::New(::google::protobuf::Arena* arena) const {
  VirtualStickFlightControlData* n = new VirtualStickFlightControlData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VirtualStickFlightControlData::Clear() {
// @@protoc_insertion_point(message_clear_start:DJIFRProto.Standard.VirtualStickFlightControlData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pitch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rollpitchcoordinatesystem_) -
      reinterpret_cast<char*>(&pitch_)) + sizeof(rollpitchcoordinatesystem_));
  _internal_metadata_.Clear();
}

bool VirtualStickFlightControlData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DJIFRProto.Standard.VirtualStickFlightControlData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float pitch = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float roll = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaw = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float verticalThrottle = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &verticalthrottle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DJIFRProto.Standard.VirtualStickVerticalControl.Mode verticalControlMode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_verticalcontrolmode(static_cast< ::DJIFRProto::Standard::VirtualStickVerticalControl_Mode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DJIFRProto.Standard.VirtualStickRollPitchControl.Mode rollPitchControlMode = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_rollpitchcontrolmode(static_cast< ::DJIFRProto::Standard::VirtualStickRollPitchControl_Mode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DJIFRProto.Standard.VirtualStickYawControl.Mode yawControlMode = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_yawcontrolmode(static_cast< ::DJIFRProto::Standard::VirtualStickYawControl_Mode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DJIFRProto.Standard.VirtualStickFlightCoordinate.System rollPitchCoordinateSystem = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_rollpitchcoordinatesystem(static_cast< ::DJIFRProto::Standard::VirtualStickFlightCoordinate_System >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DJIFRProto.Standard.VirtualStickFlightControlData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DJIFRProto.Standard.VirtualStickFlightControlData)
  return false;
#undef DO_
}

void VirtualStickFlightControlData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DJIFRProto.Standard.VirtualStickFlightControlData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float pitch = 1;
  if (this->pitch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->pitch(), output);
  }

  // float roll = 2;
  if (this->roll() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->roll(), output);
  }

  // float yaw = 3;
  if (this->yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->yaw(), output);
  }

  // float verticalThrottle = 4;
  if (this->verticalthrottle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->verticalthrottle(), output);
  }

  // .DJIFRProto.Standard.VirtualStickVerticalControl.Mode verticalControlMode = 5;
  if (this->verticalcontrolmode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->verticalcontrolmode(), output);
  }

  // .DJIFRProto.Standard.VirtualStickRollPitchControl.Mode rollPitchControlMode = 6;
  if (this->rollpitchcontrolmode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->rollpitchcontrolmode(), output);
  }

  // .DJIFRProto.Standard.VirtualStickYawControl.Mode yawControlMode = 7;
  if (this->yawcontrolmode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->yawcontrolmode(), output);
  }

  // .DJIFRProto.Standard.VirtualStickFlightCoordinate.System rollPitchCoordinateSystem = 8;
  if (this->rollpitchcoordinatesystem() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->rollpitchcoordinatesystem(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DJIFRProto.Standard.VirtualStickFlightControlData)
}

::google::protobuf::uint8* VirtualStickFlightControlData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DJIFRProto.Standard.VirtualStickFlightControlData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float pitch = 1;
  if (this->pitch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->pitch(), target);
  }

  // float roll = 2;
  if (this->roll() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->roll(), target);
  }

  // float yaw = 3;
  if (this->yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->yaw(), target);
  }

  // float verticalThrottle = 4;
  if (this->verticalthrottle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->verticalthrottle(), target);
  }

  // .DJIFRProto.Standard.VirtualStickVerticalControl.Mode verticalControlMode = 5;
  if (this->verticalcontrolmode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->verticalcontrolmode(), target);
  }

  // .DJIFRProto.Standard.VirtualStickRollPitchControl.Mode rollPitchControlMode = 6;
  if (this->rollpitchcontrolmode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->rollpitchcontrolmode(), target);
  }

  // .DJIFRProto.Standard.VirtualStickYawControl.Mode yawControlMode = 7;
  if (this->yawcontrolmode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->yawcontrolmode(), target);
  }

  // .DJIFRProto.Standard.VirtualStickFlightCoordinate.System rollPitchCoordinateSystem = 8;
  if (this->rollpitchcoordinatesystem() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->rollpitchcoordinatesystem(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DJIFRProto.Standard.VirtualStickFlightControlData)
  return target;
}

size_t VirtualStickFlightControlData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DJIFRProto.Standard.VirtualStickFlightControlData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float pitch = 1;
  if (this->pitch() != 0) {
    total_size += 1 + 4;
  }

  // float roll = 2;
  if (this->roll() != 0) {
    total_size += 1 + 4;
  }

  // float yaw = 3;
  if (this->yaw() != 0) {
    total_size += 1 + 4;
  }

  // float verticalThrottle = 4;
  if (this->verticalthrottle() != 0) {
    total_size += 1 + 4;
  }

  // .DJIFRProto.Standard.VirtualStickVerticalControl.Mode verticalControlMode = 5;
  if (this->verticalcontrolmode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->verticalcontrolmode());
  }

  // .DJIFRProto.Standard.VirtualStickRollPitchControl.Mode rollPitchControlMode = 6;
  if (this->rollpitchcontrolmode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->rollpitchcontrolmode());
  }

  // .DJIFRProto.Standard.VirtualStickYawControl.Mode yawControlMode = 7;
  if (this->yawcontrolmode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->yawcontrolmode());
  }

  // .DJIFRProto.Standard.VirtualStickFlightCoordinate.System rollPitchCoordinateSystem = 8;
  if (this->rollpitchcoordinatesystem() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->rollpitchcoordinatesystem());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VirtualStickFlightControlData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DJIFRProto.Standard.VirtualStickFlightControlData)
  GOOGLE_DCHECK_NE(&from, this);
  const VirtualStickFlightControlData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VirtualStickFlightControlData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DJIFRProto.Standard.VirtualStickFlightControlData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DJIFRProto.Standard.VirtualStickFlightControlData)
    MergeFrom(*source);
  }
}

void VirtualStickFlightControlData::MergeFrom(const VirtualStickFlightControlData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DJIFRProto.Standard.VirtualStickFlightControlData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pitch() != 0) {
    set_pitch(from.pitch());
  }
  if (from.roll() != 0) {
    set_roll(from.roll());
  }
  if (from.yaw() != 0) {
    set_yaw(from.yaw());
  }
  if (from.verticalthrottle() != 0) {
    set_verticalthrottle(from.verticalthrottle());
  }
  if (from.verticalcontrolmode() != 0) {
    set_verticalcontrolmode(from.verticalcontrolmode());
  }
  if (from.rollpitchcontrolmode() != 0) {
    set_rollpitchcontrolmode(from.rollpitchcontrolmode());
  }
  if (from.yawcontrolmode() != 0) {
    set_yawcontrolmode(from.yawcontrolmode());
  }
  if (from.rollpitchcoordinatesystem() != 0) {
    set_rollpitchcoordinatesystem(from.rollpitchcoordinatesystem());
  }
}

void VirtualStickFlightControlData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DJIFRProto.Standard.VirtualStickFlightControlData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VirtualStickFlightControlData::CopyFrom(const VirtualStickFlightControlData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DJIFRProto.Standard.VirtualStickFlightControlData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualStickFlightControlData::IsInitialized() const {
  return true;
}

void VirtualStickFlightControlData::Swap(VirtualStickFlightControlData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VirtualStickFlightControlData::InternalSwap(VirtualStickFlightControlData* other) {
  using std::swap;
  swap(pitch_, other->pitch_);
  swap(roll_, other->roll_);
  swap(yaw_, other->yaw_);
  swap(verticalthrottle_, other->verticalthrottle_);
  swap(verticalcontrolmode_, other->verticalcontrolmode_);
  swap(rollpitchcontrolmode_, other->rollpitchcontrolmode_);
  swap(yawcontrolmode_, other->yawcontrolmode_);
  swap(rollpitchcoordinatesystem_, other->rollpitchcoordinatesystem_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VirtualStickFlightControlData::GetMetadata() const {
  protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FlightControllerState::InitAsDefaultInstance() {
  ::DJIFRProto::Standard::_FlightControllerState_default_instance_._instance.get_mutable()->attitude_ = const_cast< ::DJIFRProto::Standard::Attitude*>(
      ::DJIFRProto::Standard::Attitude::internal_default_instance());
  ::DJIFRProto::Standard::_FlightControllerState_default_instance_._instance.get_mutable()->homelocationcoordinate_ = const_cast< ::DJIFRProto::Standard::LocationCoordinate2D*>(
      ::DJIFRProto::Standard::LocationCoordinate2D::internal_default_instance());
  ::DJIFRProto::Standard::_FlightControllerState_default_instance_._instance.get_mutable()->aircraftlocation_ = const_cast< ::DJIFRProto::Standard::LocationCoordinate2D*>(
      ::DJIFRProto::Standard::LocationCoordinate2D::internal_default_instance());
  ::DJIFRProto::Standard::_FlightControllerState_default_instance_._instance.get_mutable()->virtualcontroldata_ = const_cast< ::DJIFRProto::Standard::VirtualStickFlightControlData*>(
      ::DJIFRProto::Standard::VirtualStickFlightControlData::internal_default_instance());
  ::DJIFRProto::Standard::_FlightControllerState_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::DJIFRProto::Standard::Velocity*>(
      ::DJIFRProto::Standard::Velocity::internal_default_instance());
}
void FlightControllerState::clear_attitude() {
  if (GetArenaNoVirtual() == NULL && attitude_ != NULL) {
    delete attitude_;
  }
  attitude_ = NULL;
}
void FlightControllerState::clear_homelocationcoordinate() {
  if (GetArenaNoVirtual() == NULL && homelocationcoordinate_ != NULL) {
    delete homelocationcoordinate_;
  }
  homelocationcoordinate_ = NULL;
}
void FlightControllerState::clear_aircraftlocation() {
  if (GetArenaNoVirtual() == NULL && aircraftlocation_ != NULL) {
    delete aircraftlocation_;
  }
  aircraftlocation_ = NULL;
}
void FlightControllerState::clear_velocity() {
  if (GetArenaNoVirtual() == NULL && velocity_ != NULL) {
    delete velocity_;
  }
  velocity_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlightControllerState::kAttitudeFieldNumber;
const int FlightControllerState::kHomeLocationCoordinateFieldNumber;
const int FlightControllerState::kTakeoffLocationAltitudeFieldNumber;
const int FlightControllerState::kAircraftLocationFieldNumber;
const int FlightControllerState::kAltitudeFieldNumber;
const int FlightControllerState::kFlightModeFieldNumber;
const int FlightControllerState::kGPSSignalLevelFieldNumber;
const int FlightControllerState::kSatelliteCountFieldNumber;
const int FlightControllerState::kRemainingFlightTimeFieldNumber;
const int FlightControllerState::kBatteryPercentageNeededToLandFromCurrentHeightFieldNumber;
const int FlightControllerState::kBatteryPercentageNeededToGoHomeFieldNumber;
const int FlightControllerState::kSmartRTHStateFieldNumber;
const int FlightControllerState::kBehaviorFieldNumber;
const int FlightControllerState::kVirtualControlDataFieldNumber;
const int FlightControllerState::kIsFailsafeEnabledFieldNumber;
const int FlightControllerState::kAreMotorsOnFieldNumber;
const int FlightControllerState::kIsHomeLocationSetFieldNumber;
const int FlightControllerState::kIsLandingConfirmationNeededFieldNumber;
const int FlightControllerState::kHasReachedMaxFlightHeightFieldNumber;
const int FlightControllerState::kHasReachedMaxFlightRadiusFieldNumber;
const int FlightControllerState::kWindWarningFieldNumber;
const int FlightControllerState::kCountOfFlightsFieldNumber;
const int FlightControllerState::kFlightLogIndexFieldNumber;
const int FlightControllerState::kIsFlyingFieldNumber;
const int FlightControllerState::kSmartRTHCountdownFieldNumber;
const int FlightControllerState::kVelocityFieldNumber;
const int FlightControllerState::kIsGPSBeingUsedFieldNumber;
const int FlightControllerState::kFlightTimeInSecondsFieldNumber;
const int FlightControllerState::kCumulativeFlightDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlightControllerState::FlightControllerState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::InitDefaultsFlightControllerState();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DJIFRProto.Standard.FlightControllerState)
}
FlightControllerState::FlightControllerState(const FlightControllerState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_attitude()) {
    attitude_ = new ::DJIFRProto::Standard::Attitude(*from.attitude_);
  } else {
    attitude_ = NULL;
  }
  if (from.has_homelocationcoordinate()) {
    homelocationcoordinate_ = new ::DJIFRProto::Standard::LocationCoordinate2D(*from.homelocationcoordinate_);
  } else {
    homelocationcoordinate_ = NULL;
  }
  if (from.has_aircraftlocation()) {
    aircraftlocation_ = new ::DJIFRProto::Standard::LocationCoordinate2D(*from.aircraftlocation_);
  } else {
    aircraftlocation_ = NULL;
  }
  if (from.has_virtualcontroldata()) {
    virtualcontroldata_ = new ::DJIFRProto::Standard::VirtualStickFlightControlData(*from.virtualcontroldata_);
  } else {
    virtualcontroldata_ = NULL;
  }
  if (from.has_velocity()) {
    velocity_ = new ::DJIFRProto::Standard::Velocity(*from.velocity_);
  } else {
    velocity_ = NULL;
  }
  ::memcpy(&takeofflocationaltitude_, &from.takeofflocationaltitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&cumulativeflightdistance_) -
    reinterpret_cast<char*>(&takeofflocationaltitude_)) + sizeof(cumulativeflightdistance_));
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.FlightControllerState)
}

void FlightControllerState::SharedCtor() {
  ::memset(&attitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cumulativeflightdistance_) -
      reinterpret_cast<char*>(&attitude_)) + sizeof(cumulativeflightdistance_));
  _cached_size_ = 0;
}

FlightControllerState::~FlightControllerState() {
  // @@protoc_insertion_point(destructor:DJIFRProto.Standard.FlightControllerState)
  SharedDtor();
}

void FlightControllerState::SharedDtor() {
  if (this != internal_default_instance()) delete attitude_;
  if (this != internal_default_instance()) delete homelocationcoordinate_;
  if (this != internal_default_instance()) delete aircraftlocation_;
  if (this != internal_default_instance()) delete virtualcontroldata_;
  if (this != internal_default_instance()) delete velocity_;
}

void FlightControllerState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlightControllerState::descriptor() {
  ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FlightControllerState& FlightControllerState::default_instance() {
  ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::InitDefaultsFlightControllerState();
  return *internal_default_instance();
}

FlightControllerState* FlightControllerState::New(::google::protobuf::Arena* arena) const {
  FlightControllerState* n = new FlightControllerState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FlightControllerState::Clear() {
// @@protoc_insertion_point(message_clear_start:DJIFRProto.Standard.FlightControllerState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && attitude_ != NULL) {
    delete attitude_;
  }
  attitude_ = NULL;
  if (GetArenaNoVirtual() == NULL && homelocationcoordinate_ != NULL) {
    delete homelocationcoordinate_;
  }
  homelocationcoordinate_ = NULL;
  if (GetArenaNoVirtual() == NULL && aircraftlocation_ != NULL) {
    delete aircraftlocation_;
  }
  aircraftlocation_ = NULL;
  if (GetArenaNoVirtual() == NULL && virtualcontroldata_ != NULL) {
    delete virtualcontroldata_;
  }
  virtualcontroldata_ = NULL;
  if (GetArenaNoVirtual() == NULL && velocity_ != NULL) {
    delete velocity_;
  }
  velocity_ = NULL;
  ::memset(&takeofflocationaltitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cumulativeflightdistance_) -
      reinterpret_cast<char*>(&takeofflocationaltitude_)) + sizeof(cumulativeflightdistance_));
  _internal_metadata_.Clear();
}

bool FlightControllerState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DJIFRProto.Standard.FlightControllerState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .DJIFRProto.Standard.Attitude attitude = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_attitude()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DJIFRProto.Standard.LocationCoordinate2D homeLocationCoordinate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_homelocationcoordinate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float takeoffLocationAltitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &takeofflocationaltitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DJIFRProto.Standard.LocationCoordinate2D aircraftLocation = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_aircraftlocation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float altitude = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DJIFRProto.Standard.FlightMode flightMode = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_flightmode(static_cast< ::DJIFRProto::Standard::FlightMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DJIFRProto.Standard.GPSSignal.Level GPSSignalLevel = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_gpssignallevel(static_cast< ::DJIFRProto::Standard::GPSSignal_Level >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 satelliteCount = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &satellitecount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 remainingFlightTime = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remainingflighttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 batteryPercentageNeededToLandFromCurrentHeight = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batterypercentageneededtolandfromcurrentheight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 batteryPercentageNeededToGoHome = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batterypercentageneededtogohome_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DJIFRProto.Standard.SmartRTH.State smartRTHState = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_smartrthstate(static_cast< ::DJIFRProto::Standard::SmartRTH_State >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DJIFRProto.Standard.Connection.FailSafeBehavior behavior = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_behavior(static_cast< ::DJIFRProto::Standard::Connection_FailSafeBehavior >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DJIFRProto.Standard.VirtualStickFlightControlData virtualControlData = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_virtualcontroldata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isFailsafeEnabled = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfailsafeenabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool areMotorsOn = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &aremotorson_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isHomeLocationSet = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishomelocationset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isLandingConfirmationNeeded = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islandingconfirmationneeded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool hasReachedMaxFlightHeight = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasreachedmaxflightheight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool hasReachedMaxFlightRadius = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasreachedmaxflightradius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DJIFRProto.Standard.FlightWind.Warning windWarning = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_windwarning(static_cast< ::DJIFRProto::Standard::FlightWind_Warning >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 countOfFlights = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &countofflights_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 flightLogIndex = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flightlogindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isFlying = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isflying_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 smartRTHCountdown = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &smartrthcountdown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DJIFRProto.Standard.Velocity velocity = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isGPSBeingUsed = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isgpsbeingused_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double flightTimeInSeconds = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(225u /* 225 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &flighttimeinseconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double cumulativeFlightDistance = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(233u /* 233 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cumulativeflightdistance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DJIFRProto.Standard.FlightControllerState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DJIFRProto.Standard.FlightControllerState)
  return false;
#undef DO_
}

void FlightControllerState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DJIFRProto.Standard.FlightControllerState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DJIFRProto.Standard.Attitude attitude = 1;
  if (this->has_attitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->attitude_, output);
  }

  // .DJIFRProto.Standard.LocationCoordinate2D homeLocationCoordinate = 2;
  if (this->has_homelocationcoordinate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->homelocationcoordinate_, output);
  }

  // float takeoffLocationAltitude = 3;
  if (this->takeofflocationaltitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->takeofflocationaltitude(), output);
  }

  // .DJIFRProto.Standard.LocationCoordinate2D aircraftLocation = 4;
  if (this->has_aircraftlocation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->aircraftlocation_, output);
  }

  // float altitude = 5;
  if (this->altitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->altitude(), output);
  }

  // .DJIFRProto.Standard.FlightMode flightMode = 6;
  if (this->flightmode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->flightmode(), output);
  }

  // .DJIFRProto.Standard.GPSSignal.Level GPSSignalLevel = 7;
  if (this->gpssignallevel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->gpssignallevel(), output);
  }

  // int32 satelliteCount = 8;
  if (this->satellitecount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->satellitecount(), output);
  }

  // int32 remainingFlightTime = 9;
  if (this->remainingflighttime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->remainingflighttime(), output);
  }

  // int32 batteryPercentageNeededToLandFromCurrentHeight = 10;
  if (this->batterypercentageneededtolandfromcurrentheight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->batterypercentageneededtolandfromcurrentheight(), output);
  }

  // int32 batteryPercentageNeededToGoHome = 11;
  if (this->batterypercentageneededtogohome() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->batterypercentageneededtogohome(), output);
  }

  // .DJIFRProto.Standard.SmartRTH.State smartRTHState = 12;
  if (this->smartrthstate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->smartrthstate(), output);
  }

  // .DJIFRProto.Standard.Connection.FailSafeBehavior behavior = 13;
  if (this->behavior() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->behavior(), output);
  }

  // .DJIFRProto.Standard.VirtualStickFlightControlData virtualControlData = 14;
  if (this->has_virtualcontroldata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->virtualcontroldata_, output);
  }

  // bool isFailsafeEnabled = 15;
  if (this->isfailsafeenabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->isfailsafeenabled(), output);
  }

  // bool areMotorsOn = 16;
  if (this->aremotorson() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->aremotorson(), output);
  }

  // bool isHomeLocationSet = 17;
  if (this->ishomelocationset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->ishomelocationset(), output);
  }

  // bool isLandingConfirmationNeeded = 18;
  if (this->islandingconfirmationneeded() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->islandingconfirmationneeded(), output);
  }

  // bool hasReachedMaxFlightHeight = 19;
  if (this->hasreachedmaxflightheight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->hasreachedmaxflightheight(), output);
  }

  // bool hasReachedMaxFlightRadius = 20;
  if (this->hasreachedmaxflightradius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->hasreachedmaxflightradius(), output);
  }

  // .DJIFRProto.Standard.FlightWind.Warning windWarning = 21;
  if (this->windwarning() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->windwarning(), output);
  }

  // int32 countOfFlights = 22;
  if (this->countofflights() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->countofflights(), output);
  }

  // int32 flightLogIndex = 23;
  if (this->flightlogindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->flightlogindex(), output);
  }

  // bool isFlying = 24;
  if (this->isflying() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->isflying(), output);
  }

  // int32 smartRTHCountdown = 25;
  if (this->smartrthcountdown() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->smartrthcountdown(), output);
  }

  // .DJIFRProto.Standard.Velocity velocity = 26;
  if (this->has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, *this->velocity_, output);
  }

  // bool isGPSBeingUsed = 27;
  if (this->isgpsbeingused() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->isgpsbeingused(), output);
  }

  // double flightTimeInSeconds = 28;
  if (this->flighttimeinseconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->flighttimeinseconds(), output);
  }

  // double cumulativeFlightDistance = 29;
  if (this->cumulativeflightdistance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->cumulativeflightdistance(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DJIFRProto.Standard.FlightControllerState)
}

::google::protobuf::uint8* FlightControllerState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DJIFRProto.Standard.FlightControllerState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DJIFRProto.Standard.Attitude attitude = 1;
  if (this->has_attitude()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->attitude_, deterministic, target);
  }

  // .DJIFRProto.Standard.LocationCoordinate2D homeLocationCoordinate = 2;
  if (this->has_homelocationcoordinate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->homelocationcoordinate_, deterministic, target);
  }

  // float takeoffLocationAltitude = 3;
  if (this->takeofflocationaltitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->takeofflocationaltitude(), target);
  }

  // .DJIFRProto.Standard.LocationCoordinate2D aircraftLocation = 4;
  if (this->has_aircraftlocation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->aircraftlocation_, deterministic, target);
  }

  // float altitude = 5;
  if (this->altitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->altitude(), target);
  }

  // .DJIFRProto.Standard.FlightMode flightMode = 6;
  if (this->flightmode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->flightmode(), target);
  }

  // .DJIFRProto.Standard.GPSSignal.Level GPSSignalLevel = 7;
  if (this->gpssignallevel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->gpssignallevel(), target);
  }

  // int32 satelliteCount = 8;
  if (this->satellitecount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->satellitecount(), target);
  }

  // int32 remainingFlightTime = 9;
  if (this->remainingflighttime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->remainingflighttime(), target);
  }

  // int32 batteryPercentageNeededToLandFromCurrentHeight = 10;
  if (this->batterypercentageneededtolandfromcurrentheight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->batterypercentageneededtolandfromcurrentheight(), target);
  }

  // int32 batteryPercentageNeededToGoHome = 11;
  if (this->batterypercentageneededtogohome() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->batterypercentageneededtogohome(), target);
  }

  // .DJIFRProto.Standard.SmartRTH.State smartRTHState = 12;
  if (this->smartrthstate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->smartrthstate(), target);
  }

  // .DJIFRProto.Standard.Connection.FailSafeBehavior behavior = 13;
  if (this->behavior() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->behavior(), target);
  }

  // .DJIFRProto.Standard.VirtualStickFlightControlData virtualControlData = 14;
  if (this->has_virtualcontroldata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, *this->virtualcontroldata_, deterministic, target);
  }

  // bool isFailsafeEnabled = 15;
  if (this->isfailsafeenabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->isfailsafeenabled(), target);
  }

  // bool areMotorsOn = 16;
  if (this->aremotorson() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->aremotorson(), target);
  }

  // bool isHomeLocationSet = 17;
  if (this->ishomelocationset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->ishomelocationset(), target);
  }

  // bool isLandingConfirmationNeeded = 18;
  if (this->islandingconfirmationneeded() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->islandingconfirmationneeded(), target);
  }

  // bool hasReachedMaxFlightHeight = 19;
  if (this->hasreachedmaxflightheight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->hasreachedmaxflightheight(), target);
  }

  // bool hasReachedMaxFlightRadius = 20;
  if (this->hasreachedmaxflightradius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->hasreachedmaxflightradius(), target);
  }

  // .DJIFRProto.Standard.FlightWind.Warning windWarning = 21;
  if (this->windwarning() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->windwarning(), target);
  }

  // int32 countOfFlights = 22;
  if (this->countofflights() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->countofflights(), target);
  }

  // int32 flightLogIndex = 23;
  if (this->flightlogindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->flightlogindex(), target);
  }

  // bool isFlying = 24;
  if (this->isflying() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->isflying(), target);
  }

  // int32 smartRTHCountdown = 25;
  if (this->smartrthcountdown() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->smartrthcountdown(), target);
  }

  // .DJIFRProto.Standard.Velocity velocity = 26;
  if (this->has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        26, *this->velocity_, deterministic, target);
  }

  // bool isGPSBeingUsed = 27;
  if (this->isgpsbeingused() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->isgpsbeingused(), target);
  }

  // double flightTimeInSeconds = 28;
  if (this->flighttimeinseconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->flighttimeinseconds(), target);
  }

  // double cumulativeFlightDistance = 29;
  if (this->cumulativeflightdistance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->cumulativeflightdistance(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DJIFRProto.Standard.FlightControllerState)
  return target;
}

size_t FlightControllerState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DJIFRProto.Standard.FlightControllerState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .DJIFRProto.Standard.Attitude attitude = 1;
  if (this->has_attitude()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->attitude_);
  }

  // .DJIFRProto.Standard.LocationCoordinate2D homeLocationCoordinate = 2;
  if (this->has_homelocationcoordinate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->homelocationcoordinate_);
  }

  // .DJIFRProto.Standard.LocationCoordinate2D aircraftLocation = 4;
  if (this->has_aircraftlocation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->aircraftlocation_);
  }

  // .DJIFRProto.Standard.VirtualStickFlightControlData virtualControlData = 14;
  if (this->has_virtualcontroldata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->virtualcontroldata_);
  }

  // .DJIFRProto.Standard.Velocity velocity = 26;
  if (this->has_velocity()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->velocity_);
  }

  // float takeoffLocationAltitude = 3;
  if (this->takeofflocationaltitude() != 0) {
    total_size += 1 + 4;
  }

  // float altitude = 5;
  if (this->altitude() != 0) {
    total_size += 1 + 4;
  }

  // .DJIFRProto.Standard.FlightMode flightMode = 6;
  if (this->flightmode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->flightmode());
  }

  // .DJIFRProto.Standard.GPSSignal.Level GPSSignalLevel = 7;
  if (this->gpssignallevel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gpssignallevel());
  }

  // int32 satelliteCount = 8;
  if (this->satellitecount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->satellitecount());
  }

  // int32 remainingFlightTime = 9;
  if (this->remainingflighttime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->remainingflighttime());
  }

  // int32 batteryPercentageNeededToLandFromCurrentHeight = 10;
  if (this->batterypercentageneededtolandfromcurrentheight() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->batterypercentageneededtolandfromcurrentheight());
  }

  // int32 batteryPercentageNeededToGoHome = 11;
  if (this->batterypercentageneededtogohome() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->batterypercentageneededtogohome());
  }

  // .DJIFRProto.Standard.SmartRTH.State smartRTHState = 12;
  if (this->smartrthstate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->smartrthstate());
  }

  // .DJIFRProto.Standard.Connection.FailSafeBehavior behavior = 13;
  if (this->behavior() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->behavior());
  }

  // bool isFailsafeEnabled = 15;
  if (this->isfailsafeenabled() != 0) {
    total_size += 1 + 1;
  }

  // bool areMotorsOn = 16;
  if (this->aremotorson() != 0) {
    total_size += 2 + 1;
  }

  // bool isHomeLocationSet = 17;
  if (this->ishomelocationset() != 0) {
    total_size += 2 + 1;
  }

  // bool isLandingConfirmationNeeded = 18;
  if (this->islandingconfirmationneeded() != 0) {
    total_size += 2 + 1;
  }

  // .DJIFRProto.Standard.FlightWind.Warning windWarning = 21;
  if (this->windwarning() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->windwarning());
  }

  // int32 countOfFlights = 22;
  if (this->countofflights() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->countofflights());
  }

  // bool hasReachedMaxFlightHeight = 19;
  if (this->hasreachedmaxflightheight() != 0) {
    total_size += 2 + 1;
  }

  // bool hasReachedMaxFlightRadius = 20;
  if (this->hasreachedmaxflightradius() != 0) {
    total_size += 2 + 1;
  }

  // bool isFlying = 24;
  if (this->isflying() != 0) {
    total_size += 2 + 1;
  }

  // bool isGPSBeingUsed = 27;
  if (this->isgpsbeingused() != 0) {
    total_size += 2 + 1;
  }

  // int32 flightLogIndex = 23;
  if (this->flightlogindex() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->flightlogindex());
  }

  // int32 smartRTHCountdown = 25;
  if (this->smartrthcountdown() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->smartrthcountdown());
  }

  // double flightTimeInSeconds = 28;
  if (this->flighttimeinseconds() != 0) {
    total_size += 2 + 8;
  }

  // double cumulativeFlightDistance = 29;
  if (this->cumulativeflightdistance() != 0) {
    total_size += 2 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlightControllerState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DJIFRProto.Standard.FlightControllerState)
  GOOGLE_DCHECK_NE(&from, this);
  const FlightControllerState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FlightControllerState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DJIFRProto.Standard.FlightControllerState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DJIFRProto.Standard.FlightControllerState)
    MergeFrom(*source);
  }
}

void FlightControllerState::MergeFrom(const FlightControllerState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DJIFRProto.Standard.FlightControllerState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_attitude()) {
    mutable_attitude()->::DJIFRProto::Standard::Attitude::MergeFrom(from.attitude());
  }
  if (from.has_homelocationcoordinate()) {
    mutable_homelocationcoordinate()->::DJIFRProto::Standard::LocationCoordinate2D::MergeFrom(from.homelocationcoordinate());
  }
  if (from.has_aircraftlocation()) {
    mutable_aircraftlocation()->::DJIFRProto::Standard::LocationCoordinate2D::MergeFrom(from.aircraftlocation());
  }
  if (from.has_virtualcontroldata()) {
    mutable_virtualcontroldata()->::DJIFRProto::Standard::VirtualStickFlightControlData::MergeFrom(from.virtualcontroldata());
  }
  if (from.has_velocity()) {
    mutable_velocity()->::DJIFRProto::Standard::Velocity::MergeFrom(from.velocity());
  }
  if (from.takeofflocationaltitude() != 0) {
    set_takeofflocationaltitude(from.takeofflocationaltitude());
  }
  if (from.altitude() != 0) {
    set_altitude(from.altitude());
  }
  if (from.flightmode() != 0) {
    set_flightmode(from.flightmode());
  }
  if (from.gpssignallevel() != 0) {
    set_gpssignallevel(from.gpssignallevel());
  }
  if (from.satellitecount() != 0) {
    set_satellitecount(from.satellitecount());
  }
  if (from.remainingflighttime() != 0) {
    set_remainingflighttime(from.remainingflighttime());
  }
  if (from.batterypercentageneededtolandfromcurrentheight() != 0) {
    set_batterypercentageneededtolandfromcurrentheight(from.batterypercentageneededtolandfromcurrentheight());
  }
  if (from.batterypercentageneededtogohome() != 0) {
    set_batterypercentageneededtogohome(from.batterypercentageneededtogohome());
  }
  if (from.smartrthstate() != 0) {
    set_smartrthstate(from.smartrthstate());
  }
  if (from.behavior() != 0) {
    set_behavior(from.behavior());
  }
  if (from.isfailsafeenabled() != 0) {
    set_isfailsafeenabled(from.isfailsafeenabled());
  }
  if (from.aremotorson() != 0) {
    set_aremotorson(from.aremotorson());
  }
  if (from.ishomelocationset() != 0) {
    set_ishomelocationset(from.ishomelocationset());
  }
  if (from.islandingconfirmationneeded() != 0) {
    set_islandingconfirmationneeded(from.islandingconfirmationneeded());
  }
  if (from.windwarning() != 0) {
    set_windwarning(from.windwarning());
  }
  if (from.countofflights() != 0) {
    set_countofflights(from.countofflights());
  }
  if (from.hasreachedmaxflightheight() != 0) {
    set_hasreachedmaxflightheight(from.hasreachedmaxflightheight());
  }
  if (from.hasreachedmaxflightradius() != 0) {
    set_hasreachedmaxflightradius(from.hasreachedmaxflightradius());
  }
  if (from.isflying() != 0) {
    set_isflying(from.isflying());
  }
  if (from.isgpsbeingused() != 0) {
    set_isgpsbeingused(from.isgpsbeingused());
  }
  if (from.flightlogindex() != 0) {
    set_flightlogindex(from.flightlogindex());
  }
  if (from.smartrthcountdown() != 0) {
    set_smartrthcountdown(from.smartrthcountdown());
  }
  if (from.flighttimeinseconds() != 0) {
    set_flighttimeinseconds(from.flighttimeinseconds());
  }
  if (from.cumulativeflightdistance() != 0) {
    set_cumulativeflightdistance(from.cumulativeflightdistance());
  }
}

void FlightControllerState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DJIFRProto.Standard.FlightControllerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlightControllerState::CopyFrom(const FlightControllerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DJIFRProto.Standard.FlightControllerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlightControllerState::IsInitialized() const {
  return true;
}

void FlightControllerState::Swap(FlightControllerState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlightControllerState::InternalSwap(FlightControllerState* other) {
  using std::swap;
  swap(attitude_, other->attitude_);
  swap(homelocationcoordinate_, other->homelocationcoordinate_);
  swap(aircraftlocation_, other->aircraftlocation_);
  swap(virtualcontroldata_, other->virtualcontroldata_);
  swap(velocity_, other->velocity_);
  swap(takeofflocationaltitude_, other->takeofflocationaltitude_);
  swap(altitude_, other->altitude_);
  swap(flightmode_, other->flightmode_);
  swap(gpssignallevel_, other->gpssignallevel_);
  swap(satellitecount_, other->satellitecount_);
  swap(remainingflighttime_, other->remainingflighttime_);
  swap(batterypercentageneededtolandfromcurrentheight_, other->batterypercentageneededtolandfromcurrentheight_);
  swap(batterypercentageneededtogohome_, other->batterypercentageneededtogohome_);
  swap(smartrthstate_, other->smartrthstate_);
  swap(behavior_, other->behavior_);
  swap(isfailsafeenabled_, other->isfailsafeenabled_);
  swap(aremotorson_, other->aremotorson_);
  swap(ishomelocationset_, other->ishomelocationset_);
  swap(islandingconfirmationneeded_, other->islandingconfirmationneeded_);
  swap(windwarning_, other->windwarning_);
  swap(countofflights_, other->countofflights_);
  swap(hasreachedmaxflightheight_, other->hasreachedmaxflightheight_);
  swap(hasreachedmaxflightradius_, other->hasreachedmaxflightradius_);
  swap(isflying_, other->isflying_);
  swap(isgpsbeingused_, other->isgpsbeingused_);
  swap(flightlogindex_, other->flightlogindex_);
  swap(smartrthcountdown_, other->smartrthcountdown_);
  swap(flighttimeinseconds_, other->flighttimeinseconds_);
  swap(cumulativeflightdistance_, other->cumulativeflightdistance_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FlightControllerState::GetMetadata() const {
  protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Standard
}  // namespace DJIFRProto

// @@protoc_insertion_point(global_scope)
