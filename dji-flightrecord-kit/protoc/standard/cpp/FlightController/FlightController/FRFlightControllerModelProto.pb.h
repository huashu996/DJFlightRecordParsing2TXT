// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FlightController/FRFlightControllerModelProto.proto

#ifndef PROTOBUF_FlightController_2fFRFlightControllerModelProto_2eproto__INCLUDED
#define PROTOBUF_FlightController_2fFRFlightControllerModelProto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Common/FRCommonModelProto.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_FlightController_2fFRFlightControllerModelProto_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsFlightWindImpl();
void InitDefaultsFlightWind();
void InitDefaultsConnectionImpl();
void InitDefaultsConnection();
void InitDefaultsSmartRTHImpl();
void InitDefaultsSmartRTH();
void InitDefaultsVirtualStickVerticalControlImpl();
void InitDefaultsVirtualStickVerticalControl();
void InitDefaultsVirtualStickRollPitchControlImpl();
void InitDefaultsVirtualStickRollPitchControl();
void InitDefaultsVirtualStickYawControlImpl();
void InitDefaultsVirtualStickYawControl();
void InitDefaultsVirtualStickFlightCoordinateImpl();
void InitDefaultsVirtualStickFlightCoordinate();
void InitDefaultsVirtualStickFlightControlDataImpl();
void InitDefaultsVirtualStickFlightControlData();
void InitDefaultsFlightControllerStateImpl();
void InitDefaultsFlightControllerState();
inline void InitDefaults() {
  InitDefaultsFlightWind();
  InitDefaultsConnection();
  InitDefaultsSmartRTH();
  InitDefaultsVirtualStickVerticalControl();
  InitDefaultsVirtualStickRollPitchControl();
  InitDefaultsVirtualStickYawControl();
  InitDefaultsVirtualStickFlightCoordinate();
  InitDefaultsVirtualStickFlightControlData();
  InitDefaultsFlightControllerState();
}
}  // namespace protobuf_FlightController_2fFRFlightControllerModelProto_2eproto
namespace DJIFRProto {
namespace Standard {
class Connection;
class ConnectionDefaultTypeInternal;
extern ConnectionDefaultTypeInternal _Connection_default_instance_;
class FlightControllerState;
class FlightControllerStateDefaultTypeInternal;
extern FlightControllerStateDefaultTypeInternal _FlightControllerState_default_instance_;
class FlightWind;
class FlightWindDefaultTypeInternal;
extern FlightWindDefaultTypeInternal _FlightWind_default_instance_;
class SmartRTH;
class SmartRTHDefaultTypeInternal;
extern SmartRTHDefaultTypeInternal _SmartRTH_default_instance_;
class VirtualStickFlightControlData;
class VirtualStickFlightControlDataDefaultTypeInternal;
extern VirtualStickFlightControlDataDefaultTypeInternal _VirtualStickFlightControlData_default_instance_;
class VirtualStickFlightCoordinate;
class VirtualStickFlightCoordinateDefaultTypeInternal;
extern VirtualStickFlightCoordinateDefaultTypeInternal _VirtualStickFlightCoordinate_default_instance_;
class VirtualStickRollPitchControl;
class VirtualStickRollPitchControlDefaultTypeInternal;
extern VirtualStickRollPitchControlDefaultTypeInternal _VirtualStickRollPitchControl_default_instance_;
class VirtualStickVerticalControl;
class VirtualStickVerticalControlDefaultTypeInternal;
extern VirtualStickVerticalControlDefaultTypeInternal _VirtualStickVerticalControl_default_instance_;
class VirtualStickYawControl;
class VirtualStickYawControlDefaultTypeInternal;
extern VirtualStickYawControlDefaultTypeInternal _VirtualStickYawControl_default_instance_;
}  // namespace Standard
}  // namespace DJIFRProto
namespace DJIFRProto {
namespace Standard {

enum FlightWind_Warning {
  FlightWind_Warning_Level0 = 0,
  FlightWind_Warning_Level1 = 1,
  FlightWind_Warning_Level2 = 2,
  FlightWind_Warning_Unknown = 3,
  FlightWind_Warning_FlightWind_Warning_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FlightWind_Warning_FlightWind_Warning_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FlightWind_Warning_IsValid(int value);
const FlightWind_Warning FlightWind_Warning_Warning_MIN = FlightWind_Warning_Level0;
const FlightWind_Warning FlightWind_Warning_Warning_MAX = FlightWind_Warning_Unknown;
const int FlightWind_Warning_Warning_ARRAYSIZE = FlightWind_Warning_Warning_MAX + 1;

const ::google::protobuf::EnumDescriptor* FlightWind_Warning_descriptor();
inline const ::std::string& FlightWind_Warning_Name(FlightWind_Warning value) {
  return ::google::protobuf::internal::NameOfEnum(
    FlightWind_Warning_descriptor(), value);
}
inline bool FlightWind_Warning_Parse(
    const ::std::string& name, FlightWind_Warning* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FlightWind_Warning>(
    FlightWind_Warning_descriptor(), name, value);
}
enum Connection_FailSafeBehavior {
  Connection_FailSafeBehavior_Hover = 0,
  Connection_FailSafeBehavior_Landing = 1,
  Connection_FailSafeBehavior_GoHome = 2,
  Connection_FailSafeBehavior_Unknown = 3,
  Connection_FailSafeBehavior_Connection_FailSafeBehavior_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Connection_FailSafeBehavior_Connection_FailSafeBehavior_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Connection_FailSafeBehavior_IsValid(int value);
const Connection_FailSafeBehavior Connection_FailSafeBehavior_FailSafeBehavior_MIN = Connection_FailSafeBehavior_Hover;
const Connection_FailSafeBehavior Connection_FailSafeBehavior_FailSafeBehavior_MAX = Connection_FailSafeBehavior_Unknown;
const int Connection_FailSafeBehavior_FailSafeBehavior_ARRAYSIZE = Connection_FailSafeBehavior_FailSafeBehavior_MAX + 1;

const ::google::protobuf::EnumDescriptor* Connection_FailSafeBehavior_descriptor();
inline const ::std::string& Connection_FailSafeBehavior_Name(Connection_FailSafeBehavior value) {
  return ::google::protobuf::internal::NameOfEnum(
    Connection_FailSafeBehavior_descriptor(), value);
}
inline bool Connection_FailSafeBehavior_Parse(
    const ::std::string& name, Connection_FailSafeBehavior* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Connection_FailSafeBehavior>(
    Connection_FailSafeBehavior_descriptor(), name, value);
}
enum SmartRTH_State {
  SmartRTH_State_Idle = 0,
  SmartRTH_State_CountingDown = 1,
  SmartRTH_State_Executed = 2,
  SmartRTH_State_Cancelled = 3,
  SmartRTH_State_Unknown = 4,
  SmartRTH_State_SmartRTH_State_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SmartRTH_State_SmartRTH_State_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SmartRTH_State_IsValid(int value);
const SmartRTH_State SmartRTH_State_State_MIN = SmartRTH_State_Idle;
const SmartRTH_State SmartRTH_State_State_MAX = SmartRTH_State_Unknown;
const int SmartRTH_State_State_ARRAYSIZE = SmartRTH_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* SmartRTH_State_descriptor();
inline const ::std::string& SmartRTH_State_Name(SmartRTH_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    SmartRTH_State_descriptor(), value);
}
inline bool SmartRTH_State_Parse(
    const ::std::string& name, SmartRTH_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SmartRTH_State>(
    SmartRTH_State_descriptor(), name, value);
}
enum VirtualStickVerticalControl_Mode {
  VirtualStickVerticalControl_Mode_Velocity = 0,
  VirtualStickVerticalControl_Mode_Position = 1,
  VirtualStickVerticalControl_Mode_Unknown = 2,
  VirtualStickVerticalControl_Mode_VirtualStickVerticalControl_Mode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VirtualStickVerticalControl_Mode_VirtualStickVerticalControl_Mode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool VirtualStickVerticalControl_Mode_IsValid(int value);
const VirtualStickVerticalControl_Mode VirtualStickVerticalControl_Mode_Mode_MIN = VirtualStickVerticalControl_Mode_Velocity;
const VirtualStickVerticalControl_Mode VirtualStickVerticalControl_Mode_Mode_MAX = VirtualStickVerticalControl_Mode_Unknown;
const int VirtualStickVerticalControl_Mode_Mode_ARRAYSIZE = VirtualStickVerticalControl_Mode_Mode_MAX + 1;

const ::google::protobuf::EnumDescriptor* VirtualStickVerticalControl_Mode_descriptor();
inline const ::std::string& VirtualStickVerticalControl_Mode_Name(VirtualStickVerticalControl_Mode value) {
  return ::google::protobuf::internal::NameOfEnum(
    VirtualStickVerticalControl_Mode_descriptor(), value);
}
inline bool VirtualStickVerticalControl_Mode_Parse(
    const ::std::string& name, VirtualStickVerticalControl_Mode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VirtualStickVerticalControl_Mode>(
    VirtualStickVerticalControl_Mode_descriptor(), name, value);
}
enum VirtualStickRollPitchControl_Mode {
  VirtualStickRollPitchControl_Mode_Angle = 0,
  VirtualStickRollPitchControl_Mode_Velocity = 1,
  VirtualStickRollPitchControl_Mode_Unknown = 2,
  VirtualStickRollPitchControl_Mode_VirtualStickRollPitchControl_Mode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VirtualStickRollPitchControl_Mode_VirtualStickRollPitchControl_Mode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool VirtualStickRollPitchControl_Mode_IsValid(int value);
const VirtualStickRollPitchControl_Mode VirtualStickRollPitchControl_Mode_Mode_MIN = VirtualStickRollPitchControl_Mode_Angle;
const VirtualStickRollPitchControl_Mode VirtualStickRollPitchControl_Mode_Mode_MAX = VirtualStickRollPitchControl_Mode_Unknown;
const int VirtualStickRollPitchControl_Mode_Mode_ARRAYSIZE = VirtualStickRollPitchControl_Mode_Mode_MAX + 1;

const ::google::protobuf::EnumDescriptor* VirtualStickRollPitchControl_Mode_descriptor();
inline const ::std::string& VirtualStickRollPitchControl_Mode_Name(VirtualStickRollPitchControl_Mode value) {
  return ::google::protobuf::internal::NameOfEnum(
    VirtualStickRollPitchControl_Mode_descriptor(), value);
}
inline bool VirtualStickRollPitchControl_Mode_Parse(
    const ::std::string& name, VirtualStickRollPitchControl_Mode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VirtualStickRollPitchControl_Mode>(
    VirtualStickRollPitchControl_Mode_descriptor(), name, value);
}
enum VirtualStickYawControl_Mode {
  VirtualStickYawControl_Mode_Angle = 0,
  VirtualStickYawControl_Mode_Velocity = 1,
  VirtualStickYawControl_Mode_Unknown = 2,
  VirtualStickYawControl_Mode_VirtualStickYawControl_Mode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VirtualStickYawControl_Mode_VirtualStickYawControl_Mode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool VirtualStickYawControl_Mode_IsValid(int value);
const VirtualStickYawControl_Mode VirtualStickYawControl_Mode_Mode_MIN = VirtualStickYawControl_Mode_Angle;
const VirtualStickYawControl_Mode VirtualStickYawControl_Mode_Mode_MAX = VirtualStickYawControl_Mode_Unknown;
const int VirtualStickYawControl_Mode_Mode_ARRAYSIZE = VirtualStickYawControl_Mode_Mode_MAX + 1;

const ::google::protobuf::EnumDescriptor* VirtualStickYawControl_Mode_descriptor();
inline const ::std::string& VirtualStickYawControl_Mode_Name(VirtualStickYawControl_Mode value) {
  return ::google::protobuf::internal::NameOfEnum(
    VirtualStickYawControl_Mode_descriptor(), value);
}
inline bool VirtualStickYawControl_Mode_Parse(
    const ::std::string& name, VirtualStickYawControl_Mode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VirtualStickYawControl_Mode>(
    VirtualStickYawControl_Mode_descriptor(), name, value);
}
enum VirtualStickFlightCoordinate_System {
  VirtualStickFlightCoordinate_System_Ground = 0,
  VirtualStickFlightCoordinate_System_Body = 1,
  VirtualStickFlightCoordinate_System_Unknown = 2,
  VirtualStickFlightCoordinate_System_VirtualStickFlightCoordinate_System_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VirtualStickFlightCoordinate_System_VirtualStickFlightCoordinate_System_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool VirtualStickFlightCoordinate_System_IsValid(int value);
const VirtualStickFlightCoordinate_System VirtualStickFlightCoordinate_System_System_MIN = VirtualStickFlightCoordinate_System_Ground;
const VirtualStickFlightCoordinate_System VirtualStickFlightCoordinate_System_System_MAX = VirtualStickFlightCoordinate_System_Unknown;
const int VirtualStickFlightCoordinate_System_System_ARRAYSIZE = VirtualStickFlightCoordinate_System_System_MAX + 1;

const ::google::protobuf::EnumDescriptor* VirtualStickFlightCoordinate_System_descriptor();
inline const ::std::string& VirtualStickFlightCoordinate_System_Name(VirtualStickFlightCoordinate_System value) {
  return ::google::protobuf::internal::NameOfEnum(
    VirtualStickFlightCoordinate_System_descriptor(), value);
}
inline bool VirtualStickFlightCoordinate_System_Parse(
    const ::std::string& name, VirtualStickFlightCoordinate_System* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VirtualStickFlightCoordinate_System>(
    VirtualStickFlightCoordinate_System_descriptor(), name, value);
}
enum FlightMode {
  Manual = 0,
  Atti = 1,
  AttiCourseLock = 2,
  GPSAtti = 6,
  GPSCourseLock = 7,
  GPSHomeLock = 8,
  GPSHotPoint = 9,
  AssistedTakeoff = 10,
  AutoTakeoff = 11,
  AutoLanding = 12,
  GPSWaypoint = 14,
  GoHome = 15,
  Joystick = 17,
  GPSAttiWristband = 18,
  Draw = 24,
  GPSFollowMe = 25,
  ActiveTrack = 26,
  TapFly = 27,
  GPSSport = 31,
  GPSNovice = 32,
  ConfirmLanding = 33,
  TerrainFollow = 35,
  Tripod = 38,
  ActiveTrackSpotlight = 39,
  MotorsJustStarted = 41,
  Unknown = 255,
  FlightMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FlightMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FlightMode_IsValid(int value);
const FlightMode FlightMode_MIN = Manual;
const FlightMode FlightMode_MAX = Unknown;
const int FlightMode_ARRAYSIZE = FlightMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* FlightMode_descriptor();
inline const ::std::string& FlightMode_Name(FlightMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    FlightMode_descriptor(), value);
}
inline bool FlightMode_Parse(
    const ::std::string& name, FlightMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FlightMode>(
    FlightMode_descriptor(), name, value);
}
// ===================================================================

class FlightWind : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.FlightWind) */ {
 public:
  FlightWind();
  virtual ~FlightWind();

  FlightWind(const FlightWind& from);

  inline FlightWind& operator=(const FlightWind& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FlightWind(FlightWind&& from) noexcept
    : FlightWind() {
    *this = ::std::move(from);
  }

  inline FlightWind& operator=(FlightWind&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FlightWind& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlightWind* internal_default_instance() {
    return reinterpret_cast<const FlightWind*>(
               &_FlightWind_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(FlightWind* other);
  friend void swap(FlightWind& a, FlightWind& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FlightWind* New() const PROTOBUF_FINAL { return New(NULL); }

  FlightWind* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FlightWind& from);
  void MergeFrom(const FlightWind& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FlightWind* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef FlightWind_Warning Warning;
  static const Warning Level0 =
    FlightWind_Warning_Level0;
  static const Warning Level1 =
    FlightWind_Warning_Level1;
  static const Warning Level2 =
    FlightWind_Warning_Level2;
  static const Warning Unknown =
    FlightWind_Warning_Unknown;
  static inline bool Warning_IsValid(int value) {
    return FlightWind_Warning_IsValid(value);
  }
  static const Warning Warning_MIN =
    FlightWind_Warning_Warning_MIN;
  static const Warning Warning_MAX =
    FlightWind_Warning_Warning_MAX;
  static const int Warning_ARRAYSIZE =
    FlightWind_Warning_Warning_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Warning_descriptor() {
    return FlightWind_Warning_descriptor();
  }
  static inline const ::std::string& Warning_Name(Warning value) {
    return FlightWind_Warning_Name(value);
  }
  static inline bool Warning_Parse(const ::std::string& name,
      Warning* value) {
    return FlightWind_Warning_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.FlightWind)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::TableStruct;
  friend void ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::InitDefaultsFlightWindImpl();
};
// -------------------------------------------------------------------

class Connection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.Connection) */ {
 public:
  Connection();
  virtual ~Connection();

  Connection(const Connection& from);

  inline Connection& operator=(const Connection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Connection(Connection&& from) noexcept
    : Connection() {
    *this = ::std::move(from);
  }

  inline Connection& operator=(Connection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Connection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Connection* internal_default_instance() {
    return reinterpret_cast<const Connection*>(
               &_Connection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Connection* other);
  friend void swap(Connection& a, Connection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Connection* New() const PROTOBUF_FINAL { return New(NULL); }

  Connection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Connection& from);
  void MergeFrom(const Connection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Connection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Connection_FailSafeBehavior FailSafeBehavior;
  static const FailSafeBehavior Hover =
    Connection_FailSafeBehavior_Hover;
  static const FailSafeBehavior Landing =
    Connection_FailSafeBehavior_Landing;
  static const FailSafeBehavior GoHome =
    Connection_FailSafeBehavior_GoHome;
  static const FailSafeBehavior Unknown =
    Connection_FailSafeBehavior_Unknown;
  static inline bool FailSafeBehavior_IsValid(int value) {
    return Connection_FailSafeBehavior_IsValid(value);
  }
  static const FailSafeBehavior FailSafeBehavior_MIN =
    Connection_FailSafeBehavior_FailSafeBehavior_MIN;
  static const FailSafeBehavior FailSafeBehavior_MAX =
    Connection_FailSafeBehavior_FailSafeBehavior_MAX;
  static const int FailSafeBehavior_ARRAYSIZE =
    Connection_FailSafeBehavior_FailSafeBehavior_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FailSafeBehavior_descriptor() {
    return Connection_FailSafeBehavior_descriptor();
  }
  static inline const ::std::string& FailSafeBehavior_Name(FailSafeBehavior value) {
    return Connection_FailSafeBehavior_Name(value);
  }
  static inline bool FailSafeBehavior_Parse(const ::std::string& name,
      FailSafeBehavior* value) {
    return Connection_FailSafeBehavior_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.Connection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::TableStruct;
  friend void ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::InitDefaultsConnectionImpl();
};
// -------------------------------------------------------------------

class SmartRTH : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.SmartRTH) */ {
 public:
  SmartRTH();
  virtual ~SmartRTH();

  SmartRTH(const SmartRTH& from);

  inline SmartRTH& operator=(const SmartRTH& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SmartRTH(SmartRTH&& from) noexcept
    : SmartRTH() {
    *this = ::std::move(from);
  }

  inline SmartRTH& operator=(SmartRTH&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SmartRTH& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SmartRTH* internal_default_instance() {
    return reinterpret_cast<const SmartRTH*>(
               &_SmartRTH_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(SmartRTH* other);
  friend void swap(SmartRTH& a, SmartRTH& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SmartRTH* New() const PROTOBUF_FINAL { return New(NULL); }

  SmartRTH* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SmartRTH& from);
  void MergeFrom(const SmartRTH& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SmartRTH* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SmartRTH_State State;
  static const State Idle =
    SmartRTH_State_Idle;
  static const State CountingDown =
    SmartRTH_State_CountingDown;
  static const State Executed =
    SmartRTH_State_Executed;
  static const State Cancelled =
    SmartRTH_State_Cancelled;
  static const State Unknown =
    SmartRTH_State_Unknown;
  static inline bool State_IsValid(int value) {
    return SmartRTH_State_IsValid(value);
  }
  static const State State_MIN =
    SmartRTH_State_State_MIN;
  static const State State_MAX =
    SmartRTH_State_State_MAX;
  static const int State_ARRAYSIZE =
    SmartRTH_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return SmartRTH_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return SmartRTH_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return SmartRTH_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.SmartRTH)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::TableStruct;
  friend void ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::InitDefaultsSmartRTHImpl();
};
// -------------------------------------------------------------------

class VirtualStickVerticalControl : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.VirtualStickVerticalControl) */ {
 public:
  VirtualStickVerticalControl();
  virtual ~VirtualStickVerticalControl();

  VirtualStickVerticalControl(const VirtualStickVerticalControl& from);

  inline VirtualStickVerticalControl& operator=(const VirtualStickVerticalControl& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VirtualStickVerticalControl(VirtualStickVerticalControl&& from) noexcept
    : VirtualStickVerticalControl() {
    *this = ::std::move(from);
  }

  inline VirtualStickVerticalControl& operator=(VirtualStickVerticalControl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VirtualStickVerticalControl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VirtualStickVerticalControl* internal_default_instance() {
    return reinterpret_cast<const VirtualStickVerticalControl*>(
               &_VirtualStickVerticalControl_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(VirtualStickVerticalControl* other);
  friend void swap(VirtualStickVerticalControl& a, VirtualStickVerticalControl& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VirtualStickVerticalControl* New() const PROTOBUF_FINAL { return New(NULL); }

  VirtualStickVerticalControl* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VirtualStickVerticalControl& from);
  void MergeFrom(const VirtualStickVerticalControl& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VirtualStickVerticalControl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef VirtualStickVerticalControl_Mode Mode;
  static const Mode Velocity =
    VirtualStickVerticalControl_Mode_Velocity;
  static const Mode Position =
    VirtualStickVerticalControl_Mode_Position;
  static const Mode Unknown =
    VirtualStickVerticalControl_Mode_Unknown;
  static inline bool Mode_IsValid(int value) {
    return VirtualStickVerticalControl_Mode_IsValid(value);
  }
  static const Mode Mode_MIN =
    VirtualStickVerticalControl_Mode_Mode_MIN;
  static const Mode Mode_MAX =
    VirtualStickVerticalControl_Mode_Mode_MAX;
  static const int Mode_ARRAYSIZE =
    VirtualStickVerticalControl_Mode_Mode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mode_descriptor() {
    return VirtualStickVerticalControl_Mode_descriptor();
  }
  static inline const ::std::string& Mode_Name(Mode value) {
    return VirtualStickVerticalControl_Mode_Name(value);
  }
  static inline bool Mode_Parse(const ::std::string& name,
      Mode* value) {
    return VirtualStickVerticalControl_Mode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.VirtualStickVerticalControl)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::TableStruct;
  friend void ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::InitDefaultsVirtualStickVerticalControlImpl();
};
// -------------------------------------------------------------------

class VirtualStickRollPitchControl : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.VirtualStickRollPitchControl) */ {
 public:
  VirtualStickRollPitchControl();
  virtual ~VirtualStickRollPitchControl();

  VirtualStickRollPitchControl(const VirtualStickRollPitchControl& from);

  inline VirtualStickRollPitchControl& operator=(const VirtualStickRollPitchControl& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VirtualStickRollPitchControl(VirtualStickRollPitchControl&& from) noexcept
    : VirtualStickRollPitchControl() {
    *this = ::std::move(from);
  }

  inline VirtualStickRollPitchControl& operator=(VirtualStickRollPitchControl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VirtualStickRollPitchControl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VirtualStickRollPitchControl* internal_default_instance() {
    return reinterpret_cast<const VirtualStickRollPitchControl*>(
               &_VirtualStickRollPitchControl_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(VirtualStickRollPitchControl* other);
  friend void swap(VirtualStickRollPitchControl& a, VirtualStickRollPitchControl& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VirtualStickRollPitchControl* New() const PROTOBUF_FINAL { return New(NULL); }

  VirtualStickRollPitchControl* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VirtualStickRollPitchControl& from);
  void MergeFrom(const VirtualStickRollPitchControl& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VirtualStickRollPitchControl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef VirtualStickRollPitchControl_Mode Mode;
  static const Mode Angle =
    VirtualStickRollPitchControl_Mode_Angle;
  static const Mode Velocity =
    VirtualStickRollPitchControl_Mode_Velocity;
  static const Mode Unknown =
    VirtualStickRollPitchControl_Mode_Unknown;
  static inline bool Mode_IsValid(int value) {
    return VirtualStickRollPitchControl_Mode_IsValid(value);
  }
  static const Mode Mode_MIN =
    VirtualStickRollPitchControl_Mode_Mode_MIN;
  static const Mode Mode_MAX =
    VirtualStickRollPitchControl_Mode_Mode_MAX;
  static const int Mode_ARRAYSIZE =
    VirtualStickRollPitchControl_Mode_Mode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mode_descriptor() {
    return VirtualStickRollPitchControl_Mode_descriptor();
  }
  static inline const ::std::string& Mode_Name(Mode value) {
    return VirtualStickRollPitchControl_Mode_Name(value);
  }
  static inline bool Mode_Parse(const ::std::string& name,
      Mode* value) {
    return VirtualStickRollPitchControl_Mode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.VirtualStickRollPitchControl)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::TableStruct;
  friend void ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::InitDefaultsVirtualStickRollPitchControlImpl();
};
// -------------------------------------------------------------------

class VirtualStickYawControl : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.VirtualStickYawControl) */ {
 public:
  VirtualStickYawControl();
  virtual ~VirtualStickYawControl();

  VirtualStickYawControl(const VirtualStickYawControl& from);

  inline VirtualStickYawControl& operator=(const VirtualStickYawControl& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VirtualStickYawControl(VirtualStickYawControl&& from) noexcept
    : VirtualStickYawControl() {
    *this = ::std::move(from);
  }

  inline VirtualStickYawControl& operator=(VirtualStickYawControl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VirtualStickYawControl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VirtualStickYawControl* internal_default_instance() {
    return reinterpret_cast<const VirtualStickYawControl*>(
               &_VirtualStickYawControl_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(VirtualStickYawControl* other);
  friend void swap(VirtualStickYawControl& a, VirtualStickYawControl& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VirtualStickYawControl* New() const PROTOBUF_FINAL { return New(NULL); }

  VirtualStickYawControl* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VirtualStickYawControl& from);
  void MergeFrom(const VirtualStickYawControl& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VirtualStickYawControl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef VirtualStickYawControl_Mode Mode;
  static const Mode Angle =
    VirtualStickYawControl_Mode_Angle;
  static const Mode Velocity =
    VirtualStickYawControl_Mode_Velocity;
  static const Mode Unknown =
    VirtualStickYawControl_Mode_Unknown;
  static inline bool Mode_IsValid(int value) {
    return VirtualStickYawControl_Mode_IsValid(value);
  }
  static const Mode Mode_MIN =
    VirtualStickYawControl_Mode_Mode_MIN;
  static const Mode Mode_MAX =
    VirtualStickYawControl_Mode_Mode_MAX;
  static const int Mode_ARRAYSIZE =
    VirtualStickYawControl_Mode_Mode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mode_descriptor() {
    return VirtualStickYawControl_Mode_descriptor();
  }
  static inline const ::std::string& Mode_Name(Mode value) {
    return VirtualStickYawControl_Mode_Name(value);
  }
  static inline bool Mode_Parse(const ::std::string& name,
      Mode* value) {
    return VirtualStickYawControl_Mode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.VirtualStickYawControl)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::TableStruct;
  friend void ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::InitDefaultsVirtualStickYawControlImpl();
};
// -------------------------------------------------------------------

class VirtualStickFlightCoordinate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.VirtualStickFlightCoordinate) */ {
 public:
  VirtualStickFlightCoordinate();
  virtual ~VirtualStickFlightCoordinate();

  VirtualStickFlightCoordinate(const VirtualStickFlightCoordinate& from);

  inline VirtualStickFlightCoordinate& operator=(const VirtualStickFlightCoordinate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VirtualStickFlightCoordinate(VirtualStickFlightCoordinate&& from) noexcept
    : VirtualStickFlightCoordinate() {
    *this = ::std::move(from);
  }

  inline VirtualStickFlightCoordinate& operator=(VirtualStickFlightCoordinate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VirtualStickFlightCoordinate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VirtualStickFlightCoordinate* internal_default_instance() {
    return reinterpret_cast<const VirtualStickFlightCoordinate*>(
               &_VirtualStickFlightCoordinate_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(VirtualStickFlightCoordinate* other);
  friend void swap(VirtualStickFlightCoordinate& a, VirtualStickFlightCoordinate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VirtualStickFlightCoordinate* New() const PROTOBUF_FINAL { return New(NULL); }

  VirtualStickFlightCoordinate* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VirtualStickFlightCoordinate& from);
  void MergeFrom(const VirtualStickFlightCoordinate& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VirtualStickFlightCoordinate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef VirtualStickFlightCoordinate_System System;
  static const System Ground =
    VirtualStickFlightCoordinate_System_Ground;
  static const System Body =
    VirtualStickFlightCoordinate_System_Body;
  static const System Unknown =
    VirtualStickFlightCoordinate_System_Unknown;
  static inline bool System_IsValid(int value) {
    return VirtualStickFlightCoordinate_System_IsValid(value);
  }
  static const System System_MIN =
    VirtualStickFlightCoordinate_System_System_MIN;
  static const System System_MAX =
    VirtualStickFlightCoordinate_System_System_MAX;
  static const int System_ARRAYSIZE =
    VirtualStickFlightCoordinate_System_System_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  System_descriptor() {
    return VirtualStickFlightCoordinate_System_descriptor();
  }
  static inline const ::std::string& System_Name(System value) {
    return VirtualStickFlightCoordinate_System_Name(value);
  }
  static inline bool System_Parse(const ::std::string& name,
      System* value) {
    return VirtualStickFlightCoordinate_System_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.VirtualStickFlightCoordinate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::TableStruct;
  friend void ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::InitDefaultsVirtualStickFlightCoordinateImpl();
};
// -------------------------------------------------------------------

class VirtualStickFlightControlData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.VirtualStickFlightControlData) */ {
 public:
  VirtualStickFlightControlData();
  virtual ~VirtualStickFlightControlData();

  VirtualStickFlightControlData(const VirtualStickFlightControlData& from);

  inline VirtualStickFlightControlData& operator=(const VirtualStickFlightControlData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VirtualStickFlightControlData(VirtualStickFlightControlData&& from) noexcept
    : VirtualStickFlightControlData() {
    *this = ::std::move(from);
  }

  inline VirtualStickFlightControlData& operator=(VirtualStickFlightControlData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VirtualStickFlightControlData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VirtualStickFlightControlData* internal_default_instance() {
    return reinterpret_cast<const VirtualStickFlightControlData*>(
               &_VirtualStickFlightControlData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(VirtualStickFlightControlData* other);
  friend void swap(VirtualStickFlightControlData& a, VirtualStickFlightControlData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VirtualStickFlightControlData* New() const PROTOBUF_FINAL { return New(NULL); }

  VirtualStickFlightControlData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VirtualStickFlightControlData& from);
  void MergeFrom(const VirtualStickFlightControlData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VirtualStickFlightControlData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float pitch = 1;
  void clear_pitch();
  static const int kPitchFieldNumber = 1;
  float pitch() const;
  void set_pitch(float value);

  // float roll = 2;
  void clear_roll();
  static const int kRollFieldNumber = 2;
  float roll() const;
  void set_roll(float value);

  // float yaw = 3;
  void clear_yaw();
  static const int kYawFieldNumber = 3;
  float yaw() const;
  void set_yaw(float value);

  // float verticalThrottle = 4;
  void clear_verticalthrottle();
  static const int kVerticalThrottleFieldNumber = 4;
  float verticalthrottle() const;
  void set_verticalthrottle(float value);

  // .DJIFRProto.Standard.VirtualStickVerticalControl.Mode verticalControlMode = 5;
  void clear_verticalcontrolmode();
  static const int kVerticalControlModeFieldNumber = 5;
  ::DJIFRProto::Standard::VirtualStickVerticalControl_Mode verticalcontrolmode() const;
  void set_verticalcontrolmode(::DJIFRProto::Standard::VirtualStickVerticalControl_Mode value);

  // .DJIFRProto.Standard.VirtualStickRollPitchControl.Mode rollPitchControlMode = 6;
  void clear_rollpitchcontrolmode();
  static const int kRollPitchControlModeFieldNumber = 6;
  ::DJIFRProto::Standard::VirtualStickRollPitchControl_Mode rollpitchcontrolmode() const;
  void set_rollpitchcontrolmode(::DJIFRProto::Standard::VirtualStickRollPitchControl_Mode value);

  // .DJIFRProto.Standard.VirtualStickYawControl.Mode yawControlMode = 7;
  void clear_yawcontrolmode();
  static const int kYawControlModeFieldNumber = 7;
  ::DJIFRProto::Standard::VirtualStickYawControl_Mode yawcontrolmode() const;
  void set_yawcontrolmode(::DJIFRProto::Standard::VirtualStickYawControl_Mode value);

  // .DJIFRProto.Standard.VirtualStickFlightCoordinate.System rollPitchCoordinateSystem = 8;
  void clear_rollpitchcoordinatesystem();
  static const int kRollPitchCoordinateSystemFieldNumber = 8;
  ::DJIFRProto::Standard::VirtualStickFlightCoordinate_System rollpitchcoordinatesystem() const;
  void set_rollpitchcoordinatesystem(::DJIFRProto::Standard::VirtualStickFlightCoordinate_System value);

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.VirtualStickFlightControlData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float pitch_;
  float roll_;
  float yaw_;
  float verticalthrottle_;
  int verticalcontrolmode_;
  int rollpitchcontrolmode_;
  int yawcontrolmode_;
  int rollpitchcoordinatesystem_;
  mutable int _cached_size_;
  friend struct ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::TableStruct;
  friend void ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::InitDefaultsVirtualStickFlightControlDataImpl();
};
// -------------------------------------------------------------------

class FlightControllerState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.FlightControllerState) */ {
 public:
  FlightControllerState();
  virtual ~FlightControllerState();

  FlightControllerState(const FlightControllerState& from);

  inline FlightControllerState& operator=(const FlightControllerState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FlightControllerState(FlightControllerState&& from) noexcept
    : FlightControllerState() {
    *this = ::std::move(from);
  }

  inline FlightControllerState& operator=(FlightControllerState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FlightControllerState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlightControllerState* internal_default_instance() {
    return reinterpret_cast<const FlightControllerState*>(
               &_FlightControllerState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(FlightControllerState* other);
  friend void swap(FlightControllerState& a, FlightControllerState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FlightControllerState* New() const PROTOBUF_FINAL { return New(NULL); }

  FlightControllerState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FlightControllerState& from);
  void MergeFrom(const FlightControllerState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FlightControllerState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .DJIFRProto.Standard.Attitude attitude = 1;
  bool has_attitude() const;
  void clear_attitude();
  static const int kAttitudeFieldNumber = 1;
  const ::DJIFRProto::Standard::Attitude& attitude() const;
  ::DJIFRProto::Standard::Attitude* release_attitude();
  ::DJIFRProto::Standard::Attitude* mutable_attitude();
  void set_allocated_attitude(::DJIFRProto::Standard::Attitude* attitude);

  // .DJIFRProto.Standard.LocationCoordinate2D homeLocationCoordinate = 2;
  bool has_homelocationcoordinate() const;
  void clear_homelocationcoordinate();
  static const int kHomeLocationCoordinateFieldNumber = 2;
  const ::DJIFRProto::Standard::LocationCoordinate2D& homelocationcoordinate() const;
  ::DJIFRProto::Standard::LocationCoordinate2D* release_homelocationcoordinate();
  ::DJIFRProto::Standard::LocationCoordinate2D* mutable_homelocationcoordinate();
  void set_allocated_homelocationcoordinate(::DJIFRProto::Standard::LocationCoordinate2D* homelocationcoordinate);

  // .DJIFRProto.Standard.LocationCoordinate2D aircraftLocation = 4;
  bool has_aircraftlocation() const;
  void clear_aircraftlocation();
  static const int kAircraftLocationFieldNumber = 4;
  const ::DJIFRProto::Standard::LocationCoordinate2D& aircraftlocation() const;
  ::DJIFRProto::Standard::LocationCoordinate2D* release_aircraftlocation();
  ::DJIFRProto::Standard::LocationCoordinate2D* mutable_aircraftlocation();
  void set_allocated_aircraftlocation(::DJIFRProto::Standard::LocationCoordinate2D* aircraftlocation);

  // .DJIFRProto.Standard.VirtualStickFlightControlData virtualControlData = 14;
  bool has_virtualcontroldata() const;
  void clear_virtualcontroldata();
  static const int kVirtualControlDataFieldNumber = 14;
  const ::DJIFRProto::Standard::VirtualStickFlightControlData& virtualcontroldata() const;
  ::DJIFRProto::Standard::VirtualStickFlightControlData* release_virtualcontroldata();
  ::DJIFRProto::Standard::VirtualStickFlightControlData* mutable_virtualcontroldata();
  void set_allocated_virtualcontroldata(::DJIFRProto::Standard::VirtualStickFlightControlData* virtualcontroldata);

  // .DJIFRProto.Standard.Velocity velocity = 26;
  bool has_velocity() const;
  void clear_velocity();
  static const int kVelocityFieldNumber = 26;
  const ::DJIFRProto::Standard::Velocity& velocity() const;
  ::DJIFRProto::Standard::Velocity* release_velocity();
  ::DJIFRProto::Standard::Velocity* mutable_velocity();
  void set_allocated_velocity(::DJIFRProto::Standard::Velocity* velocity);

  // float takeoffLocationAltitude = 3;
  void clear_takeofflocationaltitude();
  static const int kTakeoffLocationAltitudeFieldNumber = 3;
  float takeofflocationaltitude() const;
  void set_takeofflocationaltitude(float value);

  // float altitude = 5;
  void clear_altitude();
  static const int kAltitudeFieldNumber = 5;
  float altitude() const;
  void set_altitude(float value);

  // .DJIFRProto.Standard.FlightMode flightMode = 6;
  void clear_flightmode();
  static const int kFlightModeFieldNumber = 6;
  ::DJIFRProto::Standard::FlightMode flightmode() const;
  void set_flightmode(::DJIFRProto::Standard::FlightMode value);

  // .DJIFRProto.Standard.GPSSignal.Level GPSSignalLevel = 7;
  void clear_gpssignallevel();
  static const int kGPSSignalLevelFieldNumber = 7;
  ::DJIFRProto::Standard::GPSSignal_Level gpssignallevel() const;
  void set_gpssignallevel(::DJIFRProto::Standard::GPSSignal_Level value);

  // int32 satelliteCount = 8;
  void clear_satellitecount();
  static const int kSatelliteCountFieldNumber = 8;
  ::google::protobuf::int32 satellitecount() const;
  void set_satellitecount(::google::protobuf::int32 value);

  // int32 remainingFlightTime = 9;
  void clear_remainingflighttime();
  static const int kRemainingFlightTimeFieldNumber = 9;
  ::google::protobuf::int32 remainingflighttime() const;
  void set_remainingflighttime(::google::protobuf::int32 value);

  // int32 batteryPercentageNeededToLandFromCurrentHeight = 10;
  void clear_batterypercentageneededtolandfromcurrentheight();
  static const int kBatteryPercentageNeededToLandFromCurrentHeightFieldNumber = 10;
  ::google::protobuf::int32 batterypercentageneededtolandfromcurrentheight() const;
  void set_batterypercentageneededtolandfromcurrentheight(::google::protobuf::int32 value);

  // int32 batteryPercentageNeededToGoHome = 11;
  void clear_batterypercentageneededtogohome();
  static const int kBatteryPercentageNeededToGoHomeFieldNumber = 11;
  ::google::protobuf::int32 batterypercentageneededtogohome() const;
  void set_batterypercentageneededtogohome(::google::protobuf::int32 value);

  // .DJIFRProto.Standard.SmartRTH.State smartRTHState = 12;
  void clear_smartrthstate();
  static const int kSmartRTHStateFieldNumber = 12;
  ::DJIFRProto::Standard::SmartRTH_State smartrthstate() const;
  void set_smartrthstate(::DJIFRProto::Standard::SmartRTH_State value);

  // .DJIFRProto.Standard.Connection.FailSafeBehavior behavior = 13;
  void clear_behavior();
  static const int kBehaviorFieldNumber = 13;
  ::DJIFRProto::Standard::Connection_FailSafeBehavior behavior() const;
  void set_behavior(::DJIFRProto::Standard::Connection_FailSafeBehavior value);

  // bool isFailsafeEnabled = 15;
  void clear_isfailsafeenabled();
  static const int kIsFailsafeEnabledFieldNumber = 15;
  bool isfailsafeenabled() const;
  void set_isfailsafeenabled(bool value);

  // bool areMotorsOn = 16;
  void clear_aremotorson();
  static const int kAreMotorsOnFieldNumber = 16;
  bool aremotorson() const;
  void set_aremotorson(bool value);

  // bool isHomeLocationSet = 17;
  void clear_ishomelocationset();
  static const int kIsHomeLocationSetFieldNumber = 17;
  bool ishomelocationset() const;
  void set_ishomelocationset(bool value);

  // bool isLandingConfirmationNeeded = 18;
  void clear_islandingconfirmationneeded();
  static const int kIsLandingConfirmationNeededFieldNumber = 18;
  bool islandingconfirmationneeded() const;
  void set_islandingconfirmationneeded(bool value);

  // .DJIFRProto.Standard.FlightWind.Warning windWarning = 21;
  void clear_windwarning();
  static const int kWindWarningFieldNumber = 21;
  ::DJIFRProto::Standard::FlightWind_Warning windwarning() const;
  void set_windwarning(::DJIFRProto::Standard::FlightWind_Warning value);

  // int32 countOfFlights = 22;
  void clear_countofflights();
  static const int kCountOfFlightsFieldNumber = 22;
  ::google::protobuf::int32 countofflights() const;
  void set_countofflights(::google::protobuf::int32 value);

  // bool hasReachedMaxFlightHeight = 19;
  void clear_hasreachedmaxflightheight();
  static const int kHasReachedMaxFlightHeightFieldNumber = 19;
  bool hasreachedmaxflightheight() const;
  void set_hasreachedmaxflightheight(bool value);

  // bool hasReachedMaxFlightRadius = 20;
  void clear_hasreachedmaxflightradius();
  static const int kHasReachedMaxFlightRadiusFieldNumber = 20;
  bool hasreachedmaxflightradius() const;
  void set_hasreachedmaxflightradius(bool value);

  // bool isFlying = 24;
  void clear_isflying();
  static const int kIsFlyingFieldNumber = 24;
  bool isflying() const;
  void set_isflying(bool value);

  // bool isGPSBeingUsed = 27;
  void clear_isgpsbeingused();
  static const int kIsGPSBeingUsedFieldNumber = 27;
  bool isgpsbeingused() const;
  void set_isgpsbeingused(bool value);

  // int32 flightLogIndex = 23;
  void clear_flightlogindex();
  static const int kFlightLogIndexFieldNumber = 23;
  ::google::protobuf::int32 flightlogindex() const;
  void set_flightlogindex(::google::protobuf::int32 value);

  // int32 smartRTHCountdown = 25;
  void clear_smartrthcountdown();
  static const int kSmartRTHCountdownFieldNumber = 25;
  ::google::protobuf::int32 smartrthcountdown() const;
  void set_smartrthcountdown(::google::protobuf::int32 value);

  // double flightTimeInSeconds = 28;
  void clear_flighttimeinseconds();
  static const int kFlightTimeInSecondsFieldNumber = 28;
  double flighttimeinseconds() const;
  void set_flighttimeinseconds(double value);

  // double cumulativeFlightDistance = 29;
  void clear_cumulativeflightdistance();
  static const int kCumulativeFlightDistanceFieldNumber = 29;
  double cumulativeflightdistance() const;
  void set_cumulativeflightdistance(double value);

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.FlightControllerState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::DJIFRProto::Standard::Attitude* attitude_;
  ::DJIFRProto::Standard::LocationCoordinate2D* homelocationcoordinate_;
  ::DJIFRProto::Standard::LocationCoordinate2D* aircraftlocation_;
  ::DJIFRProto::Standard::VirtualStickFlightControlData* virtualcontroldata_;
  ::DJIFRProto::Standard::Velocity* velocity_;
  float takeofflocationaltitude_;
  float altitude_;
  int flightmode_;
  int gpssignallevel_;
  ::google::protobuf::int32 satellitecount_;
  ::google::protobuf::int32 remainingflighttime_;
  ::google::protobuf::int32 batterypercentageneededtolandfromcurrentheight_;
  ::google::protobuf::int32 batterypercentageneededtogohome_;
  int smartrthstate_;
  int behavior_;
  bool isfailsafeenabled_;
  bool aremotorson_;
  bool ishomelocationset_;
  bool islandingconfirmationneeded_;
  int windwarning_;
  ::google::protobuf::int32 countofflights_;
  bool hasreachedmaxflightheight_;
  bool hasreachedmaxflightradius_;
  bool isflying_;
  bool isgpsbeingused_;
  ::google::protobuf::int32 flightlogindex_;
  ::google::protobuf::int32 smartrthcountdown_;
  double flighttimeinseconds_;
  double cumulativeflightdistance_;
  mutable int _cached_size_;
  friend struct ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::TableStruct;
  friend void ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::InitDefaultsFlightControllerStateImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FlightWind

// -------------------------------------------------------------------

// Connection

// -------------------------------------------------------------------

// SmartRTH

// -------------------------------------------------------------------

// VirtualStickVerticalControl

// -------------------------------------------------------------------

// VirtualStickRollPitchControl

// -------------------------------------------------------------------

// VirtualStickYawControl

// -------------------------------------------------------------------

// VirtualStickFlightCoordinate

// -------------------------------------------------------------------

// VirtualStickFlightControlData

// float pitch = 1;
inline void VirtualStickFlightControlData::clear_pitch() {
  pitch_ = 0;
}
inline float VirtualStickFlightControlData::pitch() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.VirtualStickFlightControlData.pitch)
  return pitch_;
}
inline void VirtualStickFlightControlData::set_pitch(float value) {
  
  pitch_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.VirtualStickFlightControlData.pitch)
}

// float roll = 2;
inline void VirtualStickFlightControlData::clear_roll() {
  roll_ = 0;
}
inline float VirtualStickFlightControlData::roll() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.VirtualStickFlightControlData.roll)
  return roll_;
}
inline void VirtualStickFlightControlData::set_roll(float value) {
  
  roll_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.VirtualStickFlightControlData.roll)
}

// float yaw = 3;
inline void VirtualStickFlightControlData::clear_yaw() {
  yaw_ = 0;
}
inline float VirtualStickFlightControlData::yaw() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.VirtualStickFlightControlData.yaw)
  return yaw_;
}
inline void VirtualStickFlightControlData::set_yaw(float value) {
  
  yaw_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.VirtualStickFlightControlData.yaw)
}

// float verticalThrottle = 4;
inline void VirtualStickFlightControlData::clear_verticalthrottle() {
  verticalthrottle_ = 0;
}
inline float VirtualStickFlightControlData::verticalthrottle() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.VirtualStickFlightControlData.verticalThrottle)
  return verticalthrottle_;
}
inline void VirtualStickFlightControlData::set_verticalthrottle(float value) {
  
  verticalthrottle_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.VirtualStickFlightControlData.verticalThrottle)
}

// .DJIFRProto.Standard.VirtualStickVerticalControl.Mode verticalControlMode = 5;
inline void VirtualStickFlightControlData::clear_verticalcontrolmode() {
  verticalcontrolmode_ = 0;
}
inline ::DJIFRProto::Standard::VirtualStickVerticalControl_Mode VirtualStickFlightControlData::verticalcontrolmode() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.VirtualStickFlightControlData.verticalControlMode)
  return static_cast< ::DJIFRProto::Standard::VirtualStickVerticalControl_Mode >(verticalcontrolmode_);
}
inline void VirtualStickFlightControlData::set_verticalcontrolmode(::DJIFRProto::Standard::VirtualStickVerticalControl_Mode value) {
  
  verticalcontrolmode_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.VirtualStickFlightControlData.verticalControlMode)
}

// .DJIFRProto.Standard.VirtualStickRollPitchControl.Mode rollPitchControlMode = 6;
inline void VirtualStickFlightControlData::clear_rollpitchcontrolmode() {
  rollpitchcontrolmode_ = 0;
}
inline ::DJIFRProto::Standard::VirtualStickRollPitchControl_Mode VirtualStickFlightControlData::rollpitchcontrolmode() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.VirtualStickFlightControlData.rollPitchControlMode)
  return static_cast< ::DJIFRProto::Standard::VirtualStickRollPitchControl_Mode >(rollpitchcontrolmode_);
}
inline void VirtualStickFlightControlData::set_rollpitchcontrolmode(::DJIFRProto::Standard::VirtualStickRollPitchControl_Mode value) {
  
  rollpitchcontrolmode_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.VirtualStickFlightControlData.rollPitchControlMode)
}

// .DJIFRProto.Standard.VirtualStickYawControl.Mode yawControlMode = 7;
inline void VirtualStickFlightControlData::clear_yawcontrolmode() {
  yawcontrolmode_ = 0;
}
inline ::DJIFRProto::Standard::VirtualStickYawControl_Mode VirtualStickFlightControlData::yawcontrolmode() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.VirtualStickFlightControlData.yawControlMode)
  return static_cast< ::DJIFRProto::Standard::VirtualStickYawControl_Mode >(yawcontrolmode_);
}
inline void VirtualStickFlightControlData::set_yawcontrolmode(::DJIFRProto::Standard::VirtualStickYawControl_Mode value) {
  
  yawcontrolmode_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.VirtualStickFlightControlData.yawControlMode)
}

// .DJIFRProto.Standard.VirtualStickFlightCoordinate.System rollPitchCoordinateSystem = 8;
inline void VirtualStickFlightControlData::clear_rollpitchcoordinatesystem() {
  rollpitchcoordinatesystem_ = 0;
}
inline ::DJIFRProto::Standard::VirtualStickFlightCoordinate_System VirtualStickFlightControlData::rollpitchcoordinatesystem() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.VirtualStickFlightControlData.rollPitchCoordinateSystem)
  return static_cast< ::DJIFRProto::Standard::VirtualStickFlightCoordinate_System >(rollpitchcoordinatesystem_);
}
inline void VirtualStickFlightControlData::set_rollpitchcoordinatesystem(::DJIFRProto::Standard::VirtualStickFlightCoordinate_System value) {
  
  rollpitchcoordinatesystem_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.VirtualStickFlightControlData.rollPitchCoordinateSystem)
}

// -------------------------------------------------------------------

// FlightControllerState

// .DJIFRProto.Standard.Attitude attitude = 1;
inline bool FlightControllerState::has_attitude() const {
  return this != internal_default_instance() && attitude_ != NULL;
}
inline const ::DJIFRProto::Standard::Attitude& FlightControllerState::attitude() const {
  const ::DJIFRProto::Standard::Attitude* p = attitude_;
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FlightControllerState.attitude)
  return p != NULL ? *p : *reinterpret_cast<const ::DJIFRProto::Standard::Attitude*>(
      &::DJIFRProto::Standard::_Attitude_default_instance_);
}
inline ::DJIFRProto::Standard::Attitude* FlightControllerState::release_attitude() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.FlightControllerState.attitude)
  
  ::DJIFRProto::Standard::Attitude* temp = attitude_;
  attitude_ = NULL;
  return temp;
}
inline ::DJIFRProto::Standard::Attitude* FlightControllerState::mutable_attitude() {
  
  if (attitude_ == NULL) {
    attitude_ = new ::DJIFRProto::Standard::Attitude;
  }
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.FlightControllerState.attitude)
  return attitude_;
}
inline void FlightControllerState::set_allocated_attitude(::DJIFRProto::Standard::Attitude* attitude) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(attitude_);
  }
  if (attitude) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      attitude = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, attitude, submessage_arena);
    }
    
  } else {
    
  }
  attitude_ = attitude;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.FlightControllerState.attitude)
}

// .DJIFRProto.Standard.LocationCoordinate2D homeLocationCoordinate = 2;
inline bool FlightControllerState::has_homelocationcoordinate() const {
  return this != internal_default_instance() && homelocationcoordinate_ != NULL;
}
inline const ::DJIFRProto::Standard::LocationCoordinate2D& FlightControllerState::homelocationcoordinate() const {
  const ::DJIFRProto::Standard::LocationCoordinate2D* p = homelocationcoordinate_;
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FlightControllerState.homeLocationCoordinate)
  return p != NULL ? *p : *reinterpret_cast<const ::DJIFRProto::Standard::LocationCoordinate2D*>(
      &::DJIFRProto::Standard::_LocationCoordinate2D_default_instance_);
}
inline ::DJIFRProto::Standard::LocationCoordinate2D* FlightControllerState::release_homelocationcoordinate() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.FlightControllerState.homeLocationCoordinate)
  
  ::DJIFRProto::Standard::LocationCoordinate2D* temp = homelocationcoordinate_;
  homelocationcoordinate_ = NULL;
  return temp;
}
inline ::DJIFRProto::Standard::LocationCoordinate2D* FlightControllerState::mutable_homelocationcoordinate() {
  
  if (homelocationcoordinate_ == NULL) {
    homelocationcoordinate_ = new ::DJIFRProto::Standard::LocationCoordinate2D;
  }
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.FlightControllerState.homeLocationCoordinate)
  return homelocationcoordinate_;
}
inline void FlightControllerState::set_allocated_homelocationcoordinate(::DJIFRProto::Standard::LocationCoordinate2D* homelocationcoordinate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(homelocationcoordinate_);
  }
  if (homelocationcoordinate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      homelocationcoordinate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, homelocationcoordinate, submessage_arena);
    }
    
  } else {
    
  }
  homelocationcoordinate_ = homelocationcoordinate;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.FlightControllerState.homeLocationCoordinate)
}

// float takeoffLocationAltitude = 3;
inline void FlightControllerState::clear_takeofflocationaltitude() {
  takeofflocationaltitude_ = 0;
}
inline float FlightControllerState::takeofflocationaltitude() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FlightControllerState.takeoffLocationAltitude)
  return takeofflocationaltitude_;
}
inline void FlightControllerState::set_takeofflocationaltitude(float value) {
  
  takeofflocationaltitude_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.FlightControllerState.takeoffLocationAltitude)
}

// .DJIFRProto.Standard.LocationCoordinate2D aircraftLocation = 4;
inline bool FlightControllerState::has_aircraftlocation() const {
  return this != internal_default_instance() && aircraftlocation_ != NULL;
}
inline const ::DJIFRProto::Standard::LocationCoordinate2D& FlightControllerState::aircraftlocation() const {
  const ::DJIFRProto::Standard::LocationCoordinate2D* p = aircraftlocation_;
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FlightControllerState.aircraftLocation)
  return p != NULL ? *p : *reinterpret_cast<const ::DJIFRProto::Standard::LocationCoordinate2D*>(
      &::DJIFRProto::Standard::_LocationCoordinate2D_default_instance_);
}
inline ::DJIFRProto::Standard::LocationCoordinate2D* FlightControllerState::release_aircraftlocation() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.FlightControllerState.aircraftLocation)
  
  ::DJIFRProto::Standard::LocationCoordinate2D* temp = aircraftlocation_;
  aircraftlocation_ = NULL;
  return temp;
}
inline ::DJIFRProto::Standard::LocationCoordinate2D* FlightControllerState::mutable_aircraftlocation() {
  
  if (aircraftlocation_ == NULL) {
    aircraftlocation_ = new ::DJIFRProto::Standard::LocationCoordinate2D;
  }
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.FlightControllerState.aircraftLocation)
  return aircraftlocation_;
}
inline void FlightControllerState::set_allocated_aircraftlocation(::DJIFRProto::Standard::LocationCoordinate2D* aircraftlocation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(aircraftlocation_);
  }
  if (aircraftlocation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      aircraftlocation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, aircraftlocation, submessage_arena);
    }
    
  } else {
    
  }
  aircraftlocation_ = aircraftlocation;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.FlightControllerState.aircraftLocation)
}

// float altitude = 5;
inline void FlightControllerState::clear_altitude() {
  altitude_ = 0;
}
inline float FlightControllerState::altitude() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FlightControllerState.altitude)
  return altitude_;
}
inline void FlightControllerState::set_altitude(float value) {
  
  altitude_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.FlightControllerState.altitude)
}

// .DJIFRProto.Standard.FlightMode flightMode = 6;
inline void FlightControllerState::clear_flightmode() {
  flightmode_ = 0;
}
inline ::DJIFRProto::Standard::FlightMode FlightControllerState::flightmode() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FlightControllerState.flightMode)
  return static_cast< ::DJIFRProto::Standard::FlightMode >(flightmode_);
}
inline void FlightControllerState::set_flightmode(::DJIFRProto::Standard::FlightMode value) {
  
  flightmode_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.FlightControllerState.flightMode)
}

// .DJIFRProto.Standard.GPSSignal.Level GPSSignalLevel = 7;
inline void FlightControllerState::clear_gpssignallevel() {
  gpssignallevel_ = 0;
}
inline ::DJIFRProto::Standard::GPSSignal_Level FlightControllerState::gpssignallevel() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FlightControllerState.GPSSignalLevel)
  return static_cast< ::DJIFRProto::Standard::GPSSignal_Level >(gpssignallevel_);
}
inline void FlightControllerState::set_gpssignallevel(::DJIFRProto::Standard::GPSSignal_Level value) {
  
  gpssignallevel_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.FlightControllerState.GPSSignalLevel)
}

// int32 satelliteCount = 8;
inline void FlightControllerState::clear_satellitecount() {
  satellitecount_ = 0;
}
inline ::google::protobuf::int32 FlightControllerState::satellitecount() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FlightControllerState.satelliteCount)
  return satellitecount_;
}
inline void FlightControllerState::set_satellitecount(::google::protobuf::int32 value) {
  
  satellitecount_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.FlightControllerState.satelliteCount)
}

// int32 remainingFlightTime = 9;
inline void FlightControllerState::clear_remainingflighttime() {
  remainingflighttime_ = 0;
}
inline ::google::protobuf::int32 FlightControllerState::remainingflighttime() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FlightControllerState.remainingFlightTime)
  return remainingflighttime_;
}
inline void FlightControllerState::set_remainingflighttime(::google::protobuf::int32 value) {
  
  remainingflighttime_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.FlightControllerState.remainingFlightTime)
}

// int32 batteryPercentageNeededToLandFromCurrentHeight = 10;
inline void FlightControllerState::clear_batterypercentageneededtolandfromcurrentheight() {
  batterypercentageneededtolandfromcurrentheight_ = 0;
}
inline ::google::protobuf::int32 FlightControllerState::batterypercentageneededtolandfromcurrentheight() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FlightControllerState.batteryPercentageNeededToLandFromCurrentHeight)
  return batterypercentageneededtolandfromcurrentheight_;
}
inline void FlightControllerState::set_batterypercentageneededtolandfromcurrentheight(::google::protobuf::int32 value) {
  
  batterypercentageneededtolandfromcurrentheight_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.FlightControllerState.batteryPercentageNeededToLandFromCurrentHeight)
}

// int32 batteryPercentageNeededToGoHome = 11;
inline void FlightControllerState::clear_batterypercentageneededtogohome() {
  batterypercentageneededtogohome_ = 0;
}
inline ::google::protobuf::int32 FlightControllerState::batterypercentageneededtogohome() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FlightControllerState.batteryPercentageNeededToGoHome)
  return batterypercentageneededtogohome_;
}
inline void FlightControllerState::set_batterypercentageneededtogohome(::google::protobuf::int32 value) {
  
  batterypercentageneededtogohome_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.FlightControllerState.batteryPercentageNeededToGoHome)
}

// .DJIFRProto.Standard.SmartRTH.State smartRTHState = 12;
inline void FlightControllerState::clear_smartrthstate() {
  smartrthstate_ = 0;
}
inline ::DJIFRProto::Standard::SmartRTH_State FlightControllerState::smartrthstate() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FlightControllerState.smartRTHState)
  return static_cast< ::DJIFRProto::Standard::SmartRTH_State >(smartrthstate_);
}
inline void FlightControllerState::set_smartrthstate(::DJIFRProto::Standard::SmartRTH_State value) {
  
  smartrthstate_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.FlightControllerState.smartRTHState)
}

// .DJIFRProto.Standard.Connection.FailSafeBehavior behavior = 13;
inline void FlightControllerState::clear_behavior() {
  behavior_ = 0;
}
inline ::DJIFRProto::Standard::Connection_FailSafeBehavior FlightControllerState::behavior() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FlightControllerState.behavior)
  return static_cast< ::DJIFRProto::Standard::Connection_FailSafeBehavior >(behavior_);
}
inline void FlightControllerState::set_behavior(::DJIFRProto::Standard::Connection_FailSafeBehavior value) {
  
  behavior_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.FlightControllerState.behavior)
}

// .DJIFRProto.Standard.VirtualStickFlightControlData virtualControlData = 14;
inline bool FlightControllerState::has_virtualcontroldata() const {
  return this != internal_default_instance() && virtualcontroldata_ != NULL;
}
inline void FlightControllerState::clear_virtualcontroldata() {
  if (GetArenaNoVirtual() == NULL && virtualcontroldata_ != NULL) {
    delete virtualcontroldata_;
  }
  virtualcontroldata_ = NULL;
}
inline const ::DJIFRProto::Standard::VirtualStickFlightControlData& FlightControllerState::virtualcontroldata() const {
  const ::DJIFRProto::Standard::VirtualStickFlightControlData* p = virtualcontroldata_;
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FlightControllerState.virtualControlData)
  return p != NULL ? *p : *reinterpret_cast<const ::DJIFRProto::Standard::VirtualStickFlightControlData*>(
      &::DJIFRProto::Standard::_VirtualStickFlightControlData_default_instance_);
}
inline ::DJIFRProto::Standard::VirtualStickFlightControlData* FlightControllerState::release_virtualcontroldata() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.FlightControllerState.virtualControlData)
  
  ::DJIFRProto::Standard::VirtualStickFlightControlData* temp = virtualcontroldata_;
  virtualcontroldata_ = NULL;
  return temp;
}
inline ::DJIFRProto::Standard::VirtualStickFlightControlData* FlightControllerState::mutable_virtualcontroldata() {
  
  if (virtualcontroldata_ == NULL) {
    virtualcontroldata_ = new ::DJIFRProto::Standard::VirtualStickFlightControlData;
  }
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.FlightControllerState.virtualControlData)
  return virtualcontroldata_;
}
inline void FlightControllerState::set_allocated_virtualcontroldata(::DJIFRProto::Standard::VirtualStickFlightControlData* virtualcontroldata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete virtualcontroldata_;
  }
  if (virtualcontroldata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      virtualcontroldata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, virtualcontroldata, submessage_arena);
    }
    
  } else {
    
  }
  virtualcontroldata_ = virtualcontroldata;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.FlightControllerState.virtualControlData)
}

// bool isFailsafeEnabled = 15;
inline void FlightControllerState::clear_isfailsafeenabled() {
  isfailsafeenabled_ = false;
}
inline bool FlightControllerState::isfailsafeenabled() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FlightControllerState.isFailsafeEnabled)
  return isfailsafeenabled_;
}
inline void FlightControllerState::set_isfailsafeenabled(bool value) {
  
  isfailsafeenabled_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.FlightControllerState.isFailsafeEnabled)
}

// bool areMotorsOn = 16;
inline void FlightControllerState::clear_aremotorson() {
  aremotorson_ = false;
}
inline bool FlightControllerState::aremotorson() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FlightControllerState.areMotorsOn)
  return aremotorson_;
}
inline void FlightControllerState::set_aremotorson(bool value) {
  
  aremotorson_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.FlightControllerState.areMotorsOn)
}

// bool isHomeLocationSet = 17;
inline void FlightControllerState::clear_ishomelocationset() {
  ishomelocationset_ = false;
}
inline bool FlightControllerState::ishomelocationset() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FlightControllerState.isHomeLocationSet)
  return ishomelocationset_;
}
inline void FlightControllerState::set_ishomelocationset(bool value) {
  
  ishomelocationset_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.FlightControllerState.isHomeLocationSet)
}

// bool isLandingConfirmationNeeded = 18;
inline void FlightControllerState::clear_islandingconfirmationneeded() {
  islandingconfirmationneeded_ = false;
}
inline bool FlightControllerState::islandingconfirmationneeded() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FlightControllerState.isLandingConfirmationNeeded)
  return islandingconfirmationneeded_;
}
inline void FlightControllerState::set_islandingconfirmationneeded(bool value) {
  
  islandingconfirmationneeded_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.FlightControllerState.isLandingConfirmationNeeded)
}

// bool hasReachedMaxFlightHeight = 19;
inline void FlightControllerState::clear_hasreachedmaxflightheight() {
  hasreachedmaxflightheight_ = false;
}
inline bool FlightControllerState::hasreachedmaxflightheight() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FlightControllerState.hasReachedMaxFlightHeight)
  return hasreachedmaxflightheight_;
}
inline void FlightControllerState::set_hasreachedmaxflightheight(bool value) {
  
  hasreachedmaxflightheight_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.FlightControllerState.hasReachedMaxFlightHeight)
}

// bool hasReachedMaxFlightRadius = 20;
inline void FlightControllerState::clear_hasreachedmaxflightradius() {
  hasreachedmaxflightradius_ = false;
}
inline bool FlightControllerState::hasreachedmaxflightradius() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FlightControllerState.hasReachedMaxFlightRadius)
  return hasreachedmaxflightradius_;
}
inline void FlightControllerState::set_hasreachedmaxflightradius(bool value) {
  
  hasreachedmaxflightradius_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.FlightControllerState.hasReachedMaxFlightRadius)
}

// .DJIFRProto.Standard.FlightWind.Warning windWarning = 21;
inline void FlightControllerState::clear_windwarning() {
  windwarning_ = 0;
}
inline ::DJIFRProto::Standard::FlightWind_Warning FlightControllerState::windwarning() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FlightControllerState.windWarning)
  return static_cast< ::DJIFRProto::Standard::FlightWind_Warning >(windwarning_);
}
inline void FlightControllerState::set_windwarning(::DJIFRProto::Standard::FlightWind_Warning value) {
  
  windwarning_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.FlightControllerState.windWarning)
}

// int32 countOfFlights = 22;
inline void FlightControllerState::clear_countofflights() {
  countofflights_ = 0;
}
inline ::google::protobuf::int32 FlightControllerState::countofflights() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FlightControllerState.countOfFlights)
  return countofflights_;
}
inline void FlightControllerState::set_countofflights(::google::protobuf::int32 value) {
  
  countofflights_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.FlightControllerState.countOfFlights)
}

// int32 flightLogIndex = 23;
inline void FlightControllerState::clear_flightlogindex() {
  flightlogindex_ = 0;
}
inline ::google::protobuf::int32 FlightControllerState::flightlogindex() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FlightControllerState.flightLogIndex)
  return flightlogindex_;
}
inline void FlightControllerState::set_flightlogindex(::google::protobuf::int32 value) {
  
  flightlogindex_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.FlightControllerState.flightLogIndex)
}

// bool isFlying = 24;
inline void FlightControllerState::clear_isflying() {
  isflying_ = false;
}
inline bool FlightControllerState::isflying() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FlightControllerState.isFlying)
  return isflying_;
}
inline void FlightControllerState::set_isflying(bool value) {
  
  isflying_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.FlightControllerState.isFlying)
}

// int32 smartRTHCountdown = 25;
inline void FlightControllerState::clear_smartrthcountdown() {
  smartrthcountdown_ = 0;
}
inline ::google::protobuf::int32 FlightControllerState::smartrthcountdown() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FlightControllerState.smartRTHCountdown)
  return smartrthcountdown_;
}
inline void FlightControllerState::set_smartrthcountdown(::google::protobuf::int32 value) {
  
  smartrthcountdown_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.FlightControllerState.smartRTHCountdown)
}

// .DJIFRProto.Standard.Velocity velocity = 26;
inline bool FlightControllerState::has_velocity() const {
  return this != internal_default_instance() && velocity_ != NULL;
}
inline const ::DJIFRProto::Standard::Velocity& FlightControllerState::velocity() const {
  const ::DJIFRProto::Standard::Velocity* p = velocity_;
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FlightControllerState.velocity)
  return p != NULL ? *p : *reinterpret_cast<const ::DJIFRProto::Standard::Velocity*>(
      &::DJIFRProto::Standard::_Velocity_default_instance_);
}
inline ::DJIFRProto::Standard::Velocity* FlightControllerState::release_velocity() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.FlightControllerState.velocity)
  
  ::DJIFRProto::Standard::Velocity* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
inline ::DJIFRProto::Standard::Velocity* FlightControllerState::mutable_velocity() {
  
  if (velocity_ == NULL) {
    velocity_ = new ::DJIFRProto::Standard::Velocity;
  }
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.FlightControllerState.velocity)
  return velocity_;
}
inline void FlightControllerState::set_allocated_velocity(::DJIFRProto::Standard::Velocity* velocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(velocity_);
  }
  if (velocity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      velocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.FlightControllerState.velocity)
}

// bool isGPSBeingUsed = 27;
inline void FlightControllerState::clear_isgpsbeingused() {
  isgpsbeingused_ = false;
}
inline bool FlightControllerState::isgpsbeingused() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FlightControllerState.isGPSBeingUsed)
  return isgpsbeingused_;
}
inline void FlightControllerState::set_isgpsbeingused(bool value) {
  
  isgpsbeingused_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.FlightControllerState.isGPSBeingUsed)
}

// double flightTimeInSeconds = 28;
inline void FlightControllerState::clear_flighttimeinseconds() {
  flighttimeinseconds_ = 0;
}
inline double FlightControllerState::flighttimeinseconds() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FlightControllerState.flightTimeInSeconds)
  return flighttimeinseconds_;
}
inline void FlightControllerState::set_flighttimeinseconds(double value) {
  
  flighttimeinseconds_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.FlightControllerState.flightTimeInSeconds)
}

// double cumulativeFlightDistance = 29;
inline void FlightControllerState::clear_cumulativeflightdistance() {
  cumulativeflightdistance_ = 0;
}
inline double FlightControllerState::cumulativeflightdistance() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FlightControllerState.cumulativeFlightDistance)
  return cumulativeflightdistance_;
}
inline void FlightControllerState::set_cumulativeflightdistance(double value) {
  
  cumulativeflightdistance_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.FlightControllerState.cumulativeFlightDistance)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Standard
}  // namespace DJIFRProto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::DJIFRProto::Standard::FlightWind_Warning> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DJIFRProto::Standard::FlightWind_Warning>() {
  return ::DJIFRProto::Standard::FlightWind_Warning_descriptor();
}
template <> struct is_proto_enum< ::DJIFRProto::Standard::Connection_FailSafeBehavior> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DJIFRProto::Standard::Connection_FailSafeBehavior>() {
  return ::DJIFRProto::Standard::Connection_FailSafeBehavior_descriptor();
}
template <> struct is_proto_enum< ::DJIFRProto::Standard::SmartRTH_State> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DJIFRProto::Standard::SmartRTH_State>() {
  return ::DJIFRProto::Standard::SmartRTH_State_descriptor();
}
template <> struct is_proto_enum< ::DJIFRProto::Standard::VirtualStickVerticalControl_Mode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DJIFRProto::Standard::VirtualStickVerticalControl_Mode>() {
  return ::DJIFRProto::Standard::VirtualStickVerticalControl_Mode_descriptor();
}
template <> struct is_proto_enum< ::DJIFRProto::Standard::VirtualStickRollPitchControl_Mode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DJIFRProto::Standard::VirtualStickRollPitchControl_Mode>() {
  return ::DJIFRProto::Standard::VirtualStickRollPitchControl_Mode_descriptor();
}
template <> struct is_proto_enum< ::DJIFRProto::Standard::VirtualStickYawControl_Mode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DJIFRProto::Standard::VirtualStickYawControl_Mode>() {
  return ::DJIFRProto::Standard::VirtualStickYawControl_Mode_descriptor();
}
template <> struct is_proto_enum< ::DJIFRProto::Standard::VirtualStickFlightCoordinate_System> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DJIFRProto::Standard::VirtualStickFlightCoordinate_System>() {
  return ::DJIFRProto::Standard::VirtualStickFlightCoordinate_System_descriptor();
}
template <> struct is_proto_enum< ::DJIFRProto::Standard::FlightMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DJIFRProto::Standard::FlightMode>() {
  return ::DJIFRProto::Standard::FlightMode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_FlightController_2fFRFlightControllerModelProto_2eproto__INCLUDED
