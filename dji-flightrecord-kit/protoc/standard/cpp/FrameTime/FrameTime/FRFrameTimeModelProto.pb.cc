// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FrameTime/FRFrameTimeModelProto.proto

#include "FrameTime/FRFrameTimeModelProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace DJIFRProto {
namespace Standard {
class FrameTimeState_GimbalsStateEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FrameTimeState_GimbalsStateEntry_DoNotUse>
      _instance;
} _FrameTimeState_GimbalsStateEntry_DoNotUse_default_instance_;
class FrameTimeState_CamerasStateEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FrameTimeState_CamerasStateEntry_DoNotUse>
      _instance;
} _FrameTimeState_CamerasStateEntry_DoNotUse_default_instance_;
class FrameTimeState_BatteriesStateEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FrameTimeState_BatteriesStateEntry_DoNotUse>
      _instance;
} _FrameTimeState_BatteriesStateEntry_DoNotUse_default_instance_;
class FrameTimeStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FrameTimeState>
      _instance;
} _FrameTimeState_default_instance_;
class FrameTimeStatesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FrameTimeStates>
      _instance;
} _FrameTimeStates_default_instance_;
}  // namespace Standard
}  // namespace DJIFRProto
namespace protobuf_FrameTime_2fFRFrameTimeModelProto_2eproto {
void InitDefaultsFrameTimeState_GimbalsStateEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_Gimbal_2fFRGimbalModelProto_2eproto::InitDefaultsGimbalState();
  {
    void* ptr = &::DJIFRProto::Standard::_FrameTimeState_GimbalsStateEntry_DoNotUse_default_instance_;
    new (ptr) ::DJIFRProto::Standard::FrameTimeState_GimbalsStateEntry_DoNotUse();
  }
  ::DJIFRProto::Standard::FrameTimeState_GimbalsStateEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsFrameTimeState_GimbalsStateEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFrameTimeState_GimbalsStateEntry_DoNotUseImpl);
}

void InitDefaultsFrameTimeState_CamerasStateEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_Camera_2fFRCameraStateProto_2eproto::InitDefaultsCameraState();
  {
    void* ptr = &::DJIFRProto::Standard::_FrameTimeState_CamerasStateEntry_DoNotUse_default_instance_;
    new (ptr) ::DJIFRProto::Standard::FrameTimeState_CamerasStateEntry_DoNotUse();
  }
  ::DJIFRProto::Standard::FrameTimeState_CamerasStateEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsFrameTimeState_CamerasStateEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFrameTimeState_CamerasStateEntry_DoNotUseImpl);
}

void InitDefaultsFrameTimeState_BatteriesStateEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_Battery_2fFRBatteryStateProto_2eproto::InitDefaultsBatteryState();
  {
    void* ptr = &::DJIFRProto::Standard::_FrameTimeState_BatteriesStateEntry_DoNotUse_default_instance_;
    new (ptr) ::DJIFRProto::Standard::FrameTimeState_BatteriesStateEntry_DoNotUse();
  }
  ::DJIFRProto::Standard::FrameTimeState_BatteriesStateEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsFrameTimeState_BatteriesStateEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFrameTimeState_BatteriesStateEntry_DoNotUseImpl);
}

void InitDefaultsFrameTimeStateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::InitDefaultsFlightControllerState();
  protobuf_Camera_2fFRCameraStateProto_2eproto::InitDefaultsCameraState();
  protobuf_Gimbal_2fFRGimbalModelProto_2eproto::InitDefaultsGimbalState();
  protobuf_RC_2fFRRCModelProto_2eproto::InitDefaultsRCHardwareState();
  protobuf_Battery_2fFRBatteryStateProto_2eproto::InitDefaultsBatteryState();
  protobuf_MobileRC_2fFRMobileRCModelProto_2eproto::InitDefaultsMobileRemoteControllerState();
  protobuf_AirLink_2fAirLink_2eproto::InitDefaultsAirLinkState();
  protobuf_GOBusinessData_2fGOBusinessData_2eproto::InitDefaultsGOBusinessData();
  protobuf_MobileDeviceState_2fMobileDeviceState_2eproto::InitDefaultsMobileDeviceState();
  protobuf_vision_2fFRVisionModelProto_2eproto::InitDefaultsVisionState();
  protobuf_FrameTime_2fFRFrameTimeModelProto_2eproto::InitDefaultsFrameTimeState_GimbalsStateEntry_DoNotUse();
  protobuf_FrameTime_2fFRFrameTimeModelProto_2eproto::InitDefaultsFrameTimeState_CamerasStateEntry_DoNotUse();
  protobuf_FrameTime_2fFRFrameTimeModelProto_2eproto::InitDefaultsFrameTimeState_BatteriesStateEntry_DoNotUse();
  {
    void* ptr = &::DJIFRProto::Standard::_FrameTimeState_default_instance_;
    new (ptr) ::DJIFRProto::Standard::FrameTimeState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DJIFRProto::Standard::FrameTimeState::InitAsDefaultInstance();
}

void InitDefaultsFrameTimeState() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFrameTimeStateImpl);
}

void InitDefaultsFrameTimeStatesImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_FrameTime_2fFRFrameTimeModelProto_2eproto::InitDefaultsFrameTimeState();
  {
    void* ptr = &::DJIFRProto::Standard::_FrameTimeStates_default_instance_;
    new (ptr) ::DJIFRProto::Standard::FrameTimeStates();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DJIFRProto::Standard::FrameTimeStates::InitAsDefaultInstance();
}

void InitDefaultsFrameTimeStates() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFrameTimeStatesImpl);
}

::google::protobuf::Metadata file_level_metadata[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState_GimbalsStateEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState_GimbalsStateEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState_GimbalsStateEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState_GimbalsStateEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState_CamerasStateEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState_CamerasStateEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState_CamerasStateEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState_CamerasStateEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState_BatteriesStateEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState_BatteriesStateEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState_BatteriesStateEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState_BatteriesStateEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState, flightcontrollerstate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState, camerastate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState, gimbalstate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState, rchardwarestate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState, batterystate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState, mobileremotecontroller_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState, airlinkstate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState, gobusinessdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState, mobiledevicestate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState, visionstate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState, gimbalsstate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState, camerasstate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState, batteriesstate_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeStates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeStates, frametimestates_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::DJIFRProto::Standard::FrameTimeState_GimbalsStateEntry_DoNotUse)},
  { 9, 16, sizeof(::DJIFRProto::Standard::FrameTimeState_CamerasStateEntry_DoNotUse)},
  { 18, 25, sizeof(::DJIFRProto::Standard::FrameTimeState_BatteriesStateEntry_DoNotUse)},
  { 27, -1, sizeof(::DJIFRProto::Standard::FrameTimeState)},
  { 45, -1, sizeof(::DJIFRProto::Standard::FrameTimeStates)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::DJIFRProto::Standard::_FrameTimeState_GimbalsStateEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DJIFRProto::Standard::_FrameTimeState_CamerasStateEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DJIFRProto::Standard::_FrameTimeState_BatteriesStateEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DJIFRProto::Standard::_FrameTimeState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DJIFRProto::Standard::_FrameTimeStates_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "FrameTime/FRFrameTimeModelProto.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n%FrameTime/FRFrameTimeModelProto.proto\022"
      "\023DJIFRProto.Standard\032\037Camera/FRCameraSta"
      "teProto.proto\0323FlightController/FRFlight"
      "ControllerModelProto.proto\032\037Gimbal/FRGim"
      "balModelProto.proto\032#MobileRC/FRMobileRC"
      "ModelProto.proto\032\027RC/FRRCModelProto.prot"
      "o\032!Battery/FRBatteryStateProto.proto\032\025Ai"
      "rLink/AirLink.proto\032#GOBusinessData/GOBu"
      "sinessData.proto\032)MobileDeviceState/Mobi"
      "leDeviceState.proto\032\037vision/FRVisionMode"
      "lProto.proto\"\366\010\n\016FrameTimeState\022I\n\025fligh"
      "tControllerState\030\001 \001(\0132*.DJIFRProto.Stan"
      "dard.FlightControllerState\0225\n\013cameraStat"
      "e\030\002 \001(\0132 .DJIFRProto.Standard.CameraStat"
      "e\0225\n\013gimbalState\030\003 \001(\0132 .DJIFRProto.Stan"
      "dard.GimbalState\022=\n\017rcHardwareState\030\004 \001("
      "\0132$.DJIFRProto.Standard.RCHardwareState\022"
      "7\n\014batteryState\030\005 \001(\0132!.DJIFRProto.Stand"
      "ard.BatteryState\022P\n\026mobileRemoteControll"
      "er\030\006 \001(\01320.DJIFRProto.Standard.MobileRem"
      "oteControllerState\0227\n\014airLinkState\030\010 \001(\013"
      "2!.DJIFRProto.Standard.AirLinkState\022;\n\016g"
      "oBusinessData\030\t \001(\0132#.DJIFRProto.Standar"
      "d.GOBusinessData\022A\n\021mobileDeviceState\030\n "
      "\001(\0132&.DJIFRProto.Standard.MobileDeviceSt"
      "ate\0225\n\013visionState\030\013 \001(\0132 .DJIFRProto.St"
      "andard.VisionState\022K\n\014gimbalsState\030\014 \003(\013"
      "25.DJIFRProto.Standard.FrameTimeState.Gi"
      "mbalsStateEntry\022K\n\014camerasState\030\r \003(\01325."
      "DJIFRProto.Standard.FrameTimeState.Camer"
      "asStateEntry\022O\n\016batteriesState\030\016 \003(\01327.D"
      "JIFRProto.Standard.FrameTimeState.Batter"
      "iesStateEntry\032U\n\021GimbalsStateEntry\022\013\n\003ke"
      "y\030\001 \001(\005\022/\n\005value\030\002 \001(\0132 .DJIFRProto.Stan"
      "dard.GimbalState:\0028\001\032U\n\021CamerasStateEntr"
      "y\022\013\n\003key\030\001 \001(\005\022/\n\005value\030\002 \001(\0132 .DJIFRPro"
      "to.Standard.CameraState:\0028\001\032X\n\023Batteries"
      "StateEntry\022\013\n\003key\030\001 \001(\005\0220\n\005value\030\002 \001(\0132!"
      ".DJIFRProto.Standard.BatteryState:\0028\001\"O\n"
      "\017FrameTimeStates\022<\n\017frameTimeStates\030\001 \003("
      "\0132#.DJIFRProto.Standard.FrameTimeStateB\r"
      "\242\002\nDJIFRProtob\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1661);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FrameTime/FRFrameTimeModelProto.proto", &protobuf_RegisterTypes);
  ::protobuf_Camera_2fFRCameraStateProto_2eproto::AddDescriptors();
  ::protobuf_FlightController_2fFRFlightControllerModelProto_2eproto::AddDescriptors();
  ::protobuf_Gimbal_2fFRGimbalModelProto_2eproto::AddDescriptors();
  ::protobuf_MobileRC_2fFRMobileRCModelProto_2eproto::AddDescriptors();
  ::protobuf_RC_2fFRRCModelProto_2eproto::AddDescriptors();
  ::protobuf_Battery_2fFRBatteryStateProto_2eproto::AddDescriptors();
  ::protobuf_AirLink_2fAirLink_2eproto::AddDescriptors();
  ::protobuf_GOBusinessData_2fGOBusinessData_2eproto::AddDescriptors();
  ::protobuf_MobileDeviceState_2fMobileDeviceState_2eproto::AddDescriptors();
  ::protobuf_vision_2fFRVisionModelProto_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_FrameTime_2fFRFrameTimeModelProto_2eproto
namespace DJIFRProto {
namespace Standard {

// ===================================================================

FrameTimeState_GimbalsStateEntry_DoNotUse::FrameTimeState_GimbalsStateEntry_DoNotUse() {}
FrameTimeState_GimbalsStateEntry_DoNotUse::FrameTimeState_GimbalsStateEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void FrameTimeState_GimbalsStateEntry_DoNotUse::MergeFrom(const FrameTimeState_GimbalsStateEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata FrameTimeState_GimbalsStateEntry_DoNotUse::GetMetadata() const {
  ::protobuf_FrameTime_2fFRFrameTimeModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_FrameTime_2fFRFrameTimeModelProto_2eproto::file_level_metadata[0];
}
void FrameTimeState_GimbalsStateEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

FrameTimeState_CamerasStateEntry_DoNotUse::FrameTimeState_CamerasStateEntry_DoNotUse() {}
FrameTimeState_CamerasStateEntry_DoNotUse::FrameTimeState_CamerasStateEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void FrameTimeState_CamerasStateEntry_DoNotUse::MergeFrom(const FrameTimeState_CamerasStateEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata FrameTimeState_CamerasStateEntry_DoNotUse::GetMetadata() const {
  ::protobuf_FrameTime_2fFRFrameTimeModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_FrameTime_2fFRFrameTimeModelProto_2eproto::file_level_metadata[1];
}
void FrameTimeState_CamerasStateEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

FrameTimeState_BatteriesStateEntry_DoNotUse::FrameTimeState_BatteriesStateEntry_DoNotUse() {}
FrameTimeState_BatteriesStateEntry_DoNotUse::FrameTimeState_BatteriesStateEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void FrameTimeState_BatteriesStateEntry_DoNotUse::MergeFrom(const FrameTimeState_BatteriesStateEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata FrameTimeState_BatteriesStateEntry_DoNotUse::GetMetadata() const {
  ::protobuf_FrameTime_2fFRFrameTimeModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_FrameTime_2fFRFrameTimeModelProto_2eproto::file_level_metadata[2];
}
void FrameTimeState_BatteriesStateEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void FrameTimeState::InitAsDefaultInstance() {
  ::DJIFRProto::Standard::_FrameTimeState_default_instance_._instance.get_mutable()->flightcontrollerstate_ = const_cast< ::DJIFRProto::Standard::FlightControllerState*>(
      ::DJIFRProto::Standard::FlightControllerState::internal_default_instance());
  ::DJIFRProto::Standard::_FrameTimeState_default_instance_._instance.get_mutable()->camerastate_ = const_cast< ::DJIFRProto::Standard::CameraState*>(
      ::DJIFRProto::Standard::CameraState::internal_default_instance());
  ::DJIFRProto::Standard::_FrameTimeState_default_instance_._instance.get_mutable()->gimbalstate_ = const_cast< ::DJIFRProto::Standard::GimbalState*>(
      ::DJIFRProto::Standard::GimbalState::internal_default_instance());
  ::DJIFRProto::Standard::_FrameTimeState_default_instance_._instance.get_mutable()->rchardwarestate_ = const_cast< ::DJIFRProto::Standard::RCHardwareState*>(
      ::DJIFRProto::Standard::RCHardwareState::internal_default_instance());
  ::DJIFRProto::Standard::_FrameTimeState_default_instance_._instance.get_mutable()->batterystate_ = const_cast< ::DJIFRProto::Standard::BatteryState*>(
      ::DJIFRProto::Standard::BatteryState::internal_default_instance());
  ::DJIFRProto::Standard::_FrameTimeState_default_instance_._instance.get_mutable()->mobileremotecontroller_ = const_cast< ::DJIFRProto::Standard::MobileRemoteControllerState*>(
      ::DJIFRProto::Standard::MobileRemoteControllerState::internal_default_instance());
  ::DJIFRProto::Standard::_FrameTimeState_default_instance_._instance.get_mutable()->airlinkstate_ = const_cast< ::DJIFRProto::Standard::AirLinkState*>(
      ::DJIFRProto::Standard::AirLinkState::internal_default_instance());
  ::DJIFRProto::Standard::_FrameTimeState_default_instance_._instance.get_mutable()->gobusinessdata_ = const_cast< ::DJIFRProto::Standard::GOBusinessData*>(
      ::DJIFRProto::Standard::GOBusinessData::internal_default_instance());
  ::DJIFRProto::Standard::_FrameTimeState_default_instance_._instance.get_mutable()->mobiledevicestate_ = const_cast< ::DJIFRProto::Standard::MobileDeviceState*>(
      ::DJIFRProto::Standard::MobileDeviceState::internal_default_instance());
  ::DJIFRProto::Standard::_FrameTimeState_default_instance_._instance.get_mutable()->visionstate_ = const_cast< ::DJIFRProto::Standard::VisionState*>(
      ::DJIFRProto::Standard::VisionState::internal_default_instance());
}
void FrameTimeState::clear_flightcontrollerstate() {
  if (GetArenaNoVirtual() == NULL && flightcontrollerstate_ != NULL) {
    delete flightcontrollerstate_;
  }
  flightcontrollerstate_ = NULL;
}
void FrameTimeState::clear_camerastate() {
  if (GetArenaNoVirtual() == NULL && camerastate_ != NULL) {
    delete camerastate_;
  }
  camerastate_ = NULL;
}
void FrameTimeState::clear_gimbalstate() {
  if (GetArenaNoVirtual() == NULL && gimbalstate_ != NULL) {
    delete gimbalstate_;
  }
  gimbalstate_ = NULL;
}
void FrameTimeState::clear_rchardwarestate() {
  if (GetArenaNoVirtual() == NULL && rchardwarestate_ != NULL) {
    delete rchardwarestate_;
  }
  rchardwarestate_ = NULL;
}
void FrameTimeState::clear_batterystate() {
  if (GetArenaNoVirtual() == NULL && batterystate_ != NULL) {
    delete batterystate_;
  }
  batterystate_ = NULL;
}
void FrameTimeState::clear_mobileremotecontroller() {
  if (GetArenaNoVirtual() == NULL && mobileremotecontroller_ != NULL) {
    delete mobileremotecontroller_;
  }
  mobileremotecontroller_ = NULL;
}
void FrameTimeState::clear_airlinkstate() {
  if (GetArenaNoVirtual() == NULL && airlinkstate_ != NULL) {
    delete airlinkstate_;
  }
  airlinkstate_ = NULL;
}
void FrameTimeState::clear_gobusinessdata() {
  if (GetArenaNoVirtual() == NULL && gobusinessdata_ != NULL) {
    delete gobusinessdata_;
  }
  gobusinessdata_ = NULL;
}
void FrameTimeState::clear_mobiledevicestate() {
  if (GetArenaNoVirtual() == NULL && mobiledevicestate_ != NULL) {
    delete mobiledevicestate_;
  }
  mobiledevicestate_ = NULL;
}
void FrameTimeState::clear_visionstate() {
  if (GetArenaNoVirtual() == NULL && visionstate_ != NULL) {
    delete visionstate_;
  }
  visionstate_ = NULL;
}
void FrameTimeState::clear_gimbalsstate() {
  gimbalsstate_.Clear();
}
void FrameTimeState::clear_camerasstate() {
  camerasstate_.Clear();
}
void FrameTimeState::clear_batteriesstate() {
  batteriesstate_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FrameTimeState::kFlightControllerStateFieldNumber;
const int FrameTimeState::kCameraStateFieldNumber;
const int FrameTimeState::kGimbalStateFieldNumber;
const int FrameTimeState::kRcHardwareStateFieldNumber;
const int FrameTimeState::kBatteryStateFieldNumber;
const int FrameTimeState::kMobileRemoteControllerFieldNumber;
const int FrameTimeState::kAirLinkStateFieldNumber;
const int FrameTimeState::kGoBusinessDataFieldNumber;
const int FrameTimeState::kMobileDeviceStateFieldNumber;
const int FrameTimeState::kVisionStateFieldNumber;
const int FrameTimeState::kGimbalsStateFieldNumber;
const int FrameTimeState::kCamerasStateFieldNumber;
const int FrameTimeState::kBatteriesStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FrameTimeState::FrameTimeState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_FrameTime_2fFRFrameTimeModelProto_2eproto::InitDefaultsFrameTimeState();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DJIFRProto.Standard.FrameTimeState)
}
FrameTimeState::FrameTimeState(const FrameTimeState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gimbalsstate_.MergeFrom(from.gimbalsstate_);
  camerasstate_.MergeFrom(from.camerasstate_);
  batteriesstate_.MergeFrom(from.batteriesstate_);
  if (from.has_flightcontrollerstate()) {
    flightcontrollerstate_ = new ::DJIFRProto::Standard::FlightControllerState(*from.flightcontrollerstate_);
  } else {
    flightcontrollerstate_ = NULL;
  }
  if (from.has_camerastate()) {
    camerastate_ = new ::DJIFRProto::Standard::CameraState(*from.camerastate_);
  } else {
    camerastate_ = NULL;
  }
  if (from.has_gimbalstate()) {
    gimbalstate_ = new ::DJIFRProto::Standard::GimbalState(*from.gimbalstate_);
  } else {
    gimbalstate_ = NULL;
  }
  if (from.has_rchardwarestate()) {
    rchardwarestate_ = new ::DJIFRProto::Standard::RCHardwareState(*from.rchardwarestate_);
  } else {
    rchardwarestate_ = NULL;
  }
  if (from.has_batterystate()) {
    batterystate_ = new ::DJIFRProto::Standard::BatteryState(*from.batterystate_);
  } else {
    batterystate_ = NULL;
  }
  if (from.has_mobileremotecontroller()) {
    mobileremotecontroller_ = new ::DJIFRProto::Standard::MobileRemoteControllerState(*from.mobileremotecontroller_);
  } else {
    mobileremotecontroller_ = NULL;
  }
  if (from.has_airlinkstate()) {
    airlinkstate_ = new ::DJIFRProto::Standard::AirLinkState(*from.airlinkstate_);
  } else {
    airlinkstate_ = NULL;
  }
  if (from.has_gobusinessdata()) {
    gobusinessdata_ = new ::DJIFRProto::Standard::GOBusinessData(*from.gobusinessdata_);
  } else {
    gobusinessdata_ = NULL;
  }
  if (from.has_mobiledevicestate()) {
    mobiledevicestate_ = new ::DJIFRProto::Standard::MobileDeviceState(*from.mobiledevicestate_);
  } else {
    mobiledevicestate_ = NULL;
  }
  if (from.has_visionstate()) {
    visionstate_ = new ::DJIFRProto::Standard::VisionState(*from.visionstate_);
  } else {
    visionstate_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.FrameTimeState)
}

void FrameTimeState::SharedCtor() {
  ::memset(&flightcontrollerstate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&visionstate_) -
      reinterpret_cast<char*>(&flightcontrollerstate_)) + sizeof(visionstate_));
  _cached_size_ = 0;
}

FrameTimeState::~FrameTimeState() {
  // @@protoc_insertion_point(destructor:DJIFRProto.Standard.FrameTimeState)
  SharedDtor();
}

void FrameTimeState::SharedDtor() {
  if (this != internal_default_instance()) delete flightcontrollerstate_;
  if (this != internal_default_instance()) delete camerastate_;
  if (this != internal_default_instance()) delete gimbalstate_;
  if (this != internal_default_instance()) delete rchardwarestate_;
  if (this != internal_default_instance()) delete batterystate_;
  if (this != internal_default_instance()) delete mobileremotecontroller_;
  if (this != internal_default_instance()) delete airlinkstate_;
  if (this != internal_default_instance()) delete gobusinessdata_;
  if (this != internal_default_instance()) delete mobiledevicestate_;
  if (this != internal_default_instance()) delete visionstate_;
}

void FrameTimeState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameTimeState::descriptor() {
  ::protobuf_FrameTime_2fFRFrameTimeModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_FrameTime_2fFRFrameTimeModelProto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FrameTimeState& FrameTimeState::default_instance() {
  ::protobuf_FrameTime_2fFRFrameTimeModelProto_2eproto::InitDefaultsFrameTimeState();
  return *internal_default_instance();
}

FrameTimeState* FrameTimeState::New(::google::protobuf::Arena* arena) const {
  FrameTimeState* n = new FrameTimeState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FrameTimeState::Clear() {
// @@protoc_insertion_point(message_clear_start:DJIFRProto.Standard.FrameTimeState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gimbalsstate_.Clear();
  camerasstate_.Clear();
  batteriesstate_.Clear();
  if (GetArenaNoVirtual() == NULL && flightcontrollerstate_ != NULL) {
    delete flightcontrollerstate_;
  }
  flightcontrollerstate_ = NULL;
  if (GetArenaNoVirtual() == NULL && camerastate_ != NULL) {
    delete camerastate_;
  }
  camerastate_ = NULL;
  if (GetArenaNoVirtual() == NULL && gimbalstate_ != NULL) {
    delete gimbalstate_;
  }
  gimbalstate_ = NULL;
  if (GetArenaNoVirtual() == NULL && rchardwarestate_ != NULL) {
    delete rchardwarestate_;
  }
  rchardwarestate_ = NULL;
  if (GetArenaNoVirtual() == NULL && batterystate_ != NULL) {
    delete batterystate_;
  }
  batterystate_ = NULL;
  if (GetArenaNoVirtual() == NULL && mobileremotecontroller_ != NULL) {
    delete mobileremotecontroller_;
  }
  mobileremotecontroller_ = NULL;
  if (GetArenaNoVirtual() == NULL && airlinkstate_ != NULL) {
    delete airlinkstate_;
  }
  airlinkstate_ = NULL;
  if (GetArenaNoVirtual() == NULL && gobusinessdata_ != NULL) {
    delete gobusinessdata_;
  }
  gobusinessdata_ = NULL;
  if (GetArenaNoVirtual() == NULL && mobiledevicestate_ != NULL) {
    delete mobiledevicestate_;
  }
  mobiledevicestate_ = NULL;
  if (GetArenaNoVirtual() == NULL && visionstate_ != NULL) {
    delete visionstate_;
  }
  visionstate_ = NULL;
  _internal_metadata_.Clear();
}

bool FrameTimeState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DJIFRProto.Standard.FrameTimeState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .DJIFRProto.Standard.FlightControllerState flightControllerState = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_flightcontrollerstate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DJIFRProto.Standard.CameraState cameraState = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_camerastate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DJIFRProto.Standard.GimbalState gimbalState = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gimbalstate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DJIFRProto.Standard.RCHardwareState rcHardwareState = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rchardwarestate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DJIFRProto.Standard.BatteryState batteryState = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_batterystate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DJIFRProto.Standard.MobileRemoteControllerState mobileRemoteController = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mobileremotecontroller()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DJIFRProto.Standard.AirLinkState airLinkState = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_airlinkstate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DJIFRProto.Standard.GOBusinessData goBusinessData = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gobusinessdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DJIFRProto.Standard.MobileDeviceState mobileDeviceState = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mobiledevicestate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DJIFRProto.Standard.VisionState visionState = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_visionstate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int32, .DJIFRProto.Standard.GimbalState> gimbalsState = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          FrameTimeState_GimbalsStateEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              FrameTimeState_GimbalsStateEntry_DoNotUse,
              ::google::protobuf::int32, ::DJIFRProto::Standard::GimbalState,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::GimbalState > > parser(&gimbalsstate_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int32, .DJIFRProto.Standard.CameraState> camerasState = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          FrameTimeState_CamerasStateEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              FrameTimeState_CamerasStateEntry_DoNotUse,
              ::google::protobuf::int32, ::DJIFRProto::Standard::CameraState,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::CameraState > > parser(&camerasstate_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int32, .DJIFRProto.Standard.BatteryState> batteriesState = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          FrameTimeState_BatteriesStateEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              FrameTimeState_BatteriesStateEntry_DoNotUse,
              ::google::protobuf::int32, ::DJIFRProto::Standard::BatteryState,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::BatteryState > > parser(&batteriesstate_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DJIFRProto.Standard.FrameTimeState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DJIFRProto.Standard.FrameTimeState)
  return false;
#undef DO_
}

void FrameTimeState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DJIFRProto.Standard.FrameTimeState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DJIFRProto.Standard.FlightControllerState flightControllerState = 1;
  if (this->has_flightcontrollerstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->flightcontrollerstate_, output);
  }

  // .DJIFRProto.Standard.CameraState cameraState = 2;
  if (this->has_camerastate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->camerastate_, output);
  }

  // .DJIFRProto.Standard.GimbalState gimbalState = 3;
  if (this->has_gimbalstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->gimbalstate_, output);
  }

  // .DJIFRProto.Standard.RCHardwareState rcHardwareState = 4;
  if (this->has_rchardwarestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->rchardwarestate_, output);
  }

  // .DJIFRProto.Standard.BatteryState batteryState = 5;
  if (this->has_batterystate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->batterystate_, output);
  }

  // .DJIFRProto.Standard.MobileRemoteControllerState mobileRemoteController = 6;
  if (this->has_mobileremotecontroller()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->mobileremotecontroller_, output);
  }

  // .DJIFRProto.Standard.AirLinkState airLinkState = 8;
  if (this->has_airlinkstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->airlinkstate_, output);
  }

  // .DJIFRProto.Standard.GOBusinessData goBusinessData = 9;
  if (this->has_gobusinessdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->gobusinessdata_, output);
  }

  // .DJIFRProto.Standard.MobileDeviceState mobileDeviceState = 10;
  if (this->has_mobiledevicestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->mobiledevicestate_, output);
  }

  // .DJIFRProto.Standard.VisionState visionState = 11;
  if (this->has_visionstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->visionstate_, output);
  }

  // map<int32, .DJIFRProto.Standard.GimbalState> gimbalsState = 12;
  if (!this->gimbalsstate().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::GimbalState >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->gimbalsstate().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->gimbalsstate().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::GimbalState >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::GimbalState >::const_iterator
          it = this->gimbalsstate().begin();
          it != this->gimbalsstate().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<FrameTimeState_GimbalsStateEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(gimbalsstate_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            12, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<FrameTimeState_GimbalsStateEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::GimbalState >::const_iterator
          it = this->gimbalsstate().begin();
          it != this->gimbalsstate().end(); ++it) {
        entry.reset(gimbalsstate_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            12, *entry, output);
      }
    }
  }

  // map<int32, .DJIFRProto.Standard.CameraState> camerasState = 13;
  if (!this->camerasstate().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::CameraState >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->camerasstate().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->camerasstate().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::CameraState >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::CameraState >::const_iterator
          it = this->camerasstate().begin();
          it != this->camerasstate().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<FrameTimeState_CamerasStateEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(camerasstate_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            13, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<FrameTimeState_CamerasStateEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::CameraState >::const_iterator
          it = this->camerasstate().begin();
          it != this->camerasstate().end(); ++it) {
        entry.reset(camerasstate_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            13, *entry, output);
      }
    }
  }

  // map<int32, .DJIFRProto.Standard.BatteryState> batteriesState = 14;
  if (!this->batteriesstate().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::BatteryState >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->batteriesstate().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->batteriesstate().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::BatteryState >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::BatteryState >::const_iterator
          it = this->batteriesstate().begin();
          it != this->batteriesstate().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<FrameTimeState_BatteriesStateEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(batteriesstate_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            14, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<FrameTimeState_BatteriesStateEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::BatteryState >::const_iterator
          it = this->batteriesstate().begin();
          it != this->batteriesstate().end(); ++it) {
        entry.reset(batteriesstate_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            14, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DJIFRProto.Standard.FrameTimeState)
}

::google::protobuf::uint8* FrameTimeState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DJIFRProto.Standard.FrameTimeState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DJIFRProto.Standard.FlightControllerState flightControllerState = 1;
  if (this->has_flightcontrollerstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->flightcontrollerstate_, deterministic, target);
  }

  // .DJIFRProto.Standard.CameraState cameraState = 2;
  if (this->has_camerastate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->camerastate_, deterministic, target);
  }

  // .DJIFRProto.Standard.GimbalState gimbalState = 3;
  if (this->has_gimbalstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->gimbalstate_, deterministic, target);
  }

  // .DJIFRProto.Standard.RCHardwareState rcHardwareState = 4;
  if (this->has_rchardwarestate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->rchardwarestate_, deterministic, target);
  }

  // .DJIFRProto.Standard.BatteryState batteryState = 5;
  if (this->has_batterystate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->batterystate_, deterministic, target);
  }

  // .DJIFRProto.Standard.MobileRemoteControllerState mobileRemoteController = 6;
  if (this->has_mobileremotecontroller()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->mobileremotecontroller_, deterministic, target);
  }

  // .DJIFRProto.Standard.AirLinkState airLinkState = 8;
  if (this->has_airlinkstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *this->airlinkstate_, deterministic, target);
  }

  // .DJIFRProto.Standard.GOBusinessData goBusinessData = 9;
  if (this->has_gobusinessdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *this->gobusinessdata_, deterministic, target);
  }

  // .DJIFRProto.Standard.MobileDeviceState mobileDeviceState = 10;
  if (this->has_mobiledevicestate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *this->mobiledevicestate_, deterministic, target);
  }

  // .DJIFRProto.Standard.VisionState visionState = 11;
  if (this->has_visionstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, *this->visionstate_, deterministic, target);
  }

  // map<int32, .DJIFRProto.Standard.GimbalState> gimbalsState = 12;
  if (!this->gimbalsstate().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::GimbalState >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->gimbalsstate().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->gimbalsstate().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::GimbalState >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::GimbalState >::const_iterator
          it = this->gimbalsstate().begin();
          it != this->gimbalsstate().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<FrameTimeState_GimbalsStateEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(gimbalsstate_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       12, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<FrameTimeState_GimbalsStateEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::GimbalState >::const_iterator
          it = this->gimbalsstate().begin();
          it != this->gimbalsstate().end(); ++it) {
        entry.reset(gimbalsstate_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       12, *entry, deterministic, target);
;
      }
    }
  }

  // map<int32, .DJIFRProto.Standard.CameraState> camerasState = 13;
  if (!this->camerasstate().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::CameraState >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->camerasstate().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->camerasstate().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::CameraState >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::CameraState >::const_iterator
          it = this->camerasstate().begin();
          it != this->camerasstate().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<FrameTimeState_CamerasStateEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(camerasstate_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       13, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<FrameTimeState_CamerasStateEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::CameraState >::const_iterator
          it = this->camerasstate().begin();
          it != this->camerasstate().end(); ++it) {
        entry.reset(camerasstate_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       13, *entry, deterministic, target);
;
      }
    }
  }

  // map<int32, .DJIFRProto.Standard.BatteryState> batteriesState = 14;
  if (!this->batteriesstate().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::BatteryState >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->batteriesstate().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->batteriesstate().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::BatteryState >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::BatteryState >::const_iterator
          it = this->batteriesstate().begin();
          it != this->batteriesstate().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<FrameTimeState_BatteriesStateEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(batteriesstate_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       14, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<FrameTimeState_BatteriesStateEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::BatteryState >::const_iterator
          it = this->batteriesstate().begin();
          it != this->batteriesstate().end(); ++it) {
        entry.reset(batteriesstate_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       14, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DJIFRProto.Standard.FrameTimeState)
  return target;
}

size_t FrameTimeState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DJIFRProto.Standard.FrameTimeState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<int32, .DJIFRProto.Standard.GimbalState> gimbalsState = 12;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->gimbalsstate_size());
  {
    ::google::protobuf::scoped_ptr<FrameTimeState_GimbalsStateEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::GimbalState >::const_iterator
        it = this->gimbalsstate().begin();
        it != this->gimbalsstate().end(); ++it) {
      entry.reset(gimbalsstate_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<int32, .DJIFRProto.Standard.CameraState> camerasState = 13;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->camerasstate_size());
  {
    ::google::protobuf::scoped_ptr<FrameTimeState_CamerasStateEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::CameraState >::const_iterator
        it = this->camerasstate().begin();
        it != this->camerasstate().end(); ++it) {
      entry.reset(camerasstate_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<int32, .DJIFRProto.Standard.BatteryState> batteriesState = 14;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->batteriesstate_size());
  {
    ::google::protobuf::scoped_ptr<FrameTimeState_BatteriesStateEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::BatteryState >::const_iterator
        it = this->batteriesstate().begin();
        it != this->batteriesstate().end(); ++it) {
      entry.reset(batteriesstate_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // .DJIFRProto.Standard.FlightControllerState flightControllerState = 1;
  if (this->has_flightcontrollerstate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->flightcontrollerstate_);
  }

  // .DJIFRProto.Standard.CameraState cameraState = 2;
  if (this->has_camerastate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->camerastate_);
  }

  // .DJIFRProto.Standard.GimbalState gimbalState = 3;
  if (this->has_gimbalstate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->gimbalstate_);
  }

  // .DJIFRProto.Standard.RCHardwareState rcHardwareState = 4;
  if (this->has_rchardwarestate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rchardwarestate_);
  }

  // .DJIFRProto.Standard.BatteryState batteryState = 5;
  if (this->has_batterystate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->batterystate_);
  }

  // .DJIFRProto.Standard.MobileRemoteControllerState mobileRemoteController = 6;
  if (this->has_mobileremotecontroller()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mobileremotecontroller_);
  }

  // .DJIFRProto.Standard.AirLinkState airLinkState = 8;
  if (this->has_airlinkstate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->airlinkstate_);
  }

  // .DJIFRProto.Standard.GOBusinessData goBusinessData = 9;
  if (this->has_gobusinessdata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->gobusinessdata_);
  }

  // .DJIFRProto.Standard.MobileDeviceState mobileDeviceState = 10;
  if (this->has_mobiledevicestate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mobiledevicestate_);
  }

  // .DJIFRProto.Standard.VisionState visionState = 11;
  if (this->has_visionstate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->visionstate_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameTimeState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DJIFRProto.Standard.FrameTimeState)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameTimeState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FrameTimeState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DJIFRProto.Standard.FrameTimeState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DJIFRProto.Standard.FrameTimeState)
    MergeFrom(*source);
  }
}

void FrameTimeState::MergeFrom(const FrameTimeState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DJIFRProto.Standard.FrameTimeState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gimbalsstate_.MergeFrom(from.gimbalsstate_);
  camerasstate_.MergeFrom(from.camerasstate_);
  batteriesstate_.MergeFrom(from.batteriesstate_);
  if (from.has_flightcontrollerstate()) {
    mutable_flightcontrollerstate()->::DJIFRProto::Standard::FlightControllerState::MergeFrom(from.flightcontrollerstate());
  }
  if (from.has_camerastate()) {
    mutable_camerastate()->::DJIFRProto::Standard::CameraState::MergeFrom(from.camerastate());
  }
  if (from.has_gimbalstate()) {
    mutable_gimbalstate()->::DJIFRProto::Standard::GimbalState::MergeFrom(from.gimbalstate());
  }
  if (from.has_rchardwarestate()) {
    mutable_rchardwarestate()->::DJIFRProto::Standard::RCHardwareState::MergeFrom(from.rchardwarestate());
  }
  if (from.has_batterystate()) {
    mutable_batterystate()->::DJIFRProto::Standard::BatteryState::MergeFrom(from.batterystate());
  }
  if (from.has_mobileremotecontroller()) {
    mutable_mobileremotecontroller()->::DJIFRProto::Standard::MobileRemoteControllerState::MergeFrom(from.mobileremotecontroller());
  }
  if (from.has_airlinkstate()) {
    mutable_airlinkstate()->::DJIFRProto::Standard::AirLinkState::MergeFrom(from.airlinkstate());
  }
  if (from.has_gobusinessdata()) {
    mutable_gobusinessdata()->::DJIFRProto::Standard::GOBusinessData::MergeFrom(from.gobusinessdata());
  }
  if (from.has_mobiledevicestate()) {
    mutable_mobiledevicestate()->::DJIFRProto::Standard::MobileDeviceState::MergeFrom(from.mobiledevicestate());
  }
  if (from.has_visionstate()) {
    mutable_visionstate()->::DJIFRProto::Standard::VisionState::MergeFrom(from.visionstate());
  }
}

void FrameTimeState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DJIFRProto.Standard.FrameTimeState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameTimeState::CopyFrom(const FrameTimeState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DJIFRProto.Standard.FrameTimeState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameTimeState::IsInitialized() const {
  return true;
}

void FrameTimeState::Swap(FrameTimeState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FrameTimeState::InternalSwap(FrameTimeState* other) {
  using std::swap;
  gimbalsstate_.Swap(&other->gimbalsstate_);
  camerasstate_.Swap(&other->camerasstate_);
  batteriesstate_.Swap(&other->batteriesstate_);
  swap(flightcontrollerstate_, other->flightcontrollerstate_);
  swap(camerastate_, other->camerastate_);
  swap(gimbalstate_, other->gimbalstate_);
  swap(rchardwarestate_, other->rchardwarestate_);
  swap(batterystate_, other->batterystate_);
  swap(mobileremotecontroller_, other->mobileremotecontroller_);
  swap(airlinkstate_, other->airlinkstate_);
  swap(gobusinessdata_, other->gobusinessdata_);
  swap(mobiledevicestate_, other->mobiledevicestate_);
  swap(visionstate_, other->visionstate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FrameTimeState::GetMetadata() const {
  protobuf_FrameTime_2fFRFrameTimeModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_FrameTime_2fFRFrameTimeModelProto_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FrameTimeStates::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FrameTimeStates::kFrameTimeStatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FrameTimeStates::FrameTimeStates()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_FrameTime_2fFRFrameTimeModelProto_2eproto::InitDefaultsFrameTimeStates();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DJIFRProto.Standard.FrameTimeStates)
}
FrameTimeStates::FrameTimeStates(const FrameTimeStates& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      frametimestates_(from.frametimestates_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.FrameTimeStates)
}

void FrameTimeStates::SharedCtor() {
  _cached_size_ = 0;
}

FrameTimeStates::~FrameTimeStates() {
  // @@protoc_insertion_point(destructor:DJIFRProto.Standard.FrameTimeStates)
  SharedDtor();
}

void FrameTimeStates::SharedDtor() {
}

void FrameTimeStates::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameTimeStates::descriptor() {
  ::protobuf_FrameTime_2fFRFrameTimeModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_FrameTime_2fFRFrameTimeModelProto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FrameTimeStates& FrameTimeStates::default_instance() {
  ::protobuf_FrameTime_2fFRFrameTimeModelProto_2eproto::InitDefaultsFrameTimeStates();
  return *internal_default_instance();
}

FrameTimeStates* FrameTimeStates::New(::google::protobuf::Arena* arena) const {
  FrameTimeStates* n = new FrameTimeStates;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FrameTimeStates::Clear() {
// @@protoc_insertion_point(message_clear_start:DJIFRProto.Standard.FrameTimeStates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frametimestates_.Clear();
  _internal_metadata_.Clear();
}

bool FrameTimeStates::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DJIFRProto.Standard.FrameTimeStates)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DJIFRProto.Standard.FrameTimeState frameTimeStates = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_frametimestates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DJIFRProto.Standard.FrameTimeStates)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DJIFRProto.Standard.FrameTimeStates)
  return false;
#undef DO_
}

void FrameTimeStates::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DJIFRProto.Standard.FrameTimeStates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DJIFRProto.Standard.FrameTimeState frameTimeStates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->frametimestates_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->frametimestates(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DJIFRProto.Standard.FrameTimeStates)
}

::google::protobuf::uint8* FrameTimeStates::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DJIFRProto.Standard.FrameTimeStates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DJIFRProto.Standard.FrameTimeState frameTimeStates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->frametimestates_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->frametimestates(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DJIFRProto.Standard.FrameTimeStates)
  return target;
}

size_t FrameTimeStates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DJIFRProto.Standard.FrameTimeStates)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .DJIFRProto.Standard.FrameTimeState frameTimeStates = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->frametimestates_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->frametimestates(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameTimeStates::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DJIFRProto.Standard.FrameTimeStates)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameTimeStates* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FrameTimeStates>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DJIFRProto.Standard.FrameTimeStates)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DJIFRProto.Standard.FrameTimeStates)
    MergeFrom(*source);
  }
}

void FrameTimeStates::MergeFrom(const FrameTimeStates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DJIFRProto.Standard.FrameTimeStates)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  frametimestates_.MergeFrom(from.frametimestates_);
}

void FrameTimeStates::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DJIFRProto.Standard.FrameTimeStates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameTimeStates::CopyFrom(const FrameTimeStates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DJIFRProto.Standard.FrameTimeStates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameTimeStates::IsInitialized() const {
  return true;
}

void FrameTimeStates::Swap(FrameTimeStates* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FrameTimeStates::InternalSwap(FrameTimeStates* other) {
  using std::swap;
  frametimestates_.InternalSwap(&other->frametimestates_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FrameTimeStates::GetMetadata() const {
  protobuf_FrameTime_2fFRFrameTimeModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_FrameTime_2fFRFrameTimeModelProto_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Standard
}  // namespace DJIFRProto

// @@protoc_insertion_point(global_scope)
