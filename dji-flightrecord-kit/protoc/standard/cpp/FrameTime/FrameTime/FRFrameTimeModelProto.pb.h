// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FrameTime/FRFrameTimeModelProto.proto

#ifndef PROTOBUF_FrameTime_2fFRFrameTimeModelProto_2eproto__INCLUDED
#define PROTOBUF_FrameTime_2fFRFrameTimeModelProto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "Camera/FRCameraStateProto.pb.h"
#include "FlightController/FRFlightControllerModelProto.pb.h"
#include "Gimbal/FRGimbalModelProto.pb.h"
#include "MobileRC/FRMobileRCModelProto.pb.h"
#include "RC/FRRCModelProto.pb.h"
#include "Battery/FRBatteryStateProto.pb.h"
#include "AirLink/AirLink.pb.h"
#include "GOBusinessData/GOBusinessData.pb.h"
#include "MobileDeviceState/MobileDeviceState.pb.h"
#include "vision/FRVisionModelProto.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_FrameTime_2fFRFrameTimeModelProto_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsFrameTimeState_GimbalsStateEntry_DoNotUseImpl();
void InitDefaultsFrameTimeState_GimbalsStateEntry_DoNotUse();
void InitDefaultsFrameTimeState_CamerasStateEntry_DoNotUseImpl();
void InitDefaultsFrameTimeState_CamerasStateEntry_DoNotUse();
void InitDefaultsFrameTimeState_BatteriesStateEntry_DoNotUseImpl();
void InitDefaultsFrameTimeState_BatteriesStateEntry_DoNotUse();
void InitDefaultsFrameTimeStateImpl();
void InitDefaultsFrameTimeState();
void InitDefaultsFrameTimeStatesImpl();
void InitDefaultsFrameTimeStates();
inline void InitDefaults() {
  InitDefaultsFrameTimeState_GimbalsStateEntry_DoNotUse();
  InitDefaultsFrameTimeState_CamerasStateEntry_DoNotUse();
  InitDefaultsFrameTimeState_BatteriesStateEntry_DoNotUse();
  InitDefaultsFrameTimeState();
  InitDefaultsFrameTimeStates();
}
}  // namespace protobuf_FrameTime_2fFRFrameTimeModelProto_2eproto
namespace DJIFRProto {
namespace Standard {
class FrameTimeState;
class FrameTimeStateDefaultTypeInternal;
extern FrameTimeStateDefaultTypeInternal _FrameTimeState_default_instance_;
class FrameTimeState_BatteriesStateEntry_DoNotUse;
class FrameTimeState_BatteriesStateEntry_DoNotUseDefaultTypeInternal;
extern FrameTimeState_BatteriesStateEntry_DoNotUseDefaultTypeInternal _FrameTimeState_BatteriesStateEntry_DoNotUse_default_instance_;
class FrameTimeState_CamerasStateEntry_DoNotUse;
class FrameTimeState_CamerasStateEntry_DoNotUseDefaultTypeInternal;
extern FrameTimeState_CamerasStateEntry_DoNotUseDefaultTypeInternal _FrameTimeState_CamerasStateEntry_DoNotUse_default_instance_;
class FrameTimeState_GimbalsStateEntry_DoNotUse;
class FrameTimeState_GimbalsStateEntry_DoNotUseDefaultTypeInternal;
extern FrameTimeState_GimbalsStateEntry_DoNotUseDefaultTypeInternal _FrameTimeState_GimbalsStateEntry_DoNotUse_default_instance_;
class FrameTimeStates;
class FrameTimeStatesDefaultTypeInternal;
extern FrameTimeStatesDefaultTypeInternal _FrameTimeStates_default_instance_;
}  // namespace Standard
}  // namespace DJIFRProto
namespace DJIFRProto {
namespace Standard {

// ===================================================================

class FrameTimeState_GimbalsStateEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<FrameTimeState_GimbalsStateEntry_DoNotUse, 
    ::google::protobuf::int32, ::DJIFRProto::Standard::GimbalState,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<FrameTimeState_GimbalsStateEntry_DoNotUse, 
    ::google::protobuf::int32, ::DJIFRProto::Standard::GimbalState,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  FrameTimeState_GimbalsStateEntry_DoNotUse();
  FrameTimeState_GimbalsStateEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const FrameTimeState_GimbalsStateEntry_DoNotUse& other);
  static const FrameTimeState_GimbalsStateEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FrameTimeState_GimbalsStateEntry_DoNotUse*>(&_FrameTimeState_GimbalsStateEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class FrameTimeState_CamerasStateEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<FrameTimeState_CamerasStateEntry_DoNotUse, 
    ::google::protobuf::int32, ::DJIFRProto::Standard::CameraState,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<FrameTimeState_CamerasStateEntry_DoNotUse, 
    ::google::protobuf::int32, ::DJIFRProto::Standard::CameraState,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  FrameTimeState_CamerasStateEntry_DoNotUse();
  FrameTimeState_CamerasStateEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const FrameTimeState_CamerasStateEntry_DoNotUse& other);
  static const FrameTimeState_CamerasStateEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FrameTimeState_CamerasStateEntry_DoNotUse*>(&_FrameTimeState_CamerasStateEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class FrameTimeState_BatteriesStateEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<FrameTimeState_BatteriesStateEntry_DoNotUse, 
    ::google::protobuf::int32, ::DJIFRProto::Standard::BatteryState,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<FrameTimeState_BatteriesStateEntry_DoNotUse, 
    ::google::protobuf::int32, ::DJIFRProto::Standard::BatteryState,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  FrameTimeState_BatteriesStateEntry_DoNotUse();
  FrameTimeState_BatteriesStateEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const FrameTimeState_BatteriesStateEntry_DoNotUse& other);
  static const FrameTimeState_BatteriesStateEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FrameTimeState_BatteriesStateEntry_DoNotUse*>(&_FrameTimeState_BatteriesStateEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class FrameTimeState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.FrameTimeState) */ {
 public:
  FrameTimeState();
  virtual ~FrameTimeState();

  FrameTimeState(const FrameTimeState& from);

  inline FrameTimeState& operator=(const FrameTimeState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FrameTimeState(FrameTimeState&& from) noexcept
    : FrameTimeState() {
    *this = ::std::move(from);
  }

  inline FrameTimeState& operator=(FrameTimeState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FrameTimeState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrameTimeState* internal_default_instance() {
    return reinterpret_cast<const FrameTimeState*>(
               &_FrameTimeState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(FrameTimeState* other);
  friend void swap(FrameTimeState& a, FrameTimeState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FrameTimeState* New() const PROTOBUF_FINAL { return New(NULL); }

  FrameTimeState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FrameTimeState& from);
  void MergeFrom(const FrameTimeState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FrameTimeState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<int32, .DJIFRProto.Standard.GimbalState> gimbalsState = 12;
  int gimbalsstate_size() const;
  void clear_gimbalsstate();
  static const int kGimbalsStateFieldNumber = 12;
  const ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::GimbalState >&
      gimbalsstate() const;
  ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::GimbalState >*
      mutable_gimbalsstate();

  // map<int32, .DJIFRProto.Standard.CameraState> camerasState = 13;
  int camerasstate_size() const;
  void clear_camerasstate();
  static const int kCamerasStateFieldNumber = 13;
  const ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::CameraState >&
      camerasstate() const;
  ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::CameraState >*
      mutable_camerasstate();

  // map<int32, .DJIFRProto.Standard.BatteryState> batteriesState = 14;
  int batteriesstate_size() const;
  void clear_batteriesstate();
  static const int kBatteriesStateFieldNumber = 14;
  const ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::BatteryState >&
      batteriesstate() const;
  ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::BatteryState >*
      mutable_batteriesstate();

  // .DJIFRProto.Standard.FlightControllerState flightControllerState = 1;
  bool has_flightcontrollerstate() const;
  void clear_flightcontrollerstate();
  static const int kFlightControllerStateFieldNumber = 1;
  const ::DJIFRProto::Standard::FlightControllerState& flightcontrollerstate() const;
  ::DJIFRProto::Standard::FlightControllerState* release_flightcontrollerstate();
  ::DJIFRProto::Standard::FlightControllerState* mutable_flightcontrollerstate();
  void set_allocated_flightcontrollerstate(::DJIFRProto::Standard::FlightControllerState* flightcontrollerstate);

  // .DJIFRProto.Standard.CameraState cameraState = 2;
  bool has_camerastate() const;
  void clear_camerastate();
  static const int kCameraStateFieldNumber = 2;
  const ::DJIFRProto::Standard::CameraState& camerastate() const;
  ::DJIFRProto::Standard::CameraState* release_camerastate();
  ::DJIFRProto::Standard::CameraState* mutable_camerastate();
  void set_allocated_camerastate(::DJIFRProto::Standard::CameraState* camerastate);

  // .DJIFRProto.Standard.GimbalState gimbalState = 3;
  bool has_gimbalstate() const;
  void clear_gimbalstate();
  static const int kGimbalStateFieldNumber = 3;
  const ::DJIFRProto::Standard::GimbalState& gimbalstate() const;
  ::DJIFRProto::Standard::GimbalState* release_gimbalstate();
  ::DJIFRProto::Standard::GimbalState* mutable_gimbalstate();
  void set_allocated_gimbalstate(::DJIFRProto::Standard::GimbalState* gimbalstate);

  // .DJIFRProto.Standard.RCHardwareState rcHardwareState = 4;
  bool has_rchardwarestate() const;
  void clear_rchardwarestate();
  static const int kRcHardwareStateFieldNumber = 4;
  const ::DJIFRProto::Standard::RCHardwareState& rchardwarestate() const;
  ::DJIFRProto::Standard::RCHardwareState* release_rchardwarestate();
  ::DJIFRProto::Standard::RCHardwareState* mutable_rchardwarestate();
  void set_allocated_rchardwarestate(::DJIFRProto::Standard::RCHardwareState* rchardwarestate);

  // .DJIFRProto.Standard.BatteryState batteryState = 5;
  bool has_batterystate() const;
  void clear_batterystate();
  static const int kBatteryStateFieldNumber = 5;
  const ::DJIFRProto::Standard::BatteryState& batterystate() const;
  ::DJIFRProto::Standard::BatteryState* release_batterystate();
  ::DJIFRProto::Standard::BatteryState* mutable_batterystate();
  void set_allocated_batterystate(::DJIFRProto::Standard::BatteryState* batterystate);

  // .DJIFRProto.Standard.MobileRemoteControllerState mobileRemoteController = 6;
  bool has_mobileremotecontroller() const;
  void clear_mobileremotecontroller();
  static const int kMobileRemoteControllerFieldNumber = 6;
  const ::DJIFRProto::Standard::MobileRemoteControllerState& mobileremotecontroller() const;
  ::DJIFRProto::Standard::MobileRemoteControllerState* release_mobileremotecontroller();
  ::DJIFRProto::Standard::MobileRemoteControllerState* mutable_mobileremotecontroller();
  void set_allocated_mobileremotecontroller(::DJIFRProto::Standard::MobileRemoteControllerState* mobileremotecontroller);

  // .DJIFRProto.Standard.AirLinkState airLinkState = 8;
  bool has_airlinkstate() const;
  void clear_airlinkstate();
  static const int kAirLinkStateFieldNumber = 8;
  const ::DJIFRProto::Standard::AirLinkState& airlinkstate() const;
  ::DJIFRProto::Standard::AirLinkState* release_airlinkstate();
  ::DJIFRProto::Standard::AirLinkState* mutable_airlinkstate();
  void set_allocated_airlinkstate(::DJIFRProto::Standard::AirLinkState* airlinkstate);

  // .DJIFRProto.Standard.GOBusinessData goBusinessData = 9;
  bool has_gobusinessdata() const;
  void clear_gobusinessdata();
  static const int kGoBusinessDataFieldNumber = 9;
  const ::DJIFRProto::Standard::GOBusinessData& gobusinessdata() const;
  ::DJIFRProto::Standard::GOBusinessData* release_gobusinessdata();
  ::DJIFRProto::Standard::GOBusinessData* mutable_gobusinessdata();
  void set_allocated_gobusinessdata(::DJIFRProto::Standard::GOBusinessData* gobusinessdata);

  // .DJIFRProto.Standard.MobileDeviceState mobileDeviceState = 10;
  bool has_mobiledevicestate() const;
  void clear_mobiledevicestate();
  static const int kMobileDeviceStateFieldNumber = 10;
  const ::DJIFRProto::Standard::MobileDeviceState& mobiledevicestate() const;
  ::DJIFRProto::Standard::MobileDeviceState* release_mobiledevicestate();
  ::DJIFRProto::Standard::MobileDeviceState* mutable_mobiledevicestate();
  void set_allocated_mobiledevicestate(::DJIFRProto::Standard::MobileDeviceState* mobiledevicestate);

  // .DJIFRProto.Standard.VisionState visionState = 11;
  bool has_visionstate() const;
  void clear_visionstate();
  static const int kVisionStateFieldNumber = 11;
  const ::DJIFRProto::Standard::VisionState& visionstate() const;
  ::DJIFRProto::Standard::VisionState* release_visionstate();
  ::DJIFRProto::Standard::VisionState* mutable_visionstate();
  void set_allocated_visionstate(::DJIFRProto::Standard::VisionState* visionstate);

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.FrameTimeState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      FrameTimeState_GimbalsStateEntry_DoNotUse,
      ::google::protobuf::int32, ::DJIFRProto::Standard::GimbalState,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > gimbalsstate_;
  ::google::protobuf::internal::MapField<
      FrameTimeState_CamerasStateEntry_DoNotUse,
      ::google::protobuf::int32, ::DJIFRProto::Standard::CameraState,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > camerasstate_;
  ::google::protobuf::internal::MapField<
      FrameTimeState_BatteriesStateEntry_DoNotUse,
      ::google::protobuf::int32, ::DJIFRProto::Standard::BatteryState,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > batteriesstate_;
  ::DJIFRProto::Standard::FlightControllerState* flightcontrollerstate_;
  ::DJIFRProto::Standard::CameraState* camerastate_;
  ::DJIFRProto::Standard::GimbalState* gimbalstate_;
  ::DJIFRProto::Standard::RCHardwareState* rchardwarestate_;
  ::DJIFRProto::Standard::BatteryState* batterystate_;
  ::DJIFRProto::Standard::MobileRemoteControllerState* mobileremotecontroller_;
  ::DJIFRProto::Standard::AirLinkState* airlinkstate_;
  ::DJIFRProto::Standard::GOBusinessData* gobusinessdata_;
  ::DJIFRProto::Standard::MobileDeviceState* mobiledevicestate_;
  ::DJIFRProto::Standard::VisionState* visionstate_;
  mutable int _cached_size_;
  friend struct ::protobuf_FrameTime_2fFRFrameTimeModelProto_2eproto::TableStruct;
  friend void ::protobuf_FrameTime_2fFRFrameTimeModelProto_2eproto::InitDefaultsFrameTimeStateImpl();
};
// -------------------------------------------------------------------

class FrameTimeStates : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.FrameTimeStates) */ {
 public:
  FrameTimeStates();
  virtual ~FrameTimeStates();

  FrameTimeStates(const FrameTimeStates& from);

  inline FrameTimeStates& operator=(const FrameTimeStates& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FrameTimeStates(FrameTimeStates&& from) noexcept
    : FrameTimeStates() {
    *this = ::std::move(from);
  }

  inline FrameTimeStates& operator=(FrameTimeStates&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FrameTimeStates& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrameTimeStates* internal_default_instance() {
    return reinterpret_cast<const FrameTimeStates*>(
               &_FrameTimeStates_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(FrameTimeStates* other);
  friend void swap(FrameTimeStates& a, FrameTimeStates& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FrameTimeStates* New() const PROTOBUF_FINAL { return New(NULL); }

  FrameTimeStates* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FrameTimeStates& from);
  void MergeFrom(const FrameTimeStates& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FrameTimeStates* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .DJIFRProto.Standard.FrameTimeState frameTimeStates = 1;
  int frametimestates_size() const;
  void clear_frametimestates();
  static const int kFrameTimeStatesFieldNumber = 1;
  const ::DJIFRProto::Standard::FrameTimeState& frametimestates(int index) const;
  ::DJIFRProto::Standard::FrameTimeState* mutable_frametimestates(int index);
  ::DJIFRProto::Standard::FrameTimeState* add_frametimestates();
  ::google::protobuf::RepeatedPtrField< ::DJIFRProto::Standard::FrameTimeState >*
      mutable_frametimestates();
  const ::google::protobuf::RepeatedPtrField< ::DJIFRProto::Standard::FrameTimeState >&
      frametimestates() const;

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.FrameTimeStates)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::DJIFRProto::Standard::FrameTimeState > frametimestates_;
  mutable int _cached_size_;
  friend struct ::protobuf_FrameTime_2fFRFrameTimeModelProto_2eproto::TableStruct;
  friend void ::protobuf_FrameTime_2fFRFrameTimeModelProto_2eproto::InitDefaultsFrameTimeStatesImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// FrameTimeState

// .DJIFRProto.Standard.FlightControllerState flightControllerState = 1;
inline bool FrameTimeState::has_flightcontrollerstate() const {
  return this != internal_default_instance() && flightcontrollerstate_ != NULL;
}
inline const ::DJIFRProto::Standard::FlightControllerState& FrameTimeState::flightcontrollerstate() const {
  const ::DJIFRProto::Standard::FlightControllerState* p = flightcontrollerstate_;
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FrameTimeState.flightControllerState)
  return p != NULL ? *p : *reinterpret_cast<const ::DJIFRProto::Standard::FlightControllerState*>(
      &::DJIFRProto::Standard::_FlightControllerState_default_instance_);
}
inline ::DJIFRProto::Standard::FlightControllerState* FrameTimeState::release_flightcontrollerstate() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.FrameTimeState.flightControllerState)
  
  ::DJIFRProto::Standard::FlightControllerState* temp = flightcontrollerstate_;
  flightcontrollerstate_ = NULL;
  return temp;
}
inline ::DJIFRProto::Standard::FlightControllerState* FrameTimeState::mutable_flightcontrollerstate() {
  
  if (flightcontrollerstate_ == NULL) {
    flightcontrollerstate_ = new ::DJIFRProto::Standard::FlightControllerState;
  }
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.FrameTimeState.flightControllerState)
  return flightcontrollerstate_;
}
inline void FrameTimeState::set_allocated_flightcontrollerstate(::DJIFRProto::Standard::FlightControllerState* flightcontrollerstate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(flightcontrollerstate_);
  }
  if (flightcontrollerstate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      flightcontrollerstate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, flightcontrollerstate, submessage_arena);
    }
    
  } else {
    
  }
  flightcontrollerstate_ = flightcontrollerstate;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.FrameTimeState.flightControllerState)
}

// .DJIFRProto.Standard.CameraState cameraState = 2;
inline bool FrameTimeState::has_camerastate() const {
  return this != internal_default_instance() && camerastate_ != NULL;
}
inline const ::DJIFRProto::Standard::CameraState& FrameTimeState::camerastate() const {
  const ::DJIFRProto::Standard::CameraState* p = camerastate_;
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FrameTimeState.cameraState)
  return p != NULL ? *p : *reinterpret_cast<const ::DJIFRProto::Standard::CameraState*>(
      &::DJIFRProto::Standard::_CameraState_default_instance_);
}
inline ::DJIFRProto::Standard::CameraState* FrameTimeState::release_camerastate() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.FrameTimeState.cameraState)
  
  ::DJIFRProto::Standard::CameraState* temp = camerastate_;
  camerastate_ = NULL;
  return temp;
}
inline ::DJIFRProto::Standard::CameraState* FrameTimeState::mutable_camerastate() {
  
  if (camerastate_ == NULL) {
    camerastate_ = new ::DJIFRProto::Standard::CameraState;
  }
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.FrameTimeState.cameraState)
  return camerastate_;
}
inline void FrameTimeState::set_allocated_camerastate(::DJIFRProto::Standard::CameraState* camerastate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(camerastate_);
  }
  if (camerastate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      camerastate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, camerastate, submessage_arena);
    }
    
  } else {
    
  }
  camerastate_ = camerastate;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.FrameTimeState.cameraState)
}

// .DJIFRProto.Standard.GimbalState gimbalState = 3;
inline bool FrameTimeState::has_gimbalstate() const {
  return this != internal_default_instance() && gimbalstate_ != NULL;
}
inline const ::DJIFRProto::Standard::GimbalState& FrameTimeState::gimbalstate() const {
  const ::DJIFRProto::Standard::GimbalState* p = gimbalstate_;
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FrameTimeState.gimbalState)
  return p != NULL ? *p : *reinterpret_cast<const ::DJIFRProto::Standard::GimbalState*>(
      &::DJIFRProto::Standard::_GimbalState_default_instance_);
}
inline ::DJIFRProto::Standard::GimbalState* FrameTimeState::release_gimbalstate() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.FrameTimeState.gimbalState)
  
  ::DJIFRProto::Standard::GimbalState* temp = gimbalstate_;
  gimbalstate_ = NULL;
  return temp;
}
inline ::DJIFRProto::Standard::GimbalState* FrameTimeState::mutable_gimbalstate() {
  
  if (gimbalstate_ == NULL) {
    gimbalstate_ = new ::DJIFRProto::Standard::GimbalState;
  }
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.FrameTimeState.gimbalState)
  return gimbalstate_;
}
inline void FrameTimeState::set_allocated_gimbalstate(::DJIFRProto::Standard::GimbalState* gimbalstate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(gimbalstate_);
  }
  if (gimbalstate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gimbalstate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gimbalstate, submessage_arena);
    }
    
  } else {
    
  }
  gimbalstate_ = gimbalstate;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.FrameTimeState.gimbalState)
}

// .DJIFRProto.Standard.RCHardwareState rcHardwareState = 4;
inline bool FrameTimeState::has_rchardwarestate() const {
  return this != internal_default_instance() && rchardwarestate_ != NULL;
}
inline const ::DJIFRProto::Standard::RCHardwareState& FrameTimeState::rchardwarestate() const {
  const ::DJIFRProto::Standard::RCHardwareState* p = rchardwarestate_;
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FrameTimeState.rcHardwareState)
  return p != NULL ? *p : *reinterpret_cast<const ::DJIFRProto::Standard::RCHardwareState*>(
      &::DJIFRProto::Standard::_RCHardwareState_default_instance_);
}
inline ::DJIFRProto::Standard::RCHardwareState* FrameTimeState::release_rchardwarestate() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.FrameTimeState.rcHardwareState)
  
  ::DJIFRProto::Standard::RCHardwareState* temp = rchardwarestate_;
  rchardwarestate_ = NULL;
  return temp;
}
inline ::DJIFRProto::Standard::RCHardwareState* FrameTimeState::mutable_rchardwarestate() {
  
  if (rchardwarestate_ == NULL) {
    rchardwarestate_ = new ::DJIFRProto::Standard::RCHardwareState;
  }
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.FrameTimeState.rcHardwareState)
  return rchardwarestate_;
}
inline void FrameTimeState::set_allocated_rchardwarestate(::DJIFRProto::Standard::RCHardwareState* rchardwarestate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rchardwarestate_);
  }
  if (rchardwarestate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rchardwarestate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rchardwarestate, submessage_arena);
    }
    
  } else {
    
  }
  rchardwarestate_ = rchardwarestate;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.FrameTimeState.rcHardwareState)
}

// .DJIFRProto.Standard.BatteryState batteryState = 5;
inline bool FrameTimeState::has_batterystate() const {
  return this != internal_default_instance() && batterystate_ != NULL;
}
inline const ::DJIFRProto::Standard::BatteryState& FrameTimeState::batterystate() const {
  const ::DJIFRProto::Standard::BatteryState* p = batterystate_;
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FrameTimeState.batteryState)
  return p != NULL ? *p : *reinterpret_cast<const ::DJIFRProto::Standard::BatteryState*>(
      &::DJIFRProto::Standard::_BatteryState_default_instance_);
}
inline ::DJIFRProto::Standard::BatteryState* FrameTimeState::release_batterystate() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.FrameTimeState.batteryState)
  
  ::DJIFRProto::Standard::BatteryState* temp = batterystate_;
  batterystate_ = NULL;
  return temp;
}
inline ::DJIFRProto::Standard::BatteryState* FrameTimeState::mutable_batterystate() {
  
  if (batterystate_ == NULL) {
    batterystate_ = new ::DJIFRProto::Standard::BatteryState;
  }
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.FrameTimeState.batteryState)
  return batterystate_;
}
inline void FrameTimeState::set_allocated_batterystate(::DJIFRProto::Standard::BatteryState* batterystate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(batterystate_);
  }
  if (batterystate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      batterystate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, batterystate, submessage_arena);
    }
    
  } else {
    
  }
  batterystate_ = batterystate;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.FrameTimeState.batteryState)
}

// .DJIFRProto.Standard.MobileRemoteControllerState mobileRemoteController = 6;
inline bool FrameTimeState::has_mobileremotecontroller() const {
  return this != internal_default_instance() && mobileremotecontroller_ != NULL;
}
inline const ::DJIFRProto::Standard::MobileRemoteControllerState& FrameTimeState::mobileremotecontroller() const {
  const ::DJIFRProto::Standard::MobileRemoteControllerState* p = mobileremotecontroller_;
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FrameTimeState.mobileRemoteController)
  return p != NULL ? *p : *reinterpret_cast<const ::DJIFRProto::Standard::MobileRemoteControllerState*>(
      &::DJIFRProto::Standard::_MobileRemoteControllerState_default_instance_);
}
inline ::DJIFRProto::Standard::MobileRemoteControllerState* FrameTimeState::release_mobileremotecontroller() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.FrameTimeState.mobileRemoteController)
  
  ::DJIFRProto::Standard::MobileRemoteControllerState* temp = mobileremotecontroller_;
  mobileremotecontroller_ = NULL;
  return temp;
}
inline ::DJIFRProto::Standard::MobileRemoteControllerState* FrameTimeState::mutable_mobileremotecontroller() {
  
  if (mobileremotecontroller_ == NULL) {
    mobileremotecontroller_ = new ::DJIFRProto::Standard::MobileRemoteControllerState;
  }
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.FrameTimeState.mobileRemoteController)
  return mobileremotecontroller_;
}
inline void FrameTimeState::set_allocated_mobileremotecontroller(::DJIFRProto::Standard::MobileRemoteControllerState* mobileremotecontroller) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(mobileremotecontroller_);
  }
  if (mobileremotecontroller) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mobileremotecontroller = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mobileremotecontroller, submessage_arena);
    }
    
  } else {
    
  }
  mobileremotecontroller_ = mobileremotecontroller;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.FrameTimeState.mobileRemoteController)
}

// .DJIFRProto.Standard.AirLinkState airLinkState = 8;
inline bool FrameTimeState::has_airlinkstate() const {
  return this != internal_default_instance() && airlinkstate_ != NULL;
}
inline const ::DJIFRProto::Standard::AirLinkState& FrameTimeState::airlinkstate() const {
  const ::DJIFRProto::Standard::AirLinkState* p = airlinkstate_;
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FrameTimeState.airLinkState)
  return p != NULL ? *p : *reinterpret_cast<const ::DJIFRProto::Standard::AirLinkState*>(
      &::DJIFRProto::Standard::_AirLinkState_default_instance_);
}
inline ::DJIFRProto::Standard::AirLinkState* FrameTimeState::release_airlinkstate() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.FrameTimeState.airLinkState)
  
  ::DJIFRProto::Standard::AirLinkState* temp = airlinkstate_;
  airlinkstate_ = NULL;
  return temp;
}
inline ::DJIFRProto::Standard::AirLinkState* FrameTimeState::mutable_airlinkstate() {
  
  if (airlinkstate_ == NULL) {
    airlinkstate_ = new ::DJIFRProto::Standard::AirLinkState;
  }
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.FrameTimeState.airLinkState)
  return airlinkstate_;
}
inline void FrameTimeState::set_allocated_airlinkstate(::DJIFRProto::Standard::AirLinkState* airlinkstate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(airlinkstate_);
  }
  if (airlinkstate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      airlinkstate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, airlinkstate, submessage_arena);
    }
    
  } else {
    
  }
  airlinkstate_ = airlinkstate;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.FrameTimeState.airLinkState)
}

// .DJIFRProto.Standard.GOBusinessData goBusinessData = 9;
inline bool FrameTimeState::has_gobusinessdata() const {
  return this != internal_default_instance() && gobusinessdata_ != NULL;
}
inline const ::DJIFRProto::Standard::GOBusinessData& FrameTimeState::gobusinessdata() const {
  const ::DJIFRProto::Standard::GOBusinessData* p = gobusinessdata_;
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FrameTimeState.goBusinessData)
  return p != NULL ? *p : *reinterpret_cast<const ::DJIFRProto::Standard::GOBusinessData*>(
      &::DJIFRProto::Standard::_GOBusinessData_default_instance_);
}
inline ::DJIFRProto::Standard::GOBusinessData* FrameTimeState::release_gobusinessdata() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.FrameTimeState.goBusinessData)
  
  ::DJIFRProto::Standard::GOBusinessData* temp = gobusinessdata_;
  gobusinessdata_ = NULL;
  return temp;
}
inline ::DJIFRProto::Standard::GOBusinessData* FrameTimeState::mutable_gobusinessdata() {
  
  if (gobusinessdata_ == NULL) {
    gobusinessdata_ = new ::DJIFRProto::Standard::GOBusinessData;
  }
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.FrameTimeState.goBusinessData)
  return gobusinessdata_;
}
inline void FrameTimeState::set_allocated_gobusinessdata(::DJIFRProto::Standard::GOBusinessData* gobusinessdata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(gobusinessdata_);
  }
  if (gobusinessdata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gobusinessdata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gobusinessdata, submessage_arena);
    }
    
  } else {
    
  }
  gobusinessdata_ = gobusinessdata;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.FrameTimeState.goBusinessData)
}

// .DJIFRProto.Standard.MobileDeviceState mobileDeviceState = 10;
inline bool FrameTimeState::has_mobiledevicestate() const {
  return this != internal_default_instance() && mobiledevicestate_ != NULL;
}
inline const ::DJIFRProto::Standard::MobileDeviceState& FrameTimeState::mobiledevicestate() const {
  const ::DJIFRProto::Standard::MobileDeviceState* p = mobiledevicestate_;
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FrameTimeState.mobileDeviceState)
  return p != NULL ? *p : *reinterpret_cast<const ::DJIFRProto::Standard::MobileDeviceState*>(
      &::DJIFRProto::Standard::_MobileDeviceState_default_instance_);
}
inline ::DJIFRProto::Standard::MobileDeviceState* FrameTimeState::release_mobiledevicestate() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.FrameTimeState.mobileDeviceState)
  
  ::DJIFRProto::Standard::MobileDeviceState* temp = mobiledevicestate_;
  mobiledevicestate_ = NULL;
  return temp;
}
inline ::DJIFRProto::Standard::MobileDeviceState* FrameTimeState::mutable_mobiledevicestate() {
  
  if (mobiledevicestate_ == NULL) {
    mobiledevicestate_ = new ::DJIFRProto::Standard::MobileDeviceState;
  }
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.FrameTimeState.mobileDeviceState)
  return mobiledevicestate_;
}
inline void FrameTimeState::set_allocated_mobiledevicestate(::DJIFRProto::Standard::MobileDeviceState* mobiledevicestate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(mobiledevicestate_);
  }
  if (mobiledevicestate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mobiledevicestate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mobiledevicestate, submessage_arena);
    }
    
  } else {
    
  }
  mobiledevicestate_ = mobiledevicestate;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.FrameTimeState.mobileDeviceState)
}

// .DJIFRProto.Standard.VisionState visionState = 11;
inline bool FrameTimeState::has_visionstate() const {
  return this != internal_default_instance() && visionstate_ != NULL;
}
inline const ::DJIFRProto::Standard::VisionState& FrameTimeState::visionstate() const {
  const ::DJIFRProto::Standard::VisionState* p = visionstate_;
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FrameTimeState.visionState)
  return p != NULL ? *p : *reinterpret_cast<const ::DJIFRProto::Standard::VisionState*>(
      &::DJIFRProto::Standard::_VisionState_default_instance_);
}
inline ::DJIFRProto::Standard::VisionState* FrameTimeState::release_visionstate() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.FrameTimeState.visionState)
  
  ::DJIFRProto::Standard::VisionState* temp = visionstate_;
  visionstate_ = NULL;
  return temp;
}
inline ::DJIFRProto::Standard::VisionState* FrameTimeState::mutable_visionstate() {
  
  if (visionstate_ == NULL) {
    visionstate_ = new ::DJIFRProto::Standard::VisionState;
  }
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.FrameTimeState.visionState)
  return visionstate_;
}
inline void FrameTimeState::set_allocated_visionstate(::DJIFRProto::Standard::VisionState* visionstate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(visionstate_);
  }
  if (visionstate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      visionstate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, visionstate, submessage_arena);
    }
    
  } else {
    
  }
  visionstate_ = visionstate;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.FrameTimeState.visionState)
}

// map<int32, .DJIFRProto.Standard.GimbalState> gimbalsState = 12;
inline int FrameTimeState::gimbalsstate_size() const {
  return gimbalsstate_.size();
}
inline const ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::GimbalState >&
FrameTimeState::gimbalsstate() const {
  // @@protoc_insertion_point(field_map:DJIFRProto.Standard.FrameTimeState.gimbalsState)
  return gimbalsstate_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::GimbalState >*
FrameTimeState::mutable_gimbalsstate() {
  // @@protoc_insertion_point(field_mutable_map:DJIFRProto.Standard.FrameTimeState.gimbalsState)
  return gimbalsstate_.MutableMap();
}

// map<int32, .DJIFRProto.Standard.CameraState> camerasState = 13;
inline int FrameTimeState::camerasstate_size() const {
  return camerasstate_.size();
}
inline const ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::CameraState >&
FrameTimeState::camerasstate() const {
  // @@protoc_insertion_point(field_map:DJIFRProto.Standard.FrameTimeState.camerasState)
  return camerasstate_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::CameraState >*
FrameTimeState::mutable_camerasstate() {
  // @@protoc_insertion_point(field_mutable_map:DJIFRProto.Standard.FrameTimeState.camerasState)
  return camerasstate_.MutableMap();
}

// map<int32, .DJIFRProto.Standard.BatteryState> batteriesState = 14;
inline int FrameTimeState::batteriesstate_size() const {
  return batteriesstate_.size();
}
inline const ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::BatteryState >&
FrameTimeState::batteriesstate() const {
  // @@protoc_insertion_point(field_map:DJIFRProto.Standard.FrameTimeState.batteriesState)
  return batteriesstate_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::BatteryState >*
FrameTimeState::mutable_batteriesstate() {
  // @@protoc_insertion_point(field_mutable_map:DJIFRProto.Standard.FrameTimeState.batteriesState)
  return batteriesstate_.MutableMap();
}

// -------------------------------------------------------------------

// FrameTimeStates

// repeated .DJIFRProto.Standard.FrameTimeState frameTimeStates = 1;
inline int FrameTimeStates::frametimestates_size() const {
  return frametimestates_.size();
}
inline void FrameTimeStates::clear_frametimestates() {
  frametimestates_.Clear();
}
inline const ::DJIFRProto::Standard::FrameTimeState& FrameTimeStates::frametimestates(int index) const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FrameTimeStates.frameTimeStates)
  return frametimestates_.Get(index);
}
inline ::DJIFRProto::Standard::FrameTimeState* FrameTimeStates::mutable_frametimestates(int index) {
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.FrameTimeStates.frameTimeStates)
  return frametimestates_.Mutable(index);
}
inline ::DJIFRProto::Standard::FrameTimeState* FrameTimeStates::add_frametimestates() {
  // @@protoc_insertion_point(field_add:DJIFRProto.Standard.FrameTimeStates.frameTimeStates)
  return frametimestates_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::DJIFRProto::Standard::FrameTimeState >*
FrameTimeStates::mutable_frametimestates() {
  // @@protoc_insertion_point(field_mutable_list:DJIFRProto.Standard.FrameTimeStates.frameTimeStates)
  return &frametimestates_;
}
inline const ::google::protobuf::RepeatedPtrField< ::DJIFRProto::Standard::FrameTimeState >&
FrameTimeStates::frametimestates() const {
  // @@protoc_insertion_point(field_list:DJIFRProto.Standard.FrameTimeStates.frameTimeStates)
  return frametimestates_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Standard
}  // namespace DJIFRProto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_FrameTime_2fFRFrameTimeModelProto_2eproto__INCLUDED
