// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Gimbal/FRGimbalModelProto.proto

#ifndef PROTOBUF_Gimbal_2fFRGimbalModelProto_2eproto__INCLUDED
#define PROTOBUF_Gimbal_2fFRGimbalModelProto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Common/FRCommonModelProto.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_Gimbal_2fFRGimbalModelProto_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsGimbalStateImpl();
void InitDefaultsGimbalState();
inline void InitDefaults() {
  InitDefaultsGimbalState();
}
}  // namespace protobuf_Gimbal_2fFRGimbalModelProto_2eproto
namespace DJIFRProto {
namespace Standard {
class GimbalState;
class GimbalStateDefaultTypeInternal;
extern GimbalStateDefaultTypeInternal _GimbalState_default_instance_;
}  // namespace Standard
}  // namespace DJIFRProto
namespace DJIFRProto {
namespace Standard {

enum GimbalMode {
  Free = 0,
  FPV = 1,
  YawFollow = 2,
  GimbalMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GimbalMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GimbalMode_IsValid(int value);
const GimbalMode GimbalMode_MIN = Free;
const GimbalMode GimbalMode_MAX = YawFollow;
const int GimbalMode_ARRAYSIZE = GimbalMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* GimbalMode_descriptor();
inline const ::std::string& GimbalMode_Name(GimbalMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    GimbalMode_descriptor(), value);
}
inline bool GimbalMode_Parse(
    const ::std::string& name, GimbalMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GimbalMode>(
    GimbalMode_descriptor(), name, value);
}
// ===================================================================

class GimbalState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.GimbalState) */ {
 public:
  GimbalState();
  virtual ~GimbalState();

  GimbalState(const GimbalState& from);

  inline GimbalState& operator=(const GimbalState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GimbalState(GimbalState&& from) noexcept
    : GimbalState() {
    *this = ::std::move(from);
  }

  inline GimbalState& operator=(GimbalState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GimbalState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GimbalState* internal_default_instance() {
    return reinterpret_cast<const GimbalState*>(
               &_GimbalState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(GimbalState* other);
  friend void swap(GimbalState& a, GimbalState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GimbalState* New() const PROTOBUF_FINAL { return New(NULL); }

  GimbalState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GimbalState& from);
  void MergeFrom(const GimbalState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GimbalState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .DJIFRProto.Standard.Attitude atitude = 1;
  bool has_atitude() const;
  void clear_atitude();
  static const int kAtitudeFieldNumber = 1;
  const ::DJIFRProto::Standard::Attitude& atitude() const;
  ::DJIFRProto::Standard::Attitude* release_atitude();
  ::DJIFRProto::Standard::Attitude* mutable_atitude();
  void set_allocated_atitude(::DJIFRProto::Standard::Attitude* atitude);

  // float fineTunedRoll = 2;
  void clear_finetunedroll();
  static const int kFineTunedRollFieldNumber = 2;
  float finetunedroll() const;
  void set_finetunedroll(float value);

  // float fineTunedPitch = 3;
  void clear_finetunedpitch();
  static const int kFineTunedPitchFieldNumber = 3;
  float finetunedpitch() const;
  void set_finetunedpitch(float value);

  // float fineTunedYaw = 4;
  void clear_finetunedyaw();
  static const int kFineTunedYawFieldNumber = 4;
  float finetunedyaw() const;
  void set_finetunedyaw(float value);

  // bool isRollAtStop = 5;
  void clear_isrollatstop();
  static const int kIsRollAtStopFieldNumber = 5;
  bool isrollatstop() const;
  void set_isrollatstop(bool value);

  // bool isYawAtStop = 6;
  void clear_isyawatstop();
  static const int kIsYawAtStopFieldNumber = 6;
  bool isyawatstop() const;
  void set_isyawatstop(bool value);

  // bool isPitchAtStop = 7;
  void clear_ispitchatstop();
  static const int kIsPitchAtStopFieldNumber = 7;
  bool ispitchatstop() const;
  void set_ispitchatstop(bool value);

  // double yawRelativeToAircraftHeading = 8;
  void clear_yawrelativetoaircraftheading();
  static const int kYawRelativeToAircraftHeadingFieldNumber = 8;
  double yawrelativetoaircraftheading() const;
  void set_yawrelativetoaircraftheading(double value);

  // .DJIFRProto.Standard.GimbalMode mode = 9;
  void clear_mode();
  static const int kModeFieldNumber = 9;
  ::DJIFRProto::Standard::GimbalMode mode() const;
  void set_mode(::DJIFRProto::Standard::GimbalMode value);

  // int32 index = 10;
  void clear_index();
  static const int kIndexFieldNumber = 10;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.GimbalState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::DJIFRProto::Standard::Attitude* atitude_;
  float finetunedroll_;
  float finetunedpitch_;
  float finetunedyaw_;
  bool isrollatstop_;
  bool isyawatstop_;
  bool ispitchatstop_;
  double yawrelativetoaircraftheading_;
  int mode_;
  ::google::protobuf::int32 index_;
  mutable int _cached_size_;
  friend struct ::protobuf_Gimbal_2fFRGimbalModelProto_2eproto::TableStruct;
  friend void ::protobuf_Gimbal_2fFRGimbalModelProto_2eproto::InitDefaultsGimbalStateImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GimbalState

// .DJIFRProto.Standard.Attitude atitude = 1;
inline bool GimbalState::has_atitude() const {
  return this != internal_default_instance() && atitude_ != NULL;
}
inline const ::DJIFRProto::Standard::Attitude& GimbalState::atitude() const {
  const ::DJIFRProto::Standard::Attitude* p = atitude_;
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.GimbalState.atitude)
  return p != NULL ? *p : *reinterpret_cast<const ::DJIFRProto::Standard::Attitude*>(
      &::DJIFRProto::Standard::_Attitude_default_instance_);
}
inline ::DJIFRProto::Standard::Attitude* GimbalState::release_atitude() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.GimbalState.atitude)
  
  ::DJIFRProto::Standard::Attitude* temp = atitude_;
  atitude_ = NULL;
  return temp;
}
inline ::DJIFRProto::Standard::Attitude* GimbalState::mutable_atitude() {
  
  if (atitude_ == NULL) {
    atitude_ = new ::DJIFRProto::Standard::Attitude;
  }
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.GimbalState.atitude)
  return atitude_;
}
inline void GimbalState::set_allocated_atitude(::DJIFRProto::Standard::Attitude* atitude) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(atitude_);
  }
  if (atitude) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      atitude = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, atitude, submessage_arena);
    }
    
  } else {
    
  }
  atitude_ = atitude;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.GimbalState.atitude)
}

// float fineTunedRoll = 2;
inline void GimbalState::clear_finetunedroll() {
  finetunedroll_ = 0;
}
inline float GimbalState::finetunedroll() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.GimbalState.fineTunedRoll)
  return finetunedroll_;
}
inline void GimbalState::set_finetunedroll(float value) {
  
  finetunedroll_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.GimbalState.fineTunedRoll)
}

// float fineTunedPitch = 3;
inline void GimbalState::clear_finetunedpitch() {
  finetunedpitch_ = 0;
}
inline float GimbalState::finetunedpitch() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.GimbalState.fineTunedPitch)
  return finetunedpitch_;
}
inline void GimbalState::set_finetunedpitch(float value) {
  
  finetunedpitch_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.GimbalState.fineTunedPitch)
}

// float fineTunedYaw = 4;
inline void GimbalState::clear_finetunedyaw() {
  finetunedyaw_ = 0;
}
inline float GimbalState::finetunedyaw() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.GimbalState.fineTunedYaw)
  return finetunedyaw_;
}
inline void GimbalState::set_finetunedyaw(float value) {
  
  finetunedyaw_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.GimbalState.fineTunedYaw)
}

// bool isRollAtStop = 5;
inline void GimbalState::clear_isrollatstop() {
  isrollatstop_ = false;
}
inline bool GimbalState::isrollatstop() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.GimbalState.isRollAtStop)
  return isrollatstop_;
}
inline void GimbalState::set_isrollatstop(bool value) {
  
  isrollatstop_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.GimbalState.isRollAtStop)
}

// bool isYawAtStop = 6;
inline void GimbalState::clear_isyawatstop() {
  isyawatstop_ = false;
}
inline bool GimbalState::isyawatstop() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.GimbalState.isYawAtStop)
  return isyawatstop_;
}
inline void GimbalState::set_isyawatstop(bool value) {
  
  isyawatstop_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.GimbalState.isYawAtStop)
}

// bool isPitchAtStop = 7;
inline void GimbalState::clear_ispitchatstop() {
  ispitchatstop_ = false;
}
inline bool GimbalState::ispitchatstop() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.GimbalState.isPitchAtStop)
  return ispitchatstop_;
}
inline void GimbalState::set_ispitchatstop(bool value) {
  
  ispitchatstop_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.GimbalState.isPitchAtStop)
}

// double yawRelativeToAircraftHeading = 8;
inline void GimbalState::clear_yawrelativetoaircraftheading() {
  yawrelativetoaircraftheading_ = 0;
}
inline double GimbalState::yawrelativetoaircraftheading() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.GimbalState.yawRelativeToAircraftHeading)
  return yawrelativetoaircraftheading_;
}
inline void GimbalState::set_yawrelativetoaircraftheading(double value) {
  
  yawrelativetoaircraftheading_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.GimbalState.yawRelativeToAircraftHeading)
}

// .DJIFRProto.Standard.GimbalMode mode = 9;
inline void GimbalState::clear_mode() {
  mode_ = 0;
}
inline ::DJIFRProto::Standard::GimbalMode GimbalState::mode() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.GimbalState.mode)
  return static_cast< ::DJIFRProto::Standard::GimbalMode >(mode_);
}
inline void GimbalState::set_mode(::DJIFRProto::Standard::GimbalMode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.GimbalState.mode)
}

// int32 index = 10;
inline void GimbalState::clear_index() {
  index_ = 0;
}
inline ::google::protobuf::int32 GimbalState::index() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.GimbalState.index)
  return index_;
}
inline void GimbalState::set_index(::google::protobuf::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.GimbalState.index)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Standard
}  // namespace DJIFRProto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::DJIFRProto::Standard::GimbalMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DJIFRProto::Standard::GimbalMode>() {
  return ::DJIFRProto::Standard::GimbalMode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Gimbal_2fFRGimbalModelProto_2eproto__INCLUDED
