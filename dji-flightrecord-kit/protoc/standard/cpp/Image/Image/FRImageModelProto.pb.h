// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Image/FRImageModelProto.proto

#ifndef PROTOBUF_Image_2fFRImageModelProto_2eproto__INCLUDED
#define PROTOBUF_Image_2fFRImageModelProto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Common/FRCommonModelProto.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_Image_2fFRImageModelProto_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsImageDataImpl();
void InitDefaultsImageData();
void InitDefaultsImageDatasImpl();
void InitDefaultsImageDatas();
inline void InitDefaults() {
  InitDefaultsImageData();
  InitDefaultsImageDatas();
}
}  // namespace protobuf_Image_2fFRImageModelProto_2eproto
namespace DJIFRProto {
namespace Standard {
class ImageData;
class ImageDataDefaultTypeInternal;
extern ImageDataDefaultTypeInternal _ImageData_default_instance_;
class ImageDatas;
class ImageDatasDefaultTypeInternal;
extern ImageDatasDefaultTypeInternal _ImageDatas_default_instance_;
}  // namespace Standard
}  // namespace DJIFRProto
namespace DJIFRProto {
namespace Standard {

// ===================================================================

class ImageData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.ImageData) */ {
 public:
  ImageData();
  virtual ~ImageData();

  ImageData(const ImageData& from);

  inline ImageData& operator=(const ImageData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImageData(ImageData&& from) noexcept
    : ImageData() {
    *this = ::std::move(from);
  }

  inline ImageData& operator=(ImageData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageData* internal_default_instance() {
    return reinterpret_cast<const ImageData*>(
               &_ImageData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ImageData* other);
  friend void swap(ImageData& a, ImageData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImageData* New() const PROTOBUF_FINAL { return New(NULL); }

  ImageData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ImageData& from);
  void MergeFrom(const ImageData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ImageData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes previewImage = 2;
  void clear_previewimage();
  static const int kPreviewImageFieldNumber = 2;
  const ::std::string& previewimage() const;
  void set_previewimage(const ::std::string& value);
  #if LANG_CXX11
  void set_previewimage(::std::string&& value);
  #endif
  void set_previewimage(const char* value);
  void set_previewimage(const void* value, size_t size);
  ::std::string* mutable_previewimage();
  ::std::string* release_previewimage();
  void set_allocated_previewimage(::std::string* previewimage);

  // bytes thumbnail = 3;
  void clear_thumbnail();
  static const int kThumbnailFieldNumber = 3;
  const ::std::string& thumbnail() const;
  void set_thumbnail(const ::std::string& value);
  #if LANG_CXX11
  void set_thumbnail(::std::string&& value);
  #endif
  void set_thumbnail(const char* value);
  void set_thumbnail(const void* value, size_t size);
  ::std::string* mutable_thumbnail();
  ::std::string* release_thumbnail();
  void set_allocated_thumbnail(::std::string* thumbnail);

  // .DJIFRProto.Standard.LocationCoordinate2D coordinate = 1;
  bool has_coordinate() const;
  void clear_coordinate();
  static const int kCoordinateFieldNumber = 1;
  const ::DJIFRProto::Standard::LocationCoordinate2D& coordinate() const;
  ::DJIFRProto::Standard::LocationCoordinate2D* release_coordinate();
  ::DJIFRProto::Standard::LocationCoordinate2D* mutable_coordinate();
  void set_allocated_coordinate(::DJIFRProto::Standard::LocationCoordinate2D* coordinate);

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.ImageData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr previewimage_;
  ::google::protobuf::internal::ArenaStringPtr thumbnail_;
  ::DJIFRProto::Standard::LocationCoordinate2D* coordinate_;
  mutable int _cached_size_;
  friend struct ::protobuf_Image_2fFRImageModelProto_2eproto::TableStruct;
  friend void ::protobuf_Image_2fFRImageModelProto_2eproto::InitDefaultsImageDataImpl();
};
// -------------------------------------------------------------------

class ImageDatas : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.ImageDatas) */ {
 public:
  ImageDatas();
  virtual ~ImageDatas();

  ImageDatas(const ImageDatas& from);

  inline ImageDatas& operator=(const ImageDatas& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImageDatas(ImageDatas&& from) noexcept
    : ImageDatas() {
    *this = ::std::move(from);
  }

  inline ImageDatas& operator=(ImageDatas&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageDatas& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageDatas* internal_default_instance() {
    return reinterpret_cast<const ImageDatas*>(
               &_ImageDatas_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ImageDatas* other);
  friend void swap(ImageDatas& a, ImageDatas& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImageDatas* New() const PROTOBUF_FINAL { return New(NULL); }

  ImageDatas* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ImageDatas& from);
  void MergeFrom(const ImageDatas& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ImageDatas* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .DJIFRProto.Standard.ImageData images = 1;
  int images_size() const;
  void clear_images();
  static const int kImagesFieldNumber = 1;
  const ::DJIFRProto::Standard::ImageData& images(int index) const;
  ::DJIFRProto::Standard::ImageData* mutable_images(int index);
  ::DJIFRProto::Standard::ImageData* add_images();
  ::google::protobuf::RepeatedPtrField< ::DJIFRProto::Standard::ImageData >*
      mutable_images();
  const ::google::protobuf::RepeatedPtrField< ::DJIFRProto::Standard::ImageData >&
      images() const;

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.ImageDatas)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::DJIFRProto::Standard::ImageData > images_;
  mutable int _cached_size_;
  friend struct ::protobuf_Image_2fFRImageModelProto_2eproto::TableStruct;
  friend void ::protobuf_Image_2fFRImageModelProto_2eproto::InitDefaultsImageDatasImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ImageData

// .DJIFRProto.Standard.LocationCoordinate2D coordinate = 1;
inline bool ImageData::has_coordinate() const {
  return this != internal_default_instance() && coordinate_ != NULL;
}
inline const ::DJIFRProto::Standard::LocationCoordinate2D& ImageData::coordinate() const {
  const ::DJIFRProto::Standard::LocationCoordinate2D* p = coordinate_;
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.ImageData.coordinate)
  return p != NULL ? *p : *reinterpret_cast<const ::DJIFRProto::Standard::LocationCoordinate2D*>(
      &::DJIFRProto::Standard::_LocationCoordinate2D_default_instance_);
}
inline ::DJIFRProto::Standard::LocationCoordinate2D* ImageData::release_coordinate() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.ImageData.coordinate)
  
  ::DJIFRProto::Standard::LocationCoordinate2D* temp = coordinate_;
  coordinate_ = NULL;
  return temp;
}
inline ::DJIFRProto::Standard::LocationCoordinate2D* ImageData::mutable_coordinate() {
  
  if (coordinate_ == NULL) {
    coordinate_ = new ::DJIFRProto::Standard::LocationCoordinate2D;
  }
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.ImageData.coordinate)
  return coordinate_;
}
inline void ImageData::set_allocated_coordinate(::DJIFRProto::Standard::LocationCoordinate2D* coordinate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(coordinate_);
  }
  if (coordinate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      coordinate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, coordinate, submessage_arena);
    }
    
  } else {
    
  }
  coordinate_ = coordinate;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.ImageData.coordinate)
}

// bytes previewImage = 2;
inline void ImageData::clear_previewimage() {
  previewimage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImageData::previewimage() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.ImageData.previewImage)
  return previewimage_.GetNoArena();
}
inline void ImageData::set_previewimage(const ::std::string& value) {
  
  previewimage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.ImageData.previewImage)
}
#if LANG_CXX11
inline void ImageData::set_previewimage(::std::string&& value) {
  
  previewimage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DJIFRProto.Standard.ImageData.previewImage)
}
#endif
inline void ImageData::set_previewimage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  previewimage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DJIFRProto.Standard.ImageData.previewImage)
}
inline void ImageData::set_previewimage(const void* value, size_t size) {
  
  previewimage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DJIFRProto.Standard.ImageData.previewImage)
}
inline ::std::string* ImageData::mutable_previewimage() {
  
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.ImageData.previewImage)
  return previewimage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageData::release_previewimage() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.ImageData.previewImage)
  
  return previewimage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageData::set_allocated_previewimage(::std::string* previewimage) {
  if (previewimage != NULL) {
    
  } else {
    
  }
  previewimage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), previewimage);
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.ImageData.previewImage)
}

// bytes thumbnail = 3;
inline void ImageData::clear_thumbnail() {
  thumbnail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImageData::thumbnail() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.ImageData.thumbnail)
  return thumbnail_.GetNoArena();
}
inline void ImageData::set_thumbnail(const ::std::string& value) {
  
  thumbnail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.ImageData.thumbnail)
}
#if LANG_CXX11
inline void ImageData::set_thumbnail(::std::string&& value) {
  
  thumbnail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DJIFRProto.Standard.ImageData.thumbnail)
}
#endif
inline void ImageData::set_thumbnail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  thumbnail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DJIFRProto.Standard.ImageData.thumbnail)
}
inline void ImageData::set_thumbnail(const void* value, size_t size) {
  
  thumbnail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DJIFRProto.Standard.ImageData.thumbnail)
}
inline ::std::string* ImageData::mutable_thumbnail() {
  
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.ImageData.thumbnail)
  return thumbnail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageData::release_thumbnail() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.ImageData.thumbnail)
  
  return thumbnail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageData::set_allocated_thumbnail(::std::string* thumbnail) {
  if (thumbnail != NULL) {
    
  } else {
    
  }
  thumbnail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thumbnail);
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.ImageData.thumbnail)
}

// -------------------------------------------------------------------

// ImageDatas

// repeated .DJIFRProto.Standard.ImageData images = 1;
inline int ImageDatas::images_size() const {
  return images_.size();
}
inline void ImageDatas::clear_images() {
  images_.Clear();
}
inline const ::DJIFRProto::Standard::ImageData& ImageDatas::images(int index) const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.ImageDatas.images)
  return images_.Get(index);
}
inline ::DJIFRProto::Standard::ImageData* ImageDatas::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.ImageDatas.images)
  return images_.Mutable(index);
}
inline ::DJIFRProto::Standard::ImageData* ImageDatas::add_images() {
  // @@protoc_insertion_point(field_add:DJIFRProto.Standard.ImageDatas.images)
  return images_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::DJIFRProto::Standard::ImageData >*
ImageDatas::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:DJIFRProto.Standard.ImageDatas.images)
  return &images_;
}
inline const ::google::protobuf::RepeatedPtrField< ::DJIFRProto::Standard::ImageData >&
ImageDatas::images() const {
  // @@protoc_insertion_point(field_list:DJIFRProto.Standard.ImageDatas.images)
  return images_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Standard
}  // namespace DJIFRProto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Image_2fFRImageModelProto_2eproto__INCLUDED
