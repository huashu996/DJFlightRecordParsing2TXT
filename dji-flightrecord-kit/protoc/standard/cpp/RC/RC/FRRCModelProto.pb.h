// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RC/FRRCModelProto.proto

#ifndef PROTOBUF_RC_2fFRRCModelProto_2eproto__INCLUDED
#define PROTOBUF_RC_2fFRRCModelProto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Common/FRCommonModelProto.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_RC_2fFRRCModelProto_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsRCFlightModelImpl();
void InitDefaultsRCFlightModel();
void InitDefaultsStickImpl();
void InitDefaultsStick();
void InitDefaultsRCRightWheelImpl();
void InitDefaultsRCRightWheel();
void InitDefaultsRCButtonImpl();
void InitDefaultsRCButton();
void InitDefaultsRCAircraftMappingImpl();
void InitDefaultsRCAircraftMapping();
void InitDefaultsRCGPSTimeImpl();
void InitDefaultsRCGPSTime();
void InitDefaultsRCGPSDataImpl();
void InitDefaultsRCGPSData();
void InitDefaultsRCHardwareStateImpl();
void InitDefaultsRCHardwareState();
inline void InitDefaults() {
  InitDefaultsRCFlightModel();
  InitDefaultsStick();
  InitDefaultsRCRightWheel();
  InitDefaultsRCButton();
  InitDefaultsRCAircraftMapping();
  InitDefaultsRCGPSTime();
  InitDefaultsRCGPSData();
  InitDefaultsRCHardwareState();
}
}  // namespace protobuf_RC_2fFRRCModelProto_2eproto
namespace DJIFRProto {
namespace Standard {
class RCAircraftMapping;
class RCAircraftMappingDefaultTypeInternal;
extern RCAircraftMappingDefaultTypeInternal _RCAircraftMapping_default_instance_;
class RCButton;
class RCButtonDefaultTypeInternal;
extern RCButtonDefaultTypeInternal _RCButton_default_instance_;
class RCFlightModel;
class RCFlightModelDefaultTypeInternal;
extern RCFlightModelDefaultTypeInternal _RCFlightModel_default_instance_;
class RCGPSData;
class RCGPSDataDefaultTypeInternal;
extern RCGPSDataDefaultTypeInternal _RCGPSData_default_instance_;
class RCGPSTime;
class RCGPSTimeDefaultTypeInternal;
extern RCGPSTimeDefaultTypeInternal _RCGPSTime_default_instance_;
class RCHardwareState;
class RCHardwareStateDefaultTypeInternal;
extern RCHardwareStateDefaultTypeInternal _RCHardwareState_default_instance_;
class RCRightWheel;
class RCRightWheelDefaultTypeInternal;
extern RCRightWheelDefaultTypeInternal _RCRightWheel_default_instance_;
class Stick;
class StickDefaultTypeInternal;
extern StickDefaultTypeInternal _Stick_default_instance_;
}  // namespace Standard
}  // namespace DJIFRProto
namespace DJIFRProto {
namespace Standard {

enum RCFlightModel_Switch {
  RCFlightModel_Switch_One = 0,
  RCFlightModel_Switch_Two = 1,
  RCFlightModel_Switch_Three = 2,
  RCFlightModel_Switch_Unknown = 3,
  RCFlightModel_Switch_RCFlightModel_Switch_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RCFlightModel_Switch_RCFlightModel_Switch_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RCFlightModel_Switch_IsValid(int value);
const RCFlightModel_Switch RCFlightModel_Switch_Switch_MIN = RCFlightModel_Switch_One;
const RCFlightModel_Switch RCFlightModel_Switch_Switch_MAX = RCFlightModel_Switch_Unknown;
const int RCFlightModel_Switch_Switch_ARRAYSIZE = RCFlightModel_Switch_Switch_MAX + 1;

const ::google::protobuf::EnumDescriptor* RCFlightModel_Switch_descriptor();
inline const ::std::string& RCFlightModel_Switch_Name(RCFlightModel_Switch value) {
  return ::google::protobuf::internal::NameOfEnum(
    RCFlightModel_Switch_descriptor(), value);
}
inline bool RCFlightModel_Switch_Parse(
    const ::std::string& name, RCFlightModel_Switch* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RCFlightModel_Switch>(
    RCFlightModel_Switch_descriptor(), name, value);
}
enum RCAircraftMapping_Style {
  RCAircraftMapping_Style_Style1 = 0,
  RCAircraftMapping_Style_Style2 = 1,
  RCAircraftMapping_Style_Style3 = 2,
  RCAircraftMapping_Style_StyleCustom = 3,
  RCAircraftMapping_Style_Unknown = 4,
  RCAircraftMapping_Style_RCAircraftMapping_Style_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RCAircraftMapping_Style_RCAircraftMapping_Style_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RCAircraftMapping_Style_IsValid(int value);
const RCAircraftMapping_Style RCAircraftMapping_Style_Style_MIN = RCAircraftMapping_Style_Style1;
const RCAircraftMapping_Style RCAircraftMapping_Style_Style_MAX = RCAircraftMapping_Style_Unknown;
const int RCAircraftMapping_Style_Style_ARRAYSIZE = RCAircraftMapping_Style_Style_MAX + 1;

const ::google::protobuf::EnumDescriptor* RCAircraftMapping_Style_descriptor();
inline const ::std::string& RCAircraftMapping_Style_Name(RCAircraftMapping_Style value) {
  return ::google::protobuf::internal::NameOfEnum(
    RCAircraftMapping_Style_descriptor(), value);
}
inline bool RCAircraftMapping_Style_Parse(
    const ::std::string& name, RCAircraftMapping_Style* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RCAircraftMapping_Style>(
    RCAircraftMapping_Style_descriptor(), name, value);
}
// ===================================================================

class RCFlightModel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.RCFlightModel) */ {
 public:
  RCFlightModel();
  virtual ~RCFlightModel();

  RCFlightModel(const RCFlightModel& from);

  inline RCFlightModel& operator=(const RCFlightModel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RCFlightModel(RCFlightModel&& from) noexcept
    : RCFlightModel() {
    *this = ::std::move(from);
  }

  inline RCFlightModel& operator=(RCFlightModel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RCFlightModel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RCFlightModel* internal_default_instance() {
    return reinterpret_cast<const RCFlightModel*>(
               &_RCFlightModel_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(RCFlightModel* other);
  friend void swap(RCFlightModel& a, RCFlightModel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RCFlightModel* New() const PROTOBUF_FINAL { return New(NULL); }

  RCFlightModel* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RCFlightModel& from);
  void MergeFrom(const RCFlightModel& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RCFlightModel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef RCFlightModel_Switch Switch;
  static const Switch One =
    RCFlightModel_Switch_One;
  static const Switch Two =
    RCFlightModel_Switch_Two;
  static const Switch Three =
    RCFlightModel_Switch_Three;
  static const Switch Unknown =
    RCFlightModel_Switch_Unknown;
  static inline bool Switch_IsValid(int value) {
    return RCFlightModel_Switch_IsValid(value);
  }
  static const Switch Switch_MIN =
    RCFlightModel_Switch_Switch_MIN;
  static const Switch Switch_MAX =
    RCFlightModel_Switch_Switch_MAX;
  static const int Switch_ARRAYSIZE =
    RCFlightModel_Switch_Switch_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Switch_descriptor() {
    return RCFlightModel_Switch_descriptor();
  }
  static inline const ::std::string& Switch_Name(Switch value) {
    return RCFlightModel_Switch_Name(value);
  }
  static inline bool Switch_Parse(const ::std::string& name,
      Switch* value) {
    return RCFlightModel_Switch_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.RCFlightModel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_RC_2fFRRCModelProto_2eproto::TableStruct;
  friend void ::protobuf_RC_2fFRRCModelProto_2eproto::InitDefaultsRCFlightModelImpl();
};
// -------------------------------------------------------------------

class Stick : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.Stick) */ {
 public:
  Stick();
  virtual ~Stick();

  Stick(const Stick& from);

  inline Stick& operator=(const Stick& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Stick(Stick&& from) noexcept
    : Stick() {
    *this = ::std::move(from);
  }

  inline Stick& operator=(Stick&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Stick& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Stick* internal_default_instance() {
    return reinterpret_cast<const Stick*>(
               &_Stick_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Stick* other);
  friend void swap(Stick& a, Stick& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Stick* New() const PROTOBUF_FINAL { return New(NULL); }

  Stick* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Stick& from);
  void MergeFrom(const Stick& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Stick* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 horizontalPosition = 1;
  void clear_horizontalposition();
  static const int kHorizontalPositionFieldNumber = 1;
  ::google::protobuf::int32 horizontalposition() const;
  void set_horizontalposition(::google::protobuf::int32 value);

  // int32 verticalPosition = 2;
  void clear_verticalposition();
  static const int kVerticalPositionFieldNumber = 2;
  ::google::protobuf::int32 verticalposition() const;
  void set_verticalposition(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.Stick)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 horizontalposition_;
  ::google::protobuf::int32 verticalposition_;
  mutable int _cached_size_;
  friend struct ::protobuf_RC_2fFRRCModelProto_2eproto::TableStruct;
  friend void ::protobuf_RC_2fFRRCModelProto_2eproto::InitDefaultsStickImpl();
};
// -------------------------------------------------------------------

class RCRightWheel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.RCRightWheel) */ {
 public:
  RCRightWheel();
  virtual ~RCRightWheel();

  RCRightWheel(const RCRightWheel& from);

  inline RCRightWheel& operator=(const RCRightWheel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RCRightWheel(RCRightWheel&& from) noexcept
    : RCRightWheel() {
    *this = ::std::move(from);
  }

  inline RCRightWheel& operator=(RCRightWheel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RCRightWheel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RCRightWheel* internal_default_instance() {
    return reinterpret_cast<const RCRightWheel*>(
               &_RCRightWheel_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(RCRightWheel* other);
  friend void swap(RCRightWheel& a, RCRightWheel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RCRightWheel* New() const PROTOBUF_FINAL { return New(NULL); }

  RCRightWheel* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RCRightWheel& from);
  void MergeFrom(const RCRightWheel& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RCRightWheel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool isPresent = 1;
  void clear_ispresent();
  static const int kIsPresentFieldNumber = 1;
  bool ispresent() const;
  void set_ispresent(bool value);

  // bool isTurned = 2;
  void clear_isturned();
  static const int kIsTurnedFieldNumber = 2;
  bool isturned() const;
  void set_isturned(bool value);

  // bool isClicked = 3;
  void clear_isclicked();
  static const int kIsClickedFieldNumber = 3;
  bool isclicked() const;
  void set_isclicked(bool value);

  // int32 value = 4;
  void clear_value();
  static const int kValueFieldNumber = 4;
  ::google::protobuf::int32 value() const;
  void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.RCRightWheel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool ispresent_;
  bool isturned_;
  bool isclicked_;
  ::google::protobuf::int32 value_;
  mutable int _cached_size_;
  friend struct ::protobuf_RC_2fFRRCModelProto_2eproto::TableStruct;
  friend void ::protobuf_RC_2fFRRCModelProto_2eproto::InitDefaultsRCRightWheelImpl();
};
// -------------------------------------------------------------------

class RCButton : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.RCButton) */ {
 public:
  RCButton();
  virtual ~RCButton();

  RCButton(const RCButton& from);

  inline RCButton& operator=(const RCButton& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RCButton(RCButton&& from) noexcept
    : RCButton() {
    *this = ::std::move(from);
  }

  inline RCButton& operator=(RCButton&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RCButton& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RCButton* internal_default_instance() {
    return reinterpret_cast<const RCButton*>(
               &_RCButton_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(RCButton* other);
  friend void swap(RCButton& a, RCButton& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RCButton* New() const PROTOBUF_FINAL { return New(NULL); }

  RCButton* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RCButton& from);
  void MergeFrom(const RCButton& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RCButton* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool isPresent = 1;
  void clear_ispresent();
  static const int kIsPresentFieldNumber = 1;
  bool ispresent() const;
  void set_ispresent(bool value);

  // bool isClicked = 2;
  void clear_isclicked();
  static const int kIsClickedFieldNumber = 2;
  bool isclicked() const;
  void set_isclicked(bool value);

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.RCButton)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool ispresent_;
  bool isclicked_;
  mutable int _cached_size_;
  friend struct ::protobuf_RC_2fFRRCModelProto_2eproto::TableStruct;
  friend void ::protobuf_RC_2fFRRCModelProto_2eproto::InitDefaultsRCButtonImpl();
};
// -------------------------------------------------------------------

class RCAircraftMapping : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.RCAircraftMapping) */ {
 public:
  RCAircraftMapping();
  virtual ~RCAircraftMapping();

  RCAircraftMapping(const RCAircraftMapping& from);

  inline RCAircraftMapping& operator=(const RCAircraftMapping& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RCAircraftMapping(RCAircraftMapping&& from) noexcept
    : RCAircraftMapping() {
    *this = ::std::move(from);
  }

  inline RCAircraftMapping& operator=(RCAircraftMapping&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RCAircraftMapping& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RCAircraftMapping* internal_default_instance() {
    return reinterpret_cast<const RCAircraftMapping*>(
               &_RCAircraftMapping_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(RCAircraftMapping* other);
  friend void swap(RCAircraftMapping& a, RCAircraftMapping& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RCAircraftMapping* New() const PROTOBUF_FINAL { return New(NULL); }

  RCAircraftMapping* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RCAircraftMapping& from);
  void MergeFrom(const RCAircraftMapping& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RCAircraftMapping* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef RCAircraftMapping_Style Style;
  static const Style Style1 =
    RCAircraftMapping_Style_Style1;
  static const Style Style2 =
    RCAircraftMapping_Style_Style2;
  static const Style Style3 =
    RCAircraftMapping_Style_Style3;
  static const Style StyleCustom =
    RCAircraftMapping_Style_StyleCustom;
  static const Style Unknown =
    RCAircraftMapping_Style_Unknown;
  static inline bool Style_IsValid(int value) {
    return RCAircraftMapping_Style_IsValid(value);
  }
  static const Style Style_MIN =
    RCAircraftMapping_Style_Style_MIN;
  static const Style Style_MAX =
    RCAircraftMapping_Style_Style_MAX;
  static const int Style_ARRAYSIZE =
    RCAircraftMapping_Style_Style_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Style_descriptor() {
    return RCAircraftMapping_Style_descriptor();
  }
  static inline const ::std::string& Style_Name(Style value) {
    return RCAircraftMapping_Style_Name(value);
  }
  static inline bool Style_Parse(const ::std::string& name,
      Style* value) {
    return RCAircraftMapping_Style_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.RCAircraftMapping)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_RC_2fFRRCModelProto_2eproto::TableStruct;
  friend void ::protobuf_RC_2fFRRCModelProto_2eproto::InitDefaultsRCAircraftMappingImpl();
};
// -------------------------------------------------------------------

class RCGPSTime : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.RCGPSTime) */ {
 public:
  RCGPSTime();
  virtual ~RCGPSTime();

  RCGPSTime(const RCGPSTime& from);

  inline RCGPSTime& operator=(const RCGPSTime& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RCGPSTime(RCGPSTime&& from) noexcept
    : RCGPSTime() {
    *this = ::std::move(from);
  }

  inline RCGPSTime& operator=(RCGPSTime&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RCGPSTime& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RCGPSTime* internal_default_instance() {
    return reinterpret_cast<const RCGPSTime*>(
               &_RCGPSTime_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(RCGPSTime* other);
  friend void swap(RCGPSTime& a, RCGPSTime& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RCGPSTime* New() const PROTOBUF_FINAL { return New(NULL); }

  RCGPSTime* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RCGPSTime& from);
  void MergeFrom(const RCGPSTime& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RCGPSTime* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 hour = 1;
  void clear_hour();
  static const int kHourFieldNumber = 1;
  ::google::protobuf::uint32 hour() const;
  void set_hour(::google::protobuf::uint32 value);

  // uint32 minute = 2;
  void clear_minute();
  static const int kMinuteFieldNumber = 2;
  ::google::protobuf::uint32 minute() const;
  void set_minute(::google::protobuf::uint32 value);

  // uint32 second = 3;
  void clear_second();
  static const int kSecondFieldNumber = 3;
  ::google::protobuf::uint32 second() const;
  void set_second(::google::protobuf::uint32 value);

  // uint32 year = 4;
  void clear_year();
  static const int kYearFieldNumber = 4;
  ::google::protobuf::uint32 year() const;
  void set_year(::google::protobuf::uint32 value);

  // uint32 month = 5;
  void clear_month();
  static const int kMonthFieldNumber = 5;
  ::google::protobuf::uint32 month() const;
  void set_month(::google::protobuf::uint32 value);

  // uint32 day = 6;
  void clear_day();
  static const int kDayFieldNumber = 6;
  ::google::protobuf::uint32 day() const;
  void set_day(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.RCGPSTime)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 hour_;
  ::google::protobuf::uint32 minute_;
  ::google::protobuf::uint32 second_;
  ::google::protobuf::uint32 year_;
  ::google::protobuf::uint32 month_;
  ::google::protobuf::uint32 day_;
  mutable int _cached_size_;
  friend struct ::protobuf_RC_2fFRRCModelProto_2eproto::TableStruct;
  friend void ::protobuf_RC_2fFRRCModelProto_2eproto::InitDefaultsRCGPSTimeImpl();
};
// -------------------------------------------------------------------

class RCGPSData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.RCGPSData) */ {
 public:
  RCGPSData();
  virtual ~RCGPSData();

  RCGPSData(const RCGPSData& from);

  inline RCGPSData& operator=(const RCGPSData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RCGPSData(RCGPSData&& from) noexcept
    : RCGPSData() {
    *this = ::std::move(from);
  }

  inline RCGPSData& operator=(RCGPSData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RCGPSData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RCGPSData* internal_default_instance() {
    return reinterpret_cast<const RCGPSData*>(
               &_RCGPSData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(RCGPSData* other);
  friend void swap(RCGPSData& a, RCGPSData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RCGPSData* New() const PROTOBUF_FINAL { return New(NULL); }

  RCGPSData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RCGPSData& from);
  void MergeFrom(const RCGPSData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RCGPSData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .DJIFRProto.Standard.RCGPSTime time = 1;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  const ::DJIFRProto::Standard::RCGPSTime& time() const;
  ::DJIFRProto::Standard::RCGPSTime* release_time();
  ::DJIFRProto::Standard::RCGPSTime* mutable_time();
  void set_allocated_time(::DJIFRProto::Standard::RCGPSTime* time);

  // .DJIFRProto.Standard.LocationCoordinate2D location = 2;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 2;
  const ::DJIFRProto::Standard::LocationCoordinate2D& location() const;
  ::DJIFRProto::Standard::LocationCoordinate2D* release_location();
  ::DJIFRProto::Standard::LocationCoordinate2D* mutable_location();
  void set_allocated_location(::DJIFRProto::Standard::LocationCoordinate2D* location);

  // float eastSpeed = 3;
  void clear_eastspeed();
  static const int kEastSpeedFieldNumber = 3;
  float eastspeed() const;
  void set_eastspeed(float value);

  // float northSpeed = 4;
  void clear_northspeed();
  static const int kNorthSpeedFieldNumber = 4;
  float northspeed() const;
  void set_northspeed(float value);

  // int32 satelliteCount = 5;
  void clear_satellitecount();
  static const int kSatelliteCountFieldNumber = 5;
  ::google::protobuf::int32 satellitecount() const;
  void set_satellitecount(::google::protobuf::int32 value);

  // float accuracy = 6;
  void clear_accuracy();
  static const int kAccuracyFieldNumber = 6;
  float accuracy() const;
  void set_accuracy(float value);

  // bool isValid = 7;
  void clear_isvalid();
  static const int kIsValidFieldNumber = 7;
  bool isvalid() const;
  void set_isvalid(bool value);

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.RCGPSData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::DJIFRProto::Standard::RCGPSTime* time_;
  ::DJIFRProto::Standard::LocationCoordinate2D* location_;
  float eastspeed_;
  float northspeed_;
  ::google::protobuf::int32 satellitecount_;
  float accuracy_;
  bool isvalid_;
  mutable int _cached_size_;
  friend struct ::protobuf_RC_2fFRRCModelProto_2eproto::TableStruct;
  friend void ::protobuf_RC_2fFRRCModelProto_2eproto::InitDefaultsRCGPSDataImpl();
};
// -------------------------------------------------------------------

class RCHardwareState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.RCHardwareState) */ {
 public:
  RCHardwareState();
  virtual ~RCHardwareState();

  RCHardwareState(const RCHardwareState& from);

  inline RCHardwareState& operator=(const RCHardwareState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RCHardwareState(RCHardwareState&& from) noexcept
    : RCHardwareState() {
    *this = ::std::move(from);
  }

  inline RCHardwareState& operator=(RCHardwareState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RCHardwareState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RCHardwareState* internal_default_instance() {
    return reinterpret_cast<const RCHardwareState*>(
               &_RCHardwareState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(RCHardwareState* other);
  friend void swap(RCHardwareState& a, RCHardwareState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RCHardwareState* New() const PROTOBUF_FINAL { return New(NULL); }

  RCHardwareState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RCHardwareState& from);
  void MergeFrom(const RCHardwareState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RCHardwareState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .DJIFRProto.Standard.Stick leftStick = 1;
  bool has_leftstick() const;
  void clear_leftstick();
  static const int kLeftStickFieldNumber = 1;
  const ::DJIFRProto::Standard::Stick& leftstick() const;
  ::DJIFRProto::Standard::Stick* release_leftstick();
  ::DJIFRProto::Standard::Stick* mutable_leftstick();
  void set_allocated_leftstick(::DJIFRProto::Standard::Stick* leftstick);

  // .DJIFRProto.Standard.Stick rightStick = 2;
  bool has_rightstick() const;
  void clear_rightstick();
  static const int kRightStickFieldNumber = 2;
  const ::DJIFRProto::Standard::Stick& rightstick() const;
  ::DJIFRProto::Standard::Stick* release_rightstick();
  ::DJIFRProto::Standard::Stick* mutable_rightstick();
  void set_allocated_rightstick(::DJIFRProto::Standard::Stick* rightstick);

  // .DJIFRProto.Standard.RCRightWheel rightWheel = 4;
  bool has_rightwheel() const;
  void clear_rightwheel();
  static const int kRightWheelFieldNumber = 4;
  const ::DJIFRProto::Standard::RCRightWheel& rightwheel() const;
  ::DJIFRProto::Standard::RCRightWheel* release_rightwheel();
  ::DJIFRProto::Standard::RCRightWheel* mutable_rightwheel();
  void set_allocated_rightwheel(::DJIFRProto::Standard::RCRightWheel* rightwheel);

  // .DJIFRProto.Standard.RCButton goHomeButton = 6;
  bool has_gohomebutton() const;
  void clear_gohomebutton();
  static const int kGoHomeButtonFieldNumber = 6;
  const ::DJIFRProto::Standard::RCButton& gohomebutton() const;
  ::DJIFRProto::Standard::RCButton* release_gohomebutton();
  ::DJIFRProto::Standard::RCButton* mutable_gohomebutton();
  void set_allocated_gohomebutton(::DJIFRProto::Standard::RCButton* gohomebutton);

  // .DJIFRProto.Standard.RCButton recordButton = 7;
  bool has_recordbutton() const;
  void clear_recordbutton();
  static const int kRecordButtonFieldNumber = 7;
  const ::DJIFRProto::Standard::RCButton& recordbutton() const;
  ::DJIFRProto::Standard::RCButton* release_recordbutton();
  ::DJIFRProto::Standard::RCButton* mutable_recordbutton();
  void set_allocated_recordbutton(::DJIFRProto::Standard::RCButton* recordbutton);

  // .DJIFRProto.Standard.RCButton shutterButton = 8;
  bool has_shutterbutton() const;
  void clear_shutterbutton();
  static const int kShutterButtonFieldNumber = 8;
  const ::DJIFRProto::Standard::RCButton& shutterbutton() const;
  ::DJIFRProto::Standard::RCButton* release_shutterbutton();
  ::DJIFRProto::Standard::RCButton* mutable_shutterbutton();
  void set_allocated_shutterbutton(::DJIFRProto::Standard::RCButton* shutterbutton);

  // .DJIFRProto.Standard.RCButton playbackButton = 9;
  bool has_playbackbutton() const;
  void clear_playbackbutton();
  static const int kPlaybackButtonFieldNumber = 9;
  const ::DJIFRProto::Standard::RCButton& playbackbutton() const;
  ::DJIFRProto::Standard::RCButton* release_playbackbutton();
  ::DJIFRProto::Standard::RCButton* mutable_playbackbutton();
  void set_allocated_playbackbutton(::DJIFRProto::Standard::RCButton* playbackbutton);

  // .DJIFRProto.Standard.RCButton pauseButton = 10;
  bool has_pausebutton() const;
  void clear_pausebutton();
  static const int kPauseButtonFieldNumber = 10;
  const ::DJIFRProto::Standard::RCButton& pausebutton() const;
  ::DJIFRProto::Standard::RCButton* release_pausebutton();
  ::DJIFRProto::Standard::RCButton* mutable_pausebutton();
  void set_allocated_pausebutton(::DJIFRProto::Standard::RCButton* pausebutton);

  // .DJIFRProto.Standard.RCGPSData GPSData = 12;
  bool has_gpsdata() const;
  void clear_gpsdata();
  static const int kGPSDataFieldNumber = 12;
  const ::DJIFRProto::Standard::RCGPSData& gpsdata() const;
  ::DJIFRProto::Standard::RCGPSData* release_gpsdata();
  ::DJIFRProto::Standard::RCGPSData* mutable_gpsdata();
  void set_allocated_gpsdata(::DJIFRProto::Standard::RCGPSData* gpsdata);

  // int32 leftWheel = 3;
  void clear_leftwheel();
  static const int kLeftWheelFieldNumber = 3;
  ::google::protobuf::int32 leftwheel() const;
  void set_leftwheel(::google::protobuf::int32 value);

  // .DJIFRProto.Standard.RCFlightModel.Switch flightModeSwitch = 5;
  void clear_flightmodeswitch();
  static const int kFlightModeSwitchFieldNumber = 5;
  ::DJIFRProto::Standard::RCFlightModel_Switch flightmodeswitch() const;
  void set_flightmodeswitch(::DJIFRProto::Standard::RCFlightModel_Switch value);

  // .DJIFRProto.Standard.RCAircraftMapping.Style style = 11;
  void clear_style();
  static const int kStyleFieldNumber = 11;
  ::DJIFRProto::Standard::RCAircraftMapping_Style style() const;
  void set_style(::DJIFRProto::Standard::RCAircraftMapping_Style value);

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.RCHardwareState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::DJIFRProto::Standard::Stick* leftstick_;
  ::DJIFRProto::Standard::Stick* rightstick_;
  ::DJIFRProto::Standard::RCRightWheel* rightwheel_;
  ::DJIFRProto::Standard::RCButton* gohomebutton_;
  ::DJIFRProto::Standard::RCButton* recordbutton_;
  ::DJIFRProto::Standard::RCButton* shutterbutton_;
  ::DJIFRProto::Standard::RCButton* playbackbutton_;
  ::DJIFRProto::Standard::RCButton* pausebutton_;
  ::DJIFRProto::Standard::RCGPSData* gpsdata_;
  ::google::protobuf::int32 leftwheel_;
  int flightmodeswitch_;
  int style_;
  mutable int _cached_size_;
  friend struct ::protobuf_RC_2fFRRCModelProto_2eproto::TableStruct;
  friend void ::protobuf_RC_2fFRRCModelProto_2eproto::InitDefaultsRCHardwareStateImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RCFlightModel

// -------------------------------------------------------------------

// Stick

// int32 horizontalPosition = 1;
inline void Stick::clear_horizontalposition() {
  horizontalposition_ = 0;
}
inline ::google::protobuf::int32 Stick::horizontalposition() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.Stick.horizontalPosition)
  return horizontalposition_;
}
inline void Stick::set_horizontalposition(::google::protobuf::int32 value) {
  
  horizontalposition_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.Stick.horizontalPosition)
}

// int32 verticalPosition = 2;
inline void Stick::clear_verticalposition() {
  verticalposition_ = 0;
}
inline ::google::protobuf::int32 Stick::verticalposition() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.Stick.verticalPosition)
  return verticalposition_;
}
inline void Stick::set_verticalposition(::google::protobuf::int32 value) {
  
  verticalposition_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.Stick.verticalPosition)
}

// -------------------------------------------------------------------

// RCRightWheel

// bool isPresent = 1;
inline void RCRightWheel::clear_ispresent() {
  ispresent_ = false;
}
inline bool RCRightWheel::ispresent() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCRightWheel.isPresent)
  return ispresent_;
}
inline void RCRightWheel::set_ispresent(bool value) {
  
  ispresent_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.RCRightWheel.isPresent)
}

// bool isTurned = 2;
inline void RCRightWheel::clear_isturned() {
  isturned_ = false;
}
inline bool RCRightWheel::isturned() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCRightWheel.isTurned)
  return isturned_;
}
inline void RCRightWheel::set_isturned(bool value) {
  
  isturned_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.RCRightWheel.isTurned)
}

// bool isClicked = 3;
inline void RCRightWheel::clear_isclicked() {
  isclicked_ = false;
}
inline bool RCRightWheel::isclicked() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCRightWheel.isClicked)
  return isclicked_;
}
inline void RCRightWheel::set_isclicked(bool value) {
  
  isclicked_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.RCRightWheel.isClicked)
}

// int32 value = 4;
inline void RCRightWheel::clear_value() {
  value_ = 0;
}
inline ::google::protobuf::int32 RCRightWheel::value() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCRightWheel.value)
  return value_;
}
inline void RCRightWheel::set_value(::google::protobuf::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.RCRightWheel.value)
}

// -------------------------------------------------------------------

// RCButton

// bool isPresent = 1;
inline void RCButton::clear_ispresent() {
  ispresent_ = false;
}
inline bool RCButton::ispresent() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCButton.isPresent)
  return ispresent_;
}
inline void RCButton::set_ispresent(bool value) {
  
  ispresent_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.RCButton.isPresent)
}

// bool isClicked = 2;
inline void RCButton::clear_isclicked() {
  isclicked_ = false;
}
inline bool RCButton::isclicked() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCButton.isClicked)
  return isclicked_;
}
inline void RCButton::set_isclicked(bool value) {
  
  isclicked_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.RCButton.isClicked)
}

// -------------------------------------------------------------------

// RCAircraftMapping

// -------------------------------------------------------------------

// RCGPSTime

// uint32 hour = 1;
inline void RCGPSTime::clear_hour() {
  hour_ = 0u;
}
inline ::google::protobuf::uint32 RCGPSTime::hour() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCGPSTime.hour)
  return hour_;
}
inline void RCGPSTime::set_hour(::google::protobuf::uint32 value) {
  
  hour_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.RCGPSTime.hour)
}

// uint32 minute = 2;
inline void RCGPSTime::clear_minute() {
  minute_ = 0u;
}
inline ::google::protobuf::uint32 RCGPSTime::minute() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCGPSTime.minute)
  return minute_;
}
inline void RCGPSTime::set_minute(::google::protobuf::uint32 value) {
  
  minute_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.RCGPSTime.minute)
}

// uint32 second = 3;
inline void RCGPSTime::clear_second() {
  second_ = 0u;
}
inline ::google::protobuf::uint32 RCGPSTime::second() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCGPSTime.second)
  return second_;
}
inline void RCGPSTime::set_second(::google::protobuf::uint32 value) {
  
  second_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.RCGPSTime.second)
}

// uint32 year = 4;
inline void RCGPSTime::clear_year() {
  year_ = 0u;
}
inline ::google::protobuf::uint32 RCGPSTime::year() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCGPSTime.year)
  return year_;
}
inline void RCGPSTime::set_year(::google::protobuf::uint32 value) {
  
  year_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.RCGPSTime.year)
}

// uint32 month = 5;
inline void RCGPSTime::clear_month() {
  month_ = 0u;
}
inline ::google::protobuf::uint32 RCGPSTime::month() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCGPSTime.month)
  return month_;
}
inline void RCGPSTime::set_month(::google::protobuf::uint32 value) {
  
  month_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.RCGPSTime.month)
}

// uint32 day = 6;
inline void RCGPSTime::clear_day() {
  day_ = 0u;
}
inline ::google::protobuf::uint32 RCGPSTime::day() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCGPSTime.day)
  return day_;
}
inline void RCGPSTime::set_day(::google::protobuf::uint32 value) {
  
  day_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.RCGPSTime.day)
}

// -------------------------------------------------------------------

// RCGPSData

// .DJIFRProto.Standard.RCGPSTime time = 1;
inline bool RCGPSData::has_time() const {
  return this != internal_default_instance() && time_ != NULL;
}
inline void RCGPSData::clear_time() {
  if (GetArenaNoVirtual() == NULL && time_ != NULL) {
    delete time_;
  }
  time_ = NULL;
}
inline const ::DJIFRProto::Standard::RCGPSTime& RCGPSData::time() const {
  const ::DJIFRProto::Standard::RCGPSTime* p = time_;
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCGPSData.time)
  return p != NULL ? *p : *reinterpret_cast<const ::DJIFRProto::Standard::RCGPSTime*>(
      &::DJIFRProto::Standard::_RCGPSTime_default_instance_);
}
inline ::DJIFRProto::Standard::RCGPSTime* RCGPSData::release_time() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.RCGPSData.time)
  
  ::DJIFRProto::Standard::RCGPSTime* temp = time_;
  time_ = NULL;
  return temp;
}
inline ::DJIFRProto::Standard::RCGPSTime* RCGPSData::mutable_time() {
  
  if (time_ == NULL) {
    time_ = new ::DJIFRProto::Standard::RCGPSTime;
  }
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.RCGPSData.time)
  return time_;
}
inline void RCGPSData::set_allocated_time(::DJIFRProto::Standard::RCGPSTime* time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete time_;
  }
  if (time) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.RCGPSData.time)
}

// .DJIFRProto.Standard.LocationCoordinate2D location = 2;
inline bool RCGPSData::has_location() const {
  return this != internal_default_instance() && location_ != NULL;
}
inline const ::DJIFRProto::Standard::LocationCoordinate2D& RCGPSData::location() const {
  const ::DJIFRProto::Standard::LocationCoordinate2D* p = location_;
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCGPSData.location)
  return p != NULL ? *p : *reinterpret_cast<const ::DJIFRProto::Standard::LocationCoordinate2D*>(
      &::DJIFRProto::Standard::_LocationCoordinate2D_default_instance_);
}
inline ::DJIFRProto::Standard::LocationCoordinate2D* RCGPSData::release_location() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.RCGPSData.location)
  
  ::DJIFRProto::Standard::LocationCoordinate2D* temp = location_;
  location_ = NULL;
  return temp;
}
inline ::DJIFRProto::Standard::LocationCoordinate2D* RCGPSData::mutable_location() {
  
  if (location_ == NULL) {
    location_ = new ::DJIFRProto::Standard::LocationCoordinate2D;
  }
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.RCGPSData.location)
  return location_;
}
inline void RCGPSData::set_allocated_location(::DJIFRProto::Standard::LocationCoordinate2D* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(location_);
  }
  if (location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.RCGPSData.location)
}

// float eastSpeed = 3;
inline void RCGPSData::clear_eastspeed() {
  eastspeed_ = 0;
}
inline float RCGPSData::eastspeed() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCGPSData.eastSpeed)
  return eastspeed_;
}
inline void RCGPSData::set_eastspeed(float value) {
  
  eastspeed_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.RCGPSData.eastSpeed)
}

// float northSpeed = 4;
inline void RCGPSData::clear_northspeed() {
  northspeed_ = 0;
}
inline float RCGPSData::northspeed() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCGPSData.northSpeed)
  return northspeed_;
}
inline void RCGPSData::set_northspeed(float value) {
  
  northspeed_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.RCGPSData.northSpeed)
}

// int32 satelliteCount = 5;
inline void RCGPSData::clear_satellitecount() {
  satellitecount_ = 0;
}
inline ::google::protobuf::int32 RCGPSData::satellitecount() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCGPSData.satelliteCount)
  return satellitecount_;
}
inline void RCGPSData::set_satellitecount(::google::protobuf::int32 value) {
  
  satellitecount_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.RCGPSData.satelliteCount)
}

// float accuracy = 6;
inline void RCGPSData::clear_accuracy() {
  accuracy_ = 0;
}
inline float RCGPSData::accuracy() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCGPSData.accuracy)
  return accuracy_;
}
inline void RCGPSData::set_accuracy(float value) {
  
  accuracy_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.RCGPSData.accuracy)
}

// bool isValid = 7;
inline void RCGPSData::clear_isvalid() {
  isvalid_ = false;
}
inline bool RCGPSData::isvalid() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCGPSData.isValid)
  return isvalid_;
}
inline void RCGPSData::set_isvalid(bool value) {
  
  isvalid_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.RCGPSData.isValid)
}

// -------------------------------------------------------------------

// RCHardwareState

// .DJIFRProto.Standard.Stick leftStick = 1;
inline bool RCHardwareState::has_leftstick() const {
  return this != internal_default_instance() && leftstick_ != NULL;
}
inline void RCHardwareState::clear_leftstick() {
  if (GetArenaNoVirtual() == NULL && leftstick_ != NULL) {
    delete leftstick_;
  }
  leftstick_ = NULL;
}
inline const ::DJIFRProto::Standard::Stick& RCHardwareState::leftstick() const {
  const ::DJIFRProto::Standard::Stick* p = leftstick_;
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCHardwareState.leftStick)
  return p != NULL ? *p : *reinterpret_cast<const ::DJIFRProto::Standard::Stick*>(
      &::DJIFRProto::Standard::_Stick_default_instance_);
}
inline ::DJIFRProto::Standard::Stick* RCHardwareState::release_leftstick() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.RCHardwareState.leftStick)
  
  ::DJIFRProto::Standard::Stick* temp = leftstick_;
  leftstick_ = NULL;
  return temp;
}
inline ::DJIFRProto::Standard::Stick* RCHardwareState::mutable_leftstick() {
  
  if (leftstick_ == NULL) {
    leftstick_ = new ::DJIFRProto::Standard::Stick;
  }
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.RCHardwareState.leftStick)
  return leftstick_;
}
inline void RCHardwareState::set_allocated_leftstick(::DJIFRProto::Standard::Stick* leftstick) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete leftstick_;
  }
  if (leftstick) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      leftstick = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, leftstick, submessage_arena);
    }
    
  } else {
    
  }
  leftstick_ = leftstick;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.RCHardwareState.leftStick)
}

// .DJIFRProto.Standard.Stick rightStick = 2;
inline bool RCHardwareState::has_rightstick() const {
  return this != internal_default_instance() && rightstick_ != NULL;
}
inline void RCHardwareState::clear_rightstick() {
  if (GetArenaNoVirtual() == NULL && rightstick_ != NULL) {
    delete rightstick_;
  }
  rightstick_ = NULL;
}
inline const ::DJIFRProto::Standard::Stick& RCHardwareState::rightstick() const {
  const ::DJIFRProto::Standard::Stick* p = rightstick_;
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCHardwareState.rightStick)
  return p != NULL ? *p : *reinterpret_cast<const ::DJIFRProto::Standard::Stick*>(
      &::DJIFRProto::Standard::_Stick_default_instance_);
}
inline ::DJIFRProto::Standard::Stick* RCHardwareState::release_rightstick() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.RCHardwareState.rightStick)
  
  ::DJIFRProto::Standard::Stick* temp = rightstick_;
  rightstick_ = NULL;
  return temp;
}
inline ::DJIFRProto::Standard::Stick* RCHardwareState::mutable_rightstick() {
  
  if (rightstick_ == NULL) {
    rightstick_ = new ::DJIFRProto::Standard::Stick;
  }
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.RCHardwareState.rightStick)
  return rightstick_;
}
inline void RCHardwareState::set_allocated_rightstick(::DJIFRProto::Standard::Stick* rightstick) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rightstick_;
  }
  if (rightstick) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rightstick = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rightstick, submessage_arena);
    }
    
  } else {
    
  }
  rightstick_ = rightstick;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.RCHardwareState.rightStick)
}

// int32 leftWheel = 3;
inline void RCHardwareState::clear_leftwheel() {
  leftwheel_ = 0;
}
inline ::google::protobuf::int32 RCHardwareState::leftwheel() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCHardwareState.leftWheel)
  return leftwheel_;
}
inline void RCHardwareState::set_leftwheel(::google::protobuf::int32 value) {
  
  leftwheel_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.RCHardwareState.leftWheel)
}

// .DJIFRProto.Standard.RCRightWheel rightWheel = 4;
inline bool RCHardwareState::has_rightwheel() const {
  return this != internal_default_instance() && rightwheel_ != NULL;
}
inline void RCHardwareState::clear_rightwheel() {
  if (GetArenaNoVirtual() == NULL && rightwheel_ != NULL) {
    delete rightwheel_;
  }
  rightwheel_ = NULL;
}
inline const ::DJIFRProto::Standard::RCRightWheel& RCHardwareState::rightwheel() const {
  const ::DJIFRProto::Standard::RCRightWheel* p = rightwheel_;
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCHardwareState.rightWheel)
  return p != NULL ? *p : *reinterpret_cast<const ::DJIFRProto::Standard::RCRightWheel*>(
      &::DJIFRProto::Standard::_RCRightWheel_default_instance_);
}
inline ::DJIFRProto::Standard::RCRightWheel* RCHardwareState::release_rightwheel() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.RCHardwareState.rightWheel)
  
  ::DJIFRProto::Standard::RCRightWheel* temp = rightwheel_;
  rightwheel_ = NULL;
  return temp;
}
inline ::DJIFRProto::Standard::RCRightWheel* RCHardwareState::mutable_rightwheel() {
  
  if (rightwheel_ == NULL) {
    rightwheel_ = new ::DJIFRProto::Standard::RCRightWheel;
  }
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.RCHardwareState.rightWheel)
  return rightwheel_;
}
inline void RCHardwareState::set_allocated_rightwheel(::DJIFRProto::Standard::RCRightWheel* rightwheel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rightwheel_;
  }
  if (rightwheel) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rightwheel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rightwheel, submessage_arena);
    }
    
  } else {
    
  }
  rightwheel_ = rightwheel;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.RCHardwareState.rightWheel)
}

// .DJIFRProto.Standard.RCFlightModel.Switch flightModeSwitch = 5;
inline void RCHardwareState::clear_flightmodeswitch() {
  flightmodeswitch_ = 0;
}
inline ::DJIFRProto::Standard::RCFlightModel_Switch RCHardwareState::flightmodeswitch() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCHardwareState.flightModeSwitch)
  return static_cast< ::DJIFRProto::Standard::RCFlightModel_Switch >(flightmodeswitch_);
}
inline void RCHardwareState::set_flightmodeswitch(::DJIFRProto::Standard::RCFlightModel_Switch value) {
  
  flightmodeswitch_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.RCHardwareState.flightModeSwitch)
}

// .DJIFRProto.Standard.RCButton goHomeButton = 6;
inline bool RCHardwareState::has_gohomebutton() const {
  return this != internal_default_instance() && gohomebutton_ != NULL;
}
inline void RCHardwareState::clear_gohomebutton() {
  if (GetArenaNoVirtual() == NULL && gohomebutton_ != NULL) {
    delete gohomebutton_;
  }
  gohomebutton_ = NULL;
}
inline const ::DJIFRProto::Standard::RCButton& RCHardwareState::gohomebutton() const {
  const ::DJIFRProto::Standard::RCButton* p = gohomebutton_;
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCHardwareState.goHomeButton)
  return p != NULL ? *p : *reinterpret_cast<const ::DJIFRProto::Standard::RCButton*>(
      &::DJIFRProto::Standard::_RCButton_default_instance_);
}
inline ::DJIFRProto::Standard::RCButton* RCHardwareState::release_gohomebutton() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.RCHardwareState.goHomeButton)
  
  ::DJIFRProto::Standard::RCButton* temp = gohomebutton_;
  gohomebutton_ = NULL;
  return temp;
}
inline ::DJIFRProto::Standard::RCButton* RCHardwareState::mutable_gohomebutton() {
  
  if (gohomebutton_ == NULL) {
    gohomebutton_ = new ::DJIFRProto::Standard::RCButton;
  }
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.RCHardwareState.goHomeButton)
  return gohomebutton_;
}
inline void RCHardwareState::set_allocated_gohomebutton(::DJIFRProto::Standard::RCButton* gohomebutton) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete gohomebutton_;
  }
  if (gohomebutton) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gohomebutton = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gohomebutton, submessage_arena);
    }
    
  } else {
    
  }
  gohomebutton_ = gohomebutton;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.RCHardwareState.goHomeButton)
}

// .DJIFRProto.Standard.RCButton recordButton = 7;
inline bool RCHardwareState::has_recordbutton() const {
  return this != internal_default_instance() && recordbutton_ != NULL;
}
inline void RCHardwareState::clear_recordbutton() {
  if (GetArenaNoVirtual() == NULL && recordbutton_ != NULL) {
    delete recordbutton_;
  }
  recordbutton_ = NULL;
}
inline const ::DJIFRProto::Standard::RCButton& RCHardwareState::recordbutton() const {
  const ::DJIFRProto::Standard::RCButton* p = recordbutton_;
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCHardwareState.recordButton)
  return p != NULL ? *p : *reinterpret_cast<const ::DJIFRProto::Standard::RCButton*>(
      &::DJIFRProto::Standard::_RCButton_default_instance_);
}
inline ::DJIFRProto::Standard::RCButton* RCHardwareState::release_recordbutton() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.RCHardwareState.recordButton)
  
  ::DJIFRProto::Standard::RCButton* temp = recordbutton_;
  recordbutton_ = NULL;
  return temp;
}
inline ::DJIFRProto::Standard::RCButton* RCHardwareState::mutable_recordbutton() {
  
  if (recordbutton_ == NULL) {
    recordbutton_ = new ::DJIFRProto::Standard::RCButton;
  }
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.RCHardwareState.recordButton)
  return recordbutton_;
}
inline void RCHardwareState::set_allocated_recordbutton(::DJIFRProto::Standard::RCButton* recordbutton) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete recordbutton_;
  }
  if (recordbutton) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      recordbutton = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, recordbutton, submessage_arena);
    }
    
  } else {
    
  }
  recordbutton_ = recordbutton;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.RCHardwareState.recordButton)
}

// .DJIFRProto.Standard.RCButton shutterButton = 8;
inline bool RCHardwareState::has_shutterbutton() const {
  return this != internal_default_instance() && shutterbutton_ != NULL;
}
inline void RCHardwareState::clear_shutterbutton() {
  if (GetArenaNoVirtual() == NULL && shutterbutton_ != NULL) {
    delete shutterbutton_;
  }
  shutterbutton_ = NULL;
}
inline const ::DJIFRProto::Standard::RCButton& RCHardwareState::shutterbutton() const {
  const ::DJIFRProto::Standard::RCButton* p = shutterbutton_;
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCHardwareState.shutterButton)
  return p != NULL ? *p : *reinterpret_cast<const ::DJIFRProto::Standard::RCButton*>(
      &::DJIFRProto::Standard::_RCButton_default_instance_);
}
inline ::DJIFRProto::Standard::RCButton* RCHardwareState::release_shutterbutton() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.RCHardwareState.shutterButton)
  
  ::DJIFRProto::Standard::RCButton* temp = shutterbutton_;
  shutterbutton_ = NULL;
  return temp;
}
inline ::DJIFRProto::Standard::RCButton* RCHardwareState::mutable_shutterbutton() {
  
  if (shutterbutton_ == NULL) {
    shutterbutton_ = new ::DJIFRProto::Standard::RCButton;
  }
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.RCHardwareState.shutterButton)
  return shutterbutton_;
}
inline void RCHardwareState::set_allocated_shutterbutton(::DJIFRProto::Standard::RCButton* shutterbutton) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shutterbutton_;
  }
  if (shutterbutton) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      shutterbutton = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, shutterbutton, submessage_arena);
    }
    
  } else {
    
  }
  shutterbutton_ = shutterbutton;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.RCHardwareState.shutterButton)
}

// .DJIFRProto.Standard.RCButton playbackButton = 9;
inline bool RCHardwareState::has_playbackbutton() const {
  return this != internal_default_instance() && playbackbutton_ != NULL;
}
inline void RCHardwareState::clear_playbackbutton() {
  if (GetArenaNoVirtual() == NULL && playbackbutton_ != NULL) {
    delete playbackbutton_;
  }
  playbackbutton_ = NULL;
}
inline const ::DJIFRProto::Standard::RCButton& RCHardwareState::playbackbutton() const {
  const ::DJIFRProto::Standard::RCButton* p = playbackbutton_;
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCHardwareState.playbackButton)
  return p != NULL ? *p : *reinterpret_cast<const ::DJIFRProto::Standard::RCButton*>(
      &::DJIFRProto::Standard::_RCButton_default_instance_);
}
inline ::DJIFRProto::Standard::RCButton* RCHardwareState::release_playbackbutton() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.RCHardwareState.playbackButton)
  
  ::DJIFRProto::Standard::RCButton* temp = playbackbutton_;
  playbackbutton_ = NULL;
  return temp;
}
inline ::DJIFRProto::Standard::RCButton* RCHardwareState::mutable_playbackbutton() {
  
  if (playbackbutton_ == NULL) {
    playbackbutton_ = new ::DJIFRProto::Standard::RCButton;
  }
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.RCHardwareState.playbackButton)
  return playbackbutton_;
}
inline void RCHardwareState::set_allocated_playbackbutton(::DJIFRProto::Standard::RCButton* playbackbutton) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete playbackbutton_;
  }
  if (playbackbutton) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      playbackbutton = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, playbackbutton, submessage_arena);
    }
    
  } else {
    
  }
  playbackbutton_ = playbackbutton;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.RCHardwareState.playbackButton)
}

// .DJIFRProto.Standard.RCButton pauseButton = 10;
inline bool RCHardwareState::has_pausebutton() const {
  return this != internal_default_instance() && pausebutton_ != NULL;
}
inline void RCHardwareState::clear_pausebutton() {
  if (GetArenaNoVirtual() == NULL && pausebutton_ != NULL) {
    delete pausebutton_;
  }
  pausebutton_ = NULL;
}
inline const ::DJIFRProto::Standard::RCButton& RCHardwareState::pausebutton() const {
  const ::DJIFRProto::Standard::RCButton* p = pausebutton_;
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCHardwareState.pauseButton)
  return p != NULL ? *p : *reinterpret_cast<const ::DJIFRProto::Standard::RCButton*>(
      &::DJIFRProto::Standard::_RCButton_default_instance_);
}
inline ::DJIFRProto::Standard::RCButton* RCHardwareState::release_pausebutton() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.RCHardwareState.pauseButton)
  
  ::DJIFRProto::Standard::RCButton* temp = pausebutton_;
  pausebutton_ = NULL;
  return temp;
}
inline ::DJIFRProto::Standard::RCButton* RCHardwareState::mutable_pausebutton() {
  
  if (pausebutton_ == NULL) {
    pausebutton_ = new ::DJIFRProto::Standard::RCButton;
  }
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.RCHardwareState.pauseButton)
  return pausebutton_;
}
inline void RCHardwareState::set_allocated_pausebutton(::DJIFRProto::Standard::RCButton* pausebutton) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pausebutton_;
  }
  if (pausebutton) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pausebutton = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pausebutton, submessage_arena);
    }
    
  } else {
    
  }
  pausebutton_ = pausebutton;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.RCHardwareState.pauseButton)
}

// .DJIFRProto.Standard.RCAircraftMapping.Style style = 11;
inline void RCHardwareState::clear_style() {
  style_ = 0;
}
inline ::DJIFRProto::Standard::RCAircraftMapping_Style RCHardwareState::style() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCHardwareState.style)
  return static_cast< ::DJIFRProto::Standard::RCAircraftMapping_Style >(style_);
}
inline void RCHardwareState::set_style(::DJIFRProto::Standard::RCAircraftMapping_Style value) {
  
  style_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.RCHardwareState.style)
}

// .DJIFRProto.Standard.RCGPSData GPSData = 12;
inline bool RCHardwareState::has_gpsdata() const {
  return this != internal_default_instance() && gpsdata_ != NULL;
}
inline void RCHardwareState::clear_gpsdata() {
  if (GetArenaNoVirtual() == NULL && gpsdata_ != NULL) {
    delete gpsdata_;
  }
  gpsdata_ = NULL;
}
inline const ::DJIFRProto::Standard::RCGPSData& RCHardwareState::gpsdata() const {
  const ::DJIFRProto::Standard::RCGPSData* p = gpsdata_;
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCHardwareState.GPSData)
  return p != NULL ? *p : *reinterpret_cast<const ::DJIFRProto::Standard::RCGPSData*>(
      &::DJIFRProto::Standard::_RCGPSData_default_instance_);
}
inline ::DJIFRProto::Standard::RCGPSData* RCHardwareState::release_gpsdata() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.RCHardwareState.GPSData)
  
  ::DJIFRProto::Standard::RCGPSData* temp = gpsdata_;
  gpsdata_ = NULL;
  return temp;
}
inline ::DJIFRProto::Standard::RCGPSData* RCHardwareState::mutable_gpsdata() {
  
  if (gpsdata_ == NULL) {
    gpsdata_ = new ::DJIFRProto::Standard::RCGPSData;
  }
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.RCHardwareState.GPSData)
  return gpsdata_;
}
inline void RCHardwareState::set_allocated_gpsdata(::DJIFRProto::Standard::RCGPSData* gpsdata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete gpsdata_;
  }
  if (gpsdata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gpsdata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gpsdata, submessage_arena);
    }
    
  } else {
    
  }
  gpsdata_ = gpsdata;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.RCHardwareState.GPSData)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Standard
}  // namespace DJIFRProto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::DJIFRProto::Standard::RCFlightModel_Switch> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DJIFRProto::Standard::RCFlightModel_Switch>() {
  return ::DJIFRProto::Standard::RCFlightModel_Switch_descriptor();
}
template <> struct is_proto_enum< ::DJIFRProto::Standard::RCAircraftMapping_Style> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DJIFRProto::Standard::RCAircraftMapping_Style>() {
  return ::DJIFRProto::Standard::RCAircraftMapping_Style_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RC_2fFRRCModelProto_2eproto__INCLUDED
