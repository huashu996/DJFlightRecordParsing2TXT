// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Summary/FRSummaryModelProto.proto

#include "Summary/FRSummaryModelProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace DJIFRProto {
namespace Standard {
class ComponentInformationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ComponentInformation>
      _instance;
} _ComponentInformation_default_instance_;
class SummaryInformation_BatteriesInformationEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SummaryInformation_BatteriesInformationEntry_DoNotUse>
      _instance;
} _SummaryInformation_BatteriesInformationEntry_DoNotUse_default_instance_;
class SummaryInformation_CamerasInformationEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SummaryInformation_CamerasInformationEntry_DoNotUse>
      _instance;
} _SummaryInformation_CamerasInformationEntry_DoNotUse_default_instance_;
class SummaryInformation_GimbalsInformationEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SummaryInformation_GimbalsInformationEntry_DoNotUse>
      _instance;
} _SummaryInformation_GimbalsInformationEntry_DoNotUse_default_instance_;
class SummaryInformationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SummaryInformation>
      _instance;
} _SummaryInformation_default_instance_;
}  // namespace Standard
}  // namespace DJIFRProto
namespace protobuf_Summary_2fFRSummaryModelProto_2eproto {
void InitDefaultsComponentInformationImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::DJIFRProto::Standard::_ComponentInformation_default_instance_;
    new (ptr) ::DJIFRProto::Standard::ComponentInformation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DJIFRProto::Standard::ComponentInformation::InitAsDefaultInstance();
}

void InitDefaultsComponentInformation() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsComponentInformationImpl);
}

void InitDefaultsSummaryInformation_BatteriesInformationEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_Summary_2fFRSummaryModelProto_2eproto::InitDefaultsComponentInformation();
  {
    void* ptr = &::DJIFRProto::Standard::_SummaryInformation_BatteriesInformationEntry_DoNotUse_default_instance_;
    new (ptr) ::DJIFRProto::Standard::SummaryInformation_BatteriesInformationEntry_DoNotUse();
  }
  ::DJIFRProto::Standard::SummaryInformation_BatteriesInformationEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsSummaryInformation_BatteriesInformationEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSummaryInformation_BatteriesInformationEntry_DoNotUseImpl);
}

void InitDefaultsSummaryInformation_CamerasInformationEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_Summary_2fFRSummaryModelProto_2eproto::InitDefaultsComponentInformation();
  {
    void* ptr = &::DJIFRProto::Standard::_SummaryInformation_CamerasInformationEntry_DoNotUse_default_instance_;
    new (ptr) ::DJIFRProto::Standard::SummaryInformation_CamerasInformationEntry_DoNotUse();
  }
  ::DJIFRProto::Standard::SummaryInformation_CamerasInformationEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsSummaryInformation_CamerasInformationEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSummaryInformation_CamerasInformationEntry_DoNotUseImpl);
}

void InitDefaultsSummaryInformation_GimbalsInformationEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_Summary_2fFRSummaryModelProto_2eproto::InitDefaultsComponentInformation();
  {
    void* ptr = &::DJIFRProto::Standard::_SummaryInformation_GimbalsInformationEntry_DoNotUse_default_instance_;
    new (ptr) ::DJIFRProto::Standard::SummaryInformation_GimbalsInformationEntry_DoNotUse();
  }
  ::DJIFRProto::Standard::SummaryInformation_GimbalsInformationEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsSummaryInformation_GimbalsInformationEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSummaryInformation_GimbalsInformationEntry_DoNotUseImpl);
}

void InitDefaultsSummaryInformationImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_Summary_2fFRSummaryModelProto_2eproto::InitDefaultsSummaryInformation_BatteriesInformationEntry_DoNotUse();
  protobuf_Summary_2fFRSummaryModelProto_2eproto::InitDefaultsSummaryInformation_CamerasInformationEntry_DoNotUse();
  protobuf_Summary_2fFRSummaryModelProto_2eproto::InitDefaultsSummaryInformation_GimbalsInformationEntry_DoNotUse();
  protobuf_Summary_2fFRSummaryModelProto_2eproto::InitDefaultsComponentInformation();
  protobuf_Common_2fFRCommonModelProto_2eproto::InitDefaultsLocationCoordinate2D();
  {
    void* ptr = &::DJIFRProto::Standard::_SummaryInformation_default_instance_;
    new (ptr) ::DJIFRProto::Standard::SummaryInformation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DJIFRProto::Standard::SummaryInformation::InitAsDefaultInstance();
}

void InitDefaultsSummaryInformation() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSummaryInformationImpl);
}

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::ComponentInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::ComponentInformation, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::ComponentInformation, firmwareversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::ComponentInformation, serialnumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation_BatteriesInformationEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation_BatteriesInformationEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation_BatteriesInformationEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation_BatteriesInformationEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation_CamerasInformationEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation_CamerasInformationEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation_CamerasInformationEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation_CamerasInformationEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation_GimbalsInformationEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation_GimbalsInformationEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation_GimbalsInformationEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation_GimbalsInformationEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation, platform_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation, appversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation, batteriesinformation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation, camerasinformation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation, gimbalsinformation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation, remotecontrollerinformation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation, flightcontrollerinformation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation, aircraftname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation, starttime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation, startcoordinate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation, totaldistance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation, totaltime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation, samplingrate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation, maxheight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation, maxhorizontalspeed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation, maxvirticalspeed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation, uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation, producttype_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::DJIFRProto::Standard::ComponentInformation)},
  { 8, 15, sizeof(::DJIFRProto::Standard::SummaryInformation_BatteriesInformationEntry_DoNotUse)},
  { 17, 24, sizeof(::DJIFRProto::Standard::SummaryInformation_CamerasInformationEntry_DoNotUse)},
  { 26, 33, sizeof(::DJIFRProto::Standard::SummaryInformation_GimbalsInformationEntry_DoNotUse)},
  { 35, -1, sizeof(::DJIFRProto::Standard::SummaryInformation)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::DJIFRProto::Standard::_ComponentInformation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DJIFRProto::Standard::_SummaryInformation_BatteriesInformationEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DJIFRProto::Standard::_SummaryInformation_CamerasInformationEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DJIFRProto::Standard::_SummaryInformation_GimbalsInformationEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DJIFRProto::Standard::_SummaryInformation_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "Summary/FRSummaryModelProto.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n!Summary/FRSummaryModelProto.proto\022\023DJI"
      "FRProto.Standard\032\037Common/FRCommonModelPr"
      "oto.proto\"T\n\024ComponentInformation\022\r\n\005ind"
      "ex\030\001 \001(\005\022\027\n\017firmwareVersion\030\002 \003(\005\022\024\n\014ser"
      "ialNumber\030\003 \001(\t\"\336\t\n\022SummaryInformation\022B"
      "\n\010platform\030\001 \001(\01620.DJIFRProto.Standard.S"
      "ummaryInformation.Platform\022\022\n\nappVersion"
      "\030\002 \003(\005\022_\n\024batteriesInformation\030\003 \003(\0132A.D"
      "JIFRProto.Standard.SummaryInformation.Ba"
      "tteriesInformationEntry\022[\n\022camerasInform"
      "ation\030\004 \003(\0132\?.DJIFRProto.Standard.Summar"
      "yInformation.CamerasInformationEntry\022[\n\022"
      "gimbalsInformation\030\005 \003(\0132\?.DJIFRProto.St"
      "andard.SummaryInformation.GimbalsInforma"
      "tionEntry\022N\n\033remoteControllerInformation"
      "\030\006 \001(\0132).DJIFRProto.Standard.ComponentIn"
      "formation\022N\n\033flightControllerInformation"
      "\030\007 \001(\0132).DJIFRProto.Standard.ComponentIn"
      "formation\022\024\n\014aircraftName\030\010 \001(\t\022\021\n\tstart"
      "Time\030\n \001(\001\022B\n\017startCoordinate\030\013 \001(\0132).DJ"
      "IFRProto.Standard.LocationCoordinate2D\022\025"
      "\n\rtotalDistance\030\014 \001(\002\022\021\n\ttotalTime\030\r \001(\001"
      "\022\024\n\014samplingRate\030\016 \001(\005\022\021\n\tmaxHeight\030\017 \001("
      "\002\022\032\n\022maxHorizontalSpeed\030\020 \001(\002\022\030\n\020maxVirt"
      "icalSpeed\030\021 \001(\002\022\014\n\004uuid\030\022 \001(\t\0229\n\013product"
      "Type\030\023 \001(\0162$.DJIFRProto.Standard.SDK.Pro"
      "ductType\032f\n\031BatteriesInformationEntry\022\013\n"
      "\003key\030\001 \001(\005\0228\n\005value\030\002 \001(\0132).DJIFRProto.S"
      "tandard.ComponentInformation:\0028\001\032d\n\027Came"
      "rasInformationEntry\022\013\n\003key\030\001 \001(\005\0228\n\005valu"
      "e\030\002 \001(\0132).DJIFRProto.Standard.ComponentI"
      "nformation:\0028\001\032d\n\027GimbalsInformationEntr"
      "y\022\013\n\003key\030\001 \001(\005\0228\n\005value\030\002 \001(\0132).DJIFRPro"
      "to.Standard.ComponentInformation:\0028\001\"B\n\010"
      "Platform\022\013\n\007Unknown\020\000\022\007\n\003iOS\020\001\022\013\n\007Androi"
      "d\020\002\022\n\n\006Window\020\n\022\007\n\003Mac\020\013B\r\242\002\nDJIFRProtob"
      "\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1447);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Summary/FRSummaryModelProto.proto", &protobuf_RegisterTypes);
  ::protobuf_Common_2fFRCommonModelProto_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Summary_2fFRSummaryModelProto_2eproto
namespace DJIFRProto {
namespace Standard {
const ::google::protobuf::EnumDescriptor* SummaryInformation_Platform_descriptor() {
  protobuf_Summary_2fFRSummaryModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Summary_2fFRSummaryModelProto_2eproto::file_level_enum_descriptors[0];
}
bool SummaryInformation_Platform_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SummaryInformation_Platform SummaryInformation::Unknown;
const SummaryInformation_Platform SummaryInformation::iOS;
const SummaryInformation_Platform SummaryInformation::Android;
const SummaryInformation_Platform SummaryInformation::Window;
const SummaryInformation_Platform SummaryInformation::Mac;
const SummaryInformation_Platform SummaryInformation::Platform_MIN;
const SummaryInformation_Platform SummaryInformation::Platform_MAX;
const int SummaryInformation::Platform_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void ComponentInformation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ComponentInformation::kIndexFieldNumber;
const int ComponentInformation::kFirmwareVersionFieldNumber;
const int ComponentInformation::kSerialNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ComponentInformation::ComponentInformation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Summary_2fFRSummaryModelProto_2eproto::InitDefaultsComponentInformation();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DJIFRProto.Standard.ComponentInformation)
}
ComponentInformation::ComponentInformation(const ComponentInformation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      firmwareversion_(from.firmwareversion_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serialnumber_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serialnumber().size() > 0) {
    serialnumber_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serialnumber_);
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.ComponentInformation)
}

void ComponentInformation::SharedCtor() {
  serialnumber_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_ = 0;
  _cached_size_ = 0;
}

ComponentInformation::~ComponentInformation() {
  // @@protoc_insertion_point(destructor:DJIFRProto.Standard.ComponentInformation)
  SharedDtor();
}

void ComponentInformation::SharedDtor() {
  serialnumber_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ComponentInformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComponentInformation::descriptor() {
  ::protobuf_Summary_2fFRSummaryModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Summary_2fFRSummaryModelProto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ComponentInformation& ComponentInformation::default_instance() {
  ::protobuf_Summary_2fFRSummaryModelProto_2eproto::InitDefaultsComponentInformation();
  return *internal_default_instance();
}

ComponentInformation* ComponentInformation::New(::google::protobuf::Arena* arena) const {
  ComponentInformation* n = new ComponentInformation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ComponentInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:DJIFRProto.Standard.ComponentInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  firmwareversion_.Clear();
  serialnumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_ = 0;
  _internal_metadata_.Clear();
}

bool ComponentInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DJIFRProto.Standard.ComponentInformation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 firmwareVersion = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_firmwareversion())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_firmwareversion())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string serialNumber = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serialnumber()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serialnumber().data(), static_cast<int>(this->serialnumber().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DJIFRProto.Standard.ComponentInformation.serialNumber"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DJIFRProto.Standard.ComponentInformation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DJIFRProto.Standard.ComponentInformation)
  return false;
#undef DO_
}

void ComponentInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DJIFRProto.Standard.ComponentInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // repeated int32 firmwareVersion = 2;
  if (this->firmwareversion_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _firmwareversion_cached_byte_size_));
  }
  for (int i = 0, n = this->firmwareversion_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->firmwareversion(i), output);
  }

  // string serialNumber = 3;
  if (this->serialnumber().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serialnumber().data(), static_cast<int>(this->serialnumber().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DJIFRProto.Standard.ComponentInformation.serialNumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->serialnumber(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DJIFRProto.Standard.ComponentInformation)
}

::google::protobuf::uint8* ComponentInformation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DJIFRProto.Standard.ComponentInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // repeated int32 firmwareVersion = 2;
  if (this->firmwareversion_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _firmwareversion_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->firmwareversion_, target);
  }

  // string serialNumber = 3;
  if (this->serialnumber().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serialnumber().data(), static_cast<int>(this->serialnumber().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DJIFRProto.Standard.ComponentInformation.serialNumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->serialnumber(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DJIFRProto.Standard.ComponentInformation)
  return target;
}

size_t ComponentInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DJIFRProto.Standard.ComponentInformation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 firmwareVersion = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->firmwareversion_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _firmwareversion_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string serialNumber = 3;
  if (this->serialnumber().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serialnumber());
  }

  // int32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComponentInformation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DJIFRProto.Standard.ComponentInformation)
  GOOGLE_DCHECK_NE(&from, this);
  const ComponentInformation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ComponentInformation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DJIFRProto.Standard.ComponentInformation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DJIFRProto.Standard.ComponentInformation)
    MergeFrom(*source);
  }
}

void ComponentInformation::MergeFrom(const ComponentInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DJIFRProto.Standard.ComponentInformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  firmwareversion_.MergeFrom(from.firmwareversion_);
  if (from.serialnumber().size() > 0) {

    serialnumber_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serialnumber_);
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
}

void ComponentInformation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DJIFRProto.Standard.ComponentInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComponentInformation::CopyFrom(const ComponentInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DJIFRProto.Standard.ComponentInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComponentInformation::IsInitialized() const {
  return true;
}

void ComponentInformation::Swap(ComponentInformation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ComponentInformation::InternalSwap(ComponentInformation* other) {
  using std::swap;
  firmwareversion_.InternalSwap(&other->firmwareversion_);
  serialnumber_.Swap(&other->serialnumber_);
  swap(index_, other->index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ComponentInformation::GetMetadata() const {
  protobuf_Summary_2fFRSummaryModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Summary_2fFRSummaryModelProto_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

SummaryInformation_BatteriesInformationEntry_DoNotUse::SummaryInformation_BatteriesInformationEntry_DoNotUse() {}
SummaryInformation_BatteriesInformationEntry_DoNotUse::SummaryInformation_BatteriesInformationEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void SummaryInformation_BatteriesInformationEntry_DoNotUse::MergeFrom(const SummaryInformation_BatteriesInformationEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata SummaryInformation_BatteriesInformationEntry_DoNotUse::GetMetadata() const {
  ::protobuf_Summary_2fFRSummaryModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Summary_2fFRSummaryModelProto_2eproto::file_level_metadata[1];
}
void SummaryInformation_BatteriesInformationEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

SummaryInformation_CamerasInformationEntry_DoNotUse::SummaryInformation_CamerasInformationEntry_DoNotUse() {}
SummaryInformation_CamerasInformationEntry_DoNotUse::SummaryInformation_CamerasInformationEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void SummaryInformation_CamerasInformationEntry_DoNotUse::MergeFrom(const SummaryInformation_CamerasInformationEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata SummaryInformation_CamerasInformationEntry_DoNotUse::GetMetadata() const {
  ::protobuf_Summary_2fFRSummaryModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Summary_2fFRSummaryModelProto_2eproto::file_level_metadata[2];
}
void SummaryInformation_CamerasInformationEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

SummaryInformation_GimbalsInformationEntry_DoNotUse::SummaryInformation_GimbalsInformationEntry_DoNotUse() {}
SummaryInformation_GimbalsInformationEntry_DoNotUse::SummaryInformation_GimbalsInformationEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void SummaryInformation_GimbalsInformationEntry_DoNotUse::MergeFrom(const SummaryInformation_GimbalsInformationEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata SummaryInformation_GimbalsInformationEntry_DoNotUse::GetMetadata() const {
  ::protobuf_Summary_2fFRSummaryModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Summary_2fFRSummaryModelProto_2eproto::file_level_metadata[3];
}
void SummaryInformation_GimbalsInformationEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void SummaryInformation::InitAsDefaultInstance() {
  ::DJIFRProto::Standard::_SummaryInformation_default_instance_._instance.get_mutable()->remotecontrollerinformation_ = const_cast< ::DJIFRProto::Standard::ComponentInformation*>(
      ::DJIFRProto::Standard::ComponentInformation::internal_default_instance());
  ::DJIFRProto::Standard::_SummaryInformation_default_instance_._instance.get_mutable()->flightcontrollerinformation_ = const_cast< ::DJIFRProto::Standard::ComponentInformation*>(
      ::DJIFRProto::Standard::ComponentInformation::internal_default_instance());
  ::DJIFRProto::Standard::_SummaryInformation_default_instance_._instance.get_mutable()->startcoordinate_ = const_cast< ::DJIFRProto::Standard::LocationCoordinate2D*>(
      ::DJIFRProto::Standard::LocationCoordinate2D::internal_default_instance());
}
void SummaryInformation::clear_startcoordinate() {
  if (GetArenaNoVirtual() == NULL && startcoordinate_ != NULL) {
    delete startcoordinate_;
  }
  startcoordinate_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SummaryInformation::kPlatformFieldNumber;
const int SummaryInformation::kAppVersionFieldNumber;
const int SummaryInformation::kBatteriesInformationFieldNumber;
const int SummaryInformation::kCamerasInformationFieldNumber;
const int SummaryInformation::kGimbalsInformationFieldNumber;
const int SummaryInformation::kRemoteControllerInformationFieldNumber;
const int SummaryInformation::kFlightControllerInformationFieldNumber;
const int SummaryInformation::kAircraftNameFieldNumber;
const int SummaryInformation::kStartTimeFieldNumber;
const int SummaryInformation::kStartCoordinateFieldNumber;
const int SummaryInformation::kTotalDistanceFieldNumber;
const int SummaryInformation::kTotalTimeFieldNumber;
const int SummaryInformation::kSamplingRateFieldNumber;
const int SummaryInformation::kMaxHeightFieldNumber;
const int SummaryInformation::kMaxHorizontalSpeedFieldNumber;
const int SummaryInformation::kMaxVirticalSpeedFieldNumber;
const int SummaryInformation::kUuidFieldNumber;
const int SummaryInformation::kProductTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SummaryInformation::SummaryInformation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Summary_2fFRSummaryModelProto_2eproto::InitDefaultsSummaryInformation();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DJIFRProto.Standard.SummaryInformation)
}
SummaryInformation::SummaryInformation(const SummaryInformation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      appversion_(from.appversion_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  batteriesinformation_.MergeFrom(from.batteriesinformation_);
  camerasinformation_.MergeFrom(from.camerasinformation_);
  gimbalsinformation_.MergeFrom(from.gimbalsinformation_);
  aircraftname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.aircraftname().size() > 0) {
    aircraftname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aircraftname_);
  }
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uuid().size() > 0) {
    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.has_remotecontrollerinformation()) {
    remotecontrollerinformation_ = new ::DJIFRProto::Standard::ComponentInformation(*from.remotecontrollerinformation_);
  } else {
    remotecontrollerinformation_ = NULL;
  }
  if (from.has_flightcontrollerinformation()) {
    flightcontrollerinformation_ = new ::DJIFRProto::Standard::ComponentInformation(*from.flightcontrollerinformation_);
  } else {
    flightcontrollerinformation_ = NULL;
  }
  if (from.has_startcoordinate()) {
    startcoordinate_ = new ::DJIFRProto::Standard::LocationCoordinate2D(*from.startcoordinate_);
  } else {
    startcoordinate_ = NULL;
  }
  ::memcpy(&platform_, &from.platform_,
    static_cast<size_t>(reinterpret_cast<char*>(&producttype_) -
    reinterpret_cast<char*>(&platform_)) + sizeof(producttype_));
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.SummaryInformation)
}

void SummaryInformation::SharedCtor() {
  aircraftname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&remotecontrollerinformation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&producttype_) -
      reinterpret_cast<char*>(&remotecontrollerinformation_)) + sizeof(producttype_));
  _cached_size_ = 0;
}

SummaryInformation::~SummaryInformation() {
  // @@protoc_insertion_point(destructor:DJIFRProto.Standard.SummaryInformation)
  SharedDtor();
}

void SummaryInformation::SharedDtor() {
  aircraftname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete remotecontrollerinformation_;
  if (this != internal_default_instance()) delete flightcontrollerinformation_;
  if (this != internal_default_instance()) delete startcoordinate_;
}

void SummaryInformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SummaryInformation::descriptor() {
  ::protobuf_Summary_2fFRSummaryModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Summary_2fFRSummaryModelProto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SummaryInformation& SummaryInformation::default_instance() {
  ::protobuf_Summary_2fFRSummaryModelProto_2eproto::InitDefaultsSummaryInformation();
  return *internal_default_instance();
}

SummaryInformation* SummaryInformation::New(::google::protobuf::Arena* arena) const {
  SummaryInformation* n = new SummaryInformation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SummaryInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:DJIFRProto.Standard.SummaryInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appversion_.Clear();
  batteriesinformation_.Clear();
  camerasinformation_.Clear();
  gimbalsinformation_.Clear();
  aircraftname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && remotecontrollerinformation_ != NULL) {
    delete remotecontrollerinformation_;
  }
  remotecontrollerinformation_ = NULL;
  if (GetArenaNoVirtual() == NULL && flightcontrollerinformation_ != NULL) {
    delete flightcontrollerinformation_;
  }
  flightcontrollerinformation_ = NULL;
  if (GetArenaNoVirtual() == NULL && startcoordinate_ != NULL) {
    delete startcoordinate_;
  }
  startcoordinate_ = NULL;
  ::memset(&platform_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&producttype_) -
      reinterpret_cast<char*>(&platform_)) + sizeof(producttype_));
  _internal_metadata_.Clear();
}

bool SummaryInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DJIFRProto.Standard.SummaryInformation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .DJIFRProto.Standard.SummaryInformation.Platform platform = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_platform(static_cast< ::DJIFRProto::Standard::SummaryInformation_Platform >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 appVersion = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_appversion())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_appversion())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int32, .DJIFRProto.Standard.ComponentInformation> batteriesInformation = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          SummaryInformation_BatteriesInformationEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              SummaryInformation_BatteriesInformationEntry_DoNotUse,
              ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation > > parser(&batteriesinformation_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int32, .DJIFRProto.Standard.ComponentInformation> camerasInformation = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          SummaryInformation_CamerasInformationEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              SummaryInformation_CamerasInformationEntry_DoNotUse,
              ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation > > parser(&camerasinformation_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int32, .DJIFRProto.Standard.ComponentInformation> gimbalsInformation = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          SummaryInformation_GimbalsInformationEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              SummaryInformation_GimbalsInformationEntry_DoNotUse,
              ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation > > parser(&gimbalsinformation_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DJIFRProto.Standard.ComponentInformation remoteControllerInformation = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_remotecontrollerinformation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DJIFRProto.Standard.ComponentInformation flightControllerInformation = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_flightcontrollerinformation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string aircraftName = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aircraftname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->aircraftname().data(), static_cast<int>(this->aircraftname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DJIFRProto.Standard.SummaryInformation.aircraftName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double startTime = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &starttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DJIFRProto.Standard.LocationCoordinate2D startCoordinate = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_startcoordinate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float totalDistance = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &totaldistance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double totalTime = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &totaltime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 samplingRate = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &samplingrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float maxHeight = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxheight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float maxHorizontalSpeed = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxhorizontalspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float maxVirticalSpeed = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u /* 141 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxvirticalspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string uuid = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), static_cast<int>(this->uuid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DJIFRProto.Standard.SummaryInformation.uuid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DJIFRProto.Standard.SDK.ProductType productType = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_producttype(static_cast< ::DJIFRProto::Standard::SDK_ProductType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DJIFRProto.Standard.SummaryInformation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DJIFRProto.Standard.SummaryInformation)
  return false;
#undef DO_
}

void SummaryInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DJIFRProto.Standard.SummaryInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DJIFRProto.Standard.SummaryInformation.Platform platform = 1;
  if (this->platform() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->platform(), output);
  }

  // repeated int32 appVersion = 2;
  if (this->appversion_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _appversion_cached_byte_size_));
  }
  for (int i = 0, n = this->appversion_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->appversion(i), output);
  }

  // map<int32, .DJIFRProto.Standard.ComponentInformation> batteriesInformation = 3;
  if (!this->batteriesinformation().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->batteriesinformation().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->batteriesinformation().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation >::const_iterator
          it = this->batteriesinformation().begin();
          it != this->batteriesinformation().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<SummaryInformation_BatteriesInformationEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(batteriesinformation_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<SummaryInformation_BatteriesInformationEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation >::const_iterator
          it = this->batteriesinformation().begin();
          it != this->batteriesinformation().end(); ++it) {
        entry.reset(batteriesinformation_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    }
  }

  // map<int32, .DJIFRProto.Standard.ComponentInformation> camerasInformation = 4;
  if (!this->camerasinformation().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->camerasinformation().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->camerasinformation().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation >::const_iterator
          it = this->camerasinformation().begin();
          it != this->camerasinformation().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<SummaryInformation_CamerasInformationEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(camerasinformation_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<SummaryInformation_CamerasInformationEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation >::const_iterator
          it = this->camerasinformation().begin();
          it != this->camerasinformation().end(); ++it) {
        entry.reset(camerasinformation_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
      }
    }
  }

  // map<int32, .DJIFRProto.Standard.ComponentInformation> gimbalsInformation = 5;
  if (!this->gimbalsinformation().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->gimbalsinformation().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->gimbalsinformation().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation >::const_iterator
          it = this->gimbalsinformation().begin();
          it != this->gimbalsinformation().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<SummaryInformation_GimbalsInformationEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(gimbalsinformation_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<SummaryInformation_GimbalsInformationEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation >::const_iterator
          it = this->gimbalsinformation().begin();
          it != this->gimbalsinformation().end(); ++it) {
        entry.reset(gimbalsinformation_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
      }
    }
  }

  // .DJIFRProto.Standard.ComponentInformation remoteControllerInformation = 6;
  if (this->has_remotecontrollerinformation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->remotecontrollerinformation_, output);
  }

  // .DJIFRProto.Standard.ComponentInformation flightControllerInformation = 7;
  if (this->has_flightcontrollerinformation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->flightcontrollerinformation_, output);
  }

  // string aircraftName = 8;
  if (this->aircraftname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->aircraftname().data(), static_cast<int>(this->aircraftname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DJIFRProto.Standard.SummaryInformation.aircraftName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->aircraftname(), output);
  }

  // double startTime = 10;
  if (this->starttime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->starttime(), output);
  }

  // .DJIFRProto.Standard.LocationCoordinate2D startCoordinate = 11;
  if (this->has_startcoordinate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->startcoordinate_, output);
  }

  // float totalDistance = 12;
  if (this->totaldistance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->totaldistance(), output);
  }

  // double totalTime = 13;
  if (this->totaltime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->totaltime(), output);
  }

  // int32 samplingRate = 14;
  if (this->samplingrate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->samplingrate(), output);
  }

  // float maxHeight = 15;
  if (this->maxheight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->maxheight(), output);
  }

  // float maxHorizontalSpeed = 16;
  if (this->maxhorizontalspeed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->maxhorizontalspeed(), output);
  }

  // float maxVirticalSpeed = 17;
  if (this->maxvirticalspeed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->maxvirticalspeed(), output);
  }

  // string uuid = 18;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), static_cast<int>(this->uuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DJIFRProto.Standard.SummaryInformation.uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->uuid(), output);
  }

  // .DJIFRProto.Standard.SDK.ProductType productType = 19;
  if (this->producttype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->producttype(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DJIFRProto.Standard.SummaryInformation)
}

::google::protobuf::uint8* SummaryInformation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DJIFRProto.Standard.SummaryInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DJIFRProto.Standard.SummaryInformation.Platform platform = 1;
  if (this->platform() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->platform(), target);
  }

  // repeated int32 appVersion = 2;
  if (this->appversion_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _appversion_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->appversion_, target);
  }

  // map<int32, .DJIFRProto.Standard.ComponentInformation> batteriesInformation = 3;
  if (!this->batteriesinformation().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->batteriesinformation().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->batteriesinformation().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation >::const_iterator
          it = this->batteriesinformation().begin();
          it != this->batteriesinformation().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<SummaryInformation_BatteriesInformationEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(batteriesinformation_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<SummaryInformation_BatteriesInformationEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation >::const_iterator
          it = this->batteriesinformation().begin();
          it != this->batteriesinformation().end(); ++it) {
        entry.reset(batteriesinformation_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    }
  }

  // map<int32, .DJIFRProto.Standard.ComponentInformation> camerasInformation = 4;
  if (!this->camerasinformation().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->camerasinformation().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->camerasinformation().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation >::const_iterator
          it = this->camerasinformation().begin();
          it != this->camerasinformation().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<SummaryInformation_CamerasInformationEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(camerasinformation_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<SummaryInformation_CamerasInformationEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation >::const_iterator
          it = this->camerasinformation().begin();
          it != this->camerasinformation().end(); ++it) {
        entry.reset(camerasinformation_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
      }
    }
  }

  // map<int32, .DJIFRProto.Standard.ComponentInformation> gimbalsInformation = 5;
  if (!this->gimbalsinformation().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->gimbalsinformation().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->gimbalsinformation().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation >::const_iterator
          it = this->gimbalsinformation().begin();
          it != this->gimbalsinformation().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<SummaryInformation_GimbalsInformationEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(gimbalsinformation_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<SummaryInformation_GimbalsInformationEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation >::const_iterator
          it = this->gimbalsinformation().begin();
          it != this->gimbalsinformation().end(); ++it) {
        entry.reset(gimbalsinformation_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
      }
    }
  }

  // .DJIFRProto.Standard.ComponentInformation remoteControllerInformation = 6;
  if (this->has_remotecontrollerinformation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->remotecontrollerinformation_, deterministic, target);
  }

  // .DJIFRProto.Standard.ComponentInformation flightControllerInformation = 7;
  if (this->has_flightcontrollerinformation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->flightcontrollerinformation_, deterministic, target);
  }

  // string aircraftName = 8;
  if (this->aircraftname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->aircraftname().data(), static_cast<int>(this->aircraftname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DJIFRProto.Standard.SummaryInformation.aircraftName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->aircraftname(), target);
  }

  // double startTime = 10;
  if (this->starttime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->starttime(), target);
  }

  // .DJIFRProto.Standard.LocationCoordinate2D startCoordinate = 11;
  if (this->has_startcoordinate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, *this->startcoordinate_, deterministic, target);
  }

  // float totalDistance = 12;
  if (this->totaldistance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->totaldistance(), target);
  }

  // double totalTime = 13;
  if (this->totaltime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->totaltime(), target);
  }

  // int32 samplingRate = 14;
  if (this->samplingrate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->samplingrate(), target);
  }

  // float maxHeight = 15;
  if (this->maxheight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->maxheight(), target);
  }

  // float maxHorizontalSpeed = 16;
  if (this->maxhorizontalspeed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->maxhorizontalspeed(), target);
  }

  // float maxVirticalSpeed = 17;
  if (this->maxvirticalspeed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->maxvirticalspeed(), target);
  }

  // string uuid = 18;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), static_cast<int>(this->uuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DJIFRProto.Standard.SummaryInformation.uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->uuid(), target);
  }

  // .DJIFRProto.Standard.SDK.ProductType productType = 19;
  if (this->producttype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->producttype(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DJIFRProto.Standard.SummaryInformation)
  return target;
}

size_t SummaryInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DJIFRProto.Standard.SummaryInformation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 appVersion = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->appversion_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _appversion_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // map<int32, .DJIFRProto.Standard.ComponentInformation> batteriesInformation = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->batteriesinformation_size());
  {
    ::google::protobuf::scoped_ptr<SummaryInformation_BatteriesInformationEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation >::const_iterator
        it = this->batteriesinformation().begin();
        it != this->batteriesinformation().end(); ++it) {
      entry.reset(batteriesinformation_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<int32, .DJIFRProto.Standard.ComponentInformation> camerasInformation = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->camerasinformation_size());
  {
    ::google::protobuf::scoped_ptr<SummaryInformation_CamerasInformationEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation >::const_iterator
        it = this->camerasinformation().begin();
        it != this->camerasinformation().end(); ++it) {
      entry.reset(camerasinformation_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<int32, .DJIFRProto.Standard.ComponentInformation> gimbalsInformation = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->gimbalsinformation_size());
  {
    ::google::protobuf::scoped_ptr<SummaryInformation_GimbalsInformationEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation >::const_iterator
        it = this->gimbalsinformation().begin();
        it != this->gimbalsinformation().end(); ++it) {
      entry.reset(gimbalsinformation_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string aircraftName = 8;
  if (this->aircraftname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->aircraftname());
  }

  // string uuid = 18;
  if (this->uuid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  // .DJIFRProto.Standard.ComponentInformation remoteControllerInformation = 6;
  if (this->has_remotecontrollerinformation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->remotecontrollerinformation_);
  }

  // .DJIFRProto.Standard.ComponentInformation flightControllerInformation = 7;
  if (this->has_flightcontrollerinformation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->flightcontrollerinformation_);
  }

  // .DJIFRProto.Standard.LocationCoordinate2D startCoordinate = 11;
  if (this->has_startcoordinate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->startcoordinate_);
  }

  // .DJIFRProto.Standard.SummaryInformation.Platform platform = 1;
  if (this->platform() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->platform());
  }

  // float totalDistance = 12;
  if (this->totaldistance() != 0) {
    total_size += 1 + 4;
  }

  // double startTime = 10;
  if (this->starttime() != 0) {
    total_size += 1 + 8;
  }

  // double totalTime = 13;
  if (this->totaltime() != 0) {
    total_size += 1 + 8;
  }

  // int32 samplingRate = 14;
  if (this->samplingrate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->samplingrate());
  }

  // float maxHeight = 15;
  if (this->maxheight() != 0) {
    total_size += 1 + 4;
  }

  // float maxHorizontalSpeed = 16;
  if (this->maxhorizontalspeed() != 0) {
    total_size += 2 + 4;
  }

  // float maxVirticalSpeed = 17;
  if (this->maxvirticalspeed() != 0) {
    total_size += 2 + 4;
  }

  // .DJIFRProto.Standard.SDK.ProductType productType = 19;
  if (this->producttype() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->producttype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SummaryInformation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DJIFRProto.Standard.SummaryInformation)
  GOOGLE_DCHECK_NE(&from, this);
  const SummaryInformation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SummaryInformation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DJIFRProto.Standard.SummaryInformation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DJIFRProto.Standard.SummaryInformation)
    MergeFrom(*source);
  }
}

void SummaryInformation::MergeFrom(const SummaryInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DJIFRProto.Standard.SummaryInformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  appversion_.MergeFrom(from.appversion_);
  batteriesinformation_.MergeFrom(from.batteriesinformation_);
  camerasinformation_.MergeFrom(from.camerasinformation_);
  gimbalsinformation_.MergeFrom(from.gimbalsinformation_);
  if (from.aircraftname().size() > 0) {

    aircraftname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aircraftname_);
  }
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.has_remotecontrollerinformation()) {
    mutable_remotecontrollerinformation()->::DJIFRProto::Standard::ComponentInformation::MergeFrom(from.remotecontrollerinformation());
  }
  if (from.has_flightcontrollerinformation()) {
    mutable_flightcontrollerinformation()->::DJIFRProto::Standard::ComponentInformation::MergeFrom(from.flightcontrollerinformation());
  }
  if (from.has_startcoordinate()) {
    mutable_startcoordinate()->::DJIFRProto::Standard::LocationCoordinate2D::MergeFrom(from.startcoordinate());
  }
  if (from.platform() != 0) {
    set_platform(from.platform());
  }
  if (from.totaldistance() != 0) {
    set_totaldistance(from.totaldistance());
  }
  if (from.starttime() != 0) {
    set_starttime(from.starttime());
  }
  if (from.totaltime() != 0) {
    set_totaltime(from.totaltime());
  }
  if (from.samplingrate() != 0) {
    set_samplingrate(from.samplingrate());
  }
  if (from.maxheight() != 0) {
    set_maxheight(from.maxheight());
  }
  if (from.maxhorizontalspeed() != 0) {
    set_maxhorizontalspeed(from.maxhorizontalspeed());
  }
  if (from.maxvirticalspeed() != 0) {
    set_maxvirticalspeed(from.maxvirticalspeed());
  }
  if (from.producttype() != 0) {
    set_producttype(from.producttype());
  }
}

void SummaryInformation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DJIFRProto.Standard.SummaryInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SummaryInformation::CopyFrom(const SummaryInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DJIFRProto.Standard.SummaryInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SummaryInformation::IsInitialized() const {
  return true;
}

void SummaryInformation::Swap(SummaryInformation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SummaryInformation::InternalSwap(SummaryInformation* other) {
  using std::swap;
  appversion_.InternalSwap(&other->appversion_);
  batteriesinformation_.Swap(&other->batteriesinformation_);
  camerasinformation_.Swap(&other->camerasinformation_);
  gimbalsinformation_.Swap(&other->gimbalsinformation_);
  aircraftname_.Swap(&other->aircraftname_);
  uuid_.Swap(&other->uuid_);
  swap(remotecontrollerinformation_, other->remotecontrollerinformation_);
  swap(flightcontrollerinformation_, other->flightcontrollerinformation_);
  swap(startcoordinate_, other->startcoordinate_);
  swap(platform_, other->platform_);
  swap(totaldistance_, other->totaldistance_);
  swap(starttime_, other->starttime_);
  swap(totaltime_, other->totaltime_);
  swap(samplingrate_, other->samplingrate_);
  swap(maxheight_, other->maxheight_);
  swap(maxhorizontalspeed_, other->maxhorizontalspeed_);
  swap(maxvirticalspeed_, other->maxvirticalspeed_);
  swap(producttype_, other->producttype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SummaryInformation::GetMetadata() const {
  protobuf_Summary_2fFRSummaryModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Summary_2fFRSummaryModelProto_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Standard
}  // namespace DJIFRProto

// @@protoc_insertion_point(global_scope)
