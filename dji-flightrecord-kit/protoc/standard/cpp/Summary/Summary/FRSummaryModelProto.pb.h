// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Summary/FRSummaryModelProto.proto

#ifndef PROTOBUF_Summary_2fFRSummaryModelProto_2eproto__INCLUDED
#define PROTOBUF_Summary_2fFRSummaryModelProto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Common/FRCommonModelProto.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_Summary_2fFRSummaryModelProto_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsComponentInformationImpl();
void InitDefaultsComponentInformation();
void InitDefaultsSummaryInformation_BatteriesInformationEntry_DoNotUseImpl();
void InitDefaultsSummaryInformation_BatteriesInformationEntry_DoNotUse();
void InitDefaultsSummaryInformation_CamerasInformationEntry_DoNotUseImpl();
void InitDefaultsSummaryInformation_CamerasInformationEntry_DoNotUse();
void InitDefaultsSummaryInformation_GimbalsInformationEntry_DoNotUseImpl();
void InitDefaultsSummaryInformation_GimbalsInformationEntry_DoNotUse();
void InitDefaultsSummaryInformationImpl();
void InitDefaultsSummaryInformation();
inline void InitDefaults() {
  InitDefaultsComponentInformation();
  InitDefaultsSummaryInformation_BatteriesInformationEntry_DoNotUse();
  InitDefaultsSummaryInformation_CamerasInformationEntry_DoNotUse();
  InitDefaultsSummaryInformation_GimbalsInformationEntry_DoNotUse();
  InitDefaultsSummaryInformation();
}
}  // namespace protobuf_Summary_2fFRSummaryModelProto_2eproto
namespace DJIFRProto {
namespace Standard {
class ComponentInformation;
class ComponentInformationDefaultTypeInternal;
extern ComponentInformationDefaultTypeInternal _ComponentInformation_default_instance_;
class SummaryInformation;
class SummaryInformationDefaultTypeInternal;
extern SummaryInformationDefaultTypeInternal _SummaryInformation_default_instance_;
class SummaryInformation_BatteriesInformationEntry_DoNotUse;
class SummaryInformation_BatteriesInformationEntry_DoNotUseDefaultTypeInternal;
extern SummaryInformation_BatteriesInformationEntry_DoNotUseDefaultTypeInternal _SummaryInformation_BatteriesInformationEntry_DoNotUse_default_instance_;
class SummaryInformation_CamerasInformationEntry_DoNotUse;
class SummaryInformation_CamerasInformationEntry_DoNotUseDefaultTypeInternal;
extern SummaryInformation_CamerasInformationEntry_DoNotUseDefaultTypeInternal _SummaryInformation_CamerasInformationEntry_DoNotUse_default_instance_;
class SummaryInformation_GimbalsInformationEntry_DoNotUse;
class SummaryInformation_GimbalsInformationEntry_DoNotUseDefaultTypeInternal;
extern SummaryInformation_GimbalsInformationEntry_DoNotUseDefaultTypeInternal _SummaryInformation_GimbalsInformationEntry_DoNotUse_default_instance_;
}  // namespace Standard
}  // namespace DJIFRProto
namespace DJIFRProto {
namespace Standard {

enum SummaryInformation_Platform {
  SummaryInformation_Platform_Unknown = 0,
  SummaryInformation_Platform_iOS = 1,
  SummaryInformation_Platform_Android = 2,
  SummaryInformation_Platform_Window = 10,
  SummaryInformation_Platform_Mac = 11,
  SummaryInformation_Platform_SummaryInformation_Platform_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SummaryInformation_Platform_SummaryInformation_Platform_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SummaryInformation_Platform_IsValid(int value);
const SummaryInformation_Platform SummaryInformation_Platform_Platform_MIN = SummaryInformation_Platform_Unknown;
const SummaryInformation_Platform SummaryInformation_Platform_Platform_MAX = SummaryInformation_Platform_Mac;
const int SummaryInformation_Platform_Platform_ARRAYSIZE = SummaryInformation_Platform_Platform_MAX + 1;

const ::google::protobuf::EnumDescriptor* SummaryInformation_Platform_descriptor();
inline const ::std::string& SummaryInformation_Platform_Name(SummaryInformation_Platform value) {
  return ::google::protobuf::internal::NameOfEnum(
    SummaryInformation_Platform_descriptor(), value);
}
inline bool SummaryInformation_Platform_Parse(
    const ::std::string& name, SummaryInformation_Platform* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SummaryInformation_Platform>(
    SummaryInformation_Platform_descriptor(), name, value);
}
// ===================================================================

class ComponentInformation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.ComponentInformation) */ {
 public:
  ComponentInformation();
  virtual ~ComponentInformation();

  ComponentInformation(const ComponentInformation& from);

  inline ComponentInformation& operator=(const ComponentInformation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ComponentInformation(ComponentInformation&& from) noexcept
    : ComponentInformation() {
    *this = ::std::move(from);
  }

  inline ComponentInformation& operator=(ComponentInformation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ComponentInformation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ComponentInformation* internal_default_instance() {
    return reinterpret_cast<const ComponentInformation*>(
               &_ComponentInformation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ComponentInformation* other);
  friend void swap(ComponentInformation& a, ComponentInformation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ComponentInformation* New() const PROTOBUF_FINAL { return New(NULL); }

  ComponentInformation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ComponentInformation& from);
  void MergeFrom(const ComponentInformation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ComponentInformation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 firmwareVersion = 2;
  int firmwareversion_size() const;
  void clear_firmwareversion();
  static const int kFirmwareVersionFieldNumber = 2;
  ::google::protobuf::int32 firmwareversion(int index) const;
  void set_firmwareversion(int index, ::google::protobuf::int32 value);
  void add_firmwareversion(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      firmwareversion() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_firmwareversion();

  // string serialNumber = 3;
  void clear_serialnumber();
  static const int kSerialNumberFieldNumber = 3;
  const ::std::string& serialnumber() const;
  void set_serialnumber(const ::std::string& value);
  #if LANG_CXX11
  void set_serialnumber(::std::string&& value);
  #endif
  void set_serialnumber(const char* value);
  void set_serialnumber(const char* value, size_t size);
  ::std::string* mutable_serialnumber();
  ::std::string* release_serialnumber();
  void set_allocated_serialnumber(::std::string* serialnumber);

  // int32 index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.ComponentInformation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > firmwareversion_;
  mutable int _firmwareversion_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr serialnumber_;
  ::google::protobuf::int32 index_;
  mutable int _cached_size_;
  friend struct ::protobuf_Summary_2fFRSummaryModelProto_2eproto::TableStruct;
  friend void ::protobuf_Summary_2fFRSummaryModelProto_2eproto::InitDefaultsComponentInformationImpl();
};
// -------------------------------------------------------------------

class SummaryInformation_BatteriesInformationEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<SummaryInformation_BatteriesInformationEntry_DoNotUse, 
    ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<SummaryInformation_BatteriesInformationEntry_DoNotUse, 
    ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  SummaryInformation_BatteriesInformationEntry_DoNotUse();
  SummaryInformation_BatteriesInformationEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const SummaryInformation_BatteriesInformationEntry_DoNotUse& other);
  static const SummaryInformation_BatteriesInformationEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SummaryInformation_BatteriesInformationEntry_DoNotUse*>(&_SummaryInformation_BatteriesInformationEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class SummaryInformation_CamerasInformationEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<SummaryInformation_CamerasInformationEntry_DoNotUse, 
    ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<SummaryInformation_CamerasInformationEntry_DoNotUse, 
    ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  SummaryInformation_CamerasInformationEntry_DoNotUse();
  SummaryInformation_CamerasInformationEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const SummaryInformation_CamerasInformationEntry_DoNotUse& other);
  static const SummaryInformation_CamerasInformationEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SummaryInformation_CamerasInformationEntry_DoNotUse*>(&_SummaryInformation_CamerasInformationEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class SummaryInformation_GimbalsInformationEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<SummaryInformation_GimbalsInformationEntry_DoNotUse, 
    ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<SummaryInformation_GimbalsInformationEntry_DoNotUse, 
    ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  SummaryInformation_GimbalsInformationEntry_DoNotUse();
  SummaryInformation_GimbalsInformationEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const SummaryInformation_GimbalsInformationEntry_DoNotUse& other);
  static const SummaryInformation_GimbalsInformationEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SummaryInformation_GimbalsInformationEntry_DoNotUse*>(&_SummaryInformation_GimbalsInformationEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class SummaryInformation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.SummaryInformation) */ {
 public:
  SummaryInformation();
  virtual ~SummaryInformation();

  SummaryInformation(const SummaryInformation& from);

  inline SummaryInformation& operator=(const SummaryInformation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SummaryInformation(SummaryInformation&& from) noexcept
    : SummaryInformation() {
    *this = ::std::move(from);
  }

  inline SummaryInformation& operator=(SummaryInformation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SummaryInformation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SummaryInformation* internal_default_instance() {
    return reinterpret_cast<const SummaryInformation*>(
               &_SummaryInformation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(SummaryInformation* other);
  friend void swap(SummaryInformation& a, SummaryInformation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SummaryInformation* New() const PROTOBUF_FINAL { return New(NULL); }

  SummaryInformation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SummaryInformation& from);
  void MergeFrom(const SummaryInformation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SummaryInformation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  typedef SummaryInformation_Platform Platform;
  static const Platform Unknown =
    SummaryInformation_Platform_Unknown;
  static const Platform iOS =
    SummaryInformation_Platform_iOS;
  static const Platform Android =
    SummaryInformation_Platform_Android;
  static const Platform Window =
    SummaryInformation_Platform_Window;
  static const Platform Mac =
    SummaryInformation_Platform_Mac;
  static inline bool Platform_IsValid(int value) {
    return SummaryInformation_Platform_IsValid(value);
  }
  static const Platform Platform_MIN =
    SummaryInformation_Platform_Platform_MIN;
  static const Platform Platform_MAX =
    SummaryInformation_Platform_Platform_MAX;
  static const int Platform_ARRAYSIZE =
    SummaryInformation_Platform_Platform_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Platform_descriptor() {
    return SummaryInformation_Platform_descriptor();
  }
  static inline const ::std::string& Platform_Name(Platform value) {
    return SummaryInformation_Platform_Name(value);
  }
  static inline bool Platform_Parse(const ::std::string& name,
      Platform* value) {
    return SummaryInformation_Platform_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated int32 appVersion = 2;
  int appversion_size() const;
  void clear_appversion();
  static const int kAppVersionFieldNumber = 2;
  ::google::protobuf::int32 appversion(int index) const;
  void set_appversion(int index, ::google::protobuf::int32 value);
  void add_appversion(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      appversion() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_appversion();

  // map<int32, .DJIFRProto.Standard.ComponentInformation> batteriesInformation = 3;
  int batteriesinformation_size() const;
  void clear_batteriesinformation();
  static const int kBatteriesInformationFieldNumber = 3;
  const ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation >&
      batteriesinformation() const;
  ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation >*
      mutable_batteriesinformation();

  // map<int32, .DJIFRProto.Standard.ComponentInformation> camerasInformation = 4;
  int camerasinformation_size() const;
  void clear_camerasinformation();
  static const int kCamerasInformationFieldNumber = 4;
  const ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation >&
      camerasinformation() const;
  ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation >*
      mutable_camerasinformation();

  // map<int32, .DJIFRProto.Standard.ComponentInformation> gimbalsInformation = 5;
  int gimbalsinformation_size() const;
  void clear_gimbalsinformation();
  static const int kGimbalsInformationFieldNumber = 5;
  const ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation >&
      gimbalsinformation() const;
  ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation >*
      mutable_gimbalsinformation();

  // string aircraftName = 8;
  void clear_aircraftname();
  static const int kAircraftNameFieldNumber = 8;
  const ::std::string& aircraftname() const;
  void set_aircraftname(const ::std::string& value);
  #if LANG_CXX11
  void set_aircraftname(::std::string&& value);
  #endif
  void set_aircraftname(const char* value);
  void set_aircraftname(const char* value, size_t size);
  ::std::string* mutable_aircraftname();
  ::std::string* release_aircraftname();
  void set_allocated_aircraftname(::std::string* aircraftname);

  // string uuid = 18;
  void clear_uuid();
  static const int kUuidFieldNumber = 18;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // .DJIFRProto.Standard.ComponentInformation remoteControllerInformation = 6;
  bool has_remotecontrollerinformation() const;
  void clear_remotecontrollerinformation();
  static const int kRemoteControllerInformationFieldNumber = 6;
  const ::DJIFRProto::Standard::ComponentInformation& remotecontrollerinformation() const;
  ::DJIFRProto::Standard::ComponentInformation* release_remotecontrollerinformation();
  ::DJIFRProto::Standard::ComponentInformation* mutable_remotecontrollerinformation();
  void set_allocated_remotecontrollerinformation(::DJIFRProto::Standard::ComponentInformation* remotecontrollerinformation);

  // .DJIFRProto.Standard.ComponentInformation flightControllerInformation = 7;
  bool has_flightcontrollerinformation() const;
  void clear_flightcontrollerinformation();
  static const int kFlightControllerInformationFieldNumber = 7;
  const ::DJIFRProto::Standard::ComponentInformation& flightcontrollerinformation() const;
  ::DJIFRProto::Standard::ComponentInformation* release_flightcontrollerinformation();
  ::DJIFRProto::Standard::ComponentInformation* mutable_flightcontrollerinformation();
  void set_allocated_flightcontrollerinformation(::DJIFRProto::Standard::ComponentInformation* flightcontrollerinformation);

  // .DJIFRProto.Standard.LocationCoordinate2D startCoordinate = 11;
  bool has_startcoordinate() const;
  void clear_startcoordinate();
  static const int kStartCoordinateFieldNumber = 11;
  const ::DJIFRProto::Standard::LocationCoordinate2D& startcoordinate() const;
  ::DJIFRProto::Standard::LocationCoordinate2D* release_startcoordinate();
  ::DJIFRProto::Standard::LocationCoordinate2D* mutable_startcoordinate();
  void set_allocated_startcoordinate(::DJIFRProto::Standard::LocationCoordinate2D* startcoordinate);

  // .DJIFRProto.Standard.SummaryInformation.Platform platform = 1;
  void clear_platform();
  static const int kPlatformFieldNumber = 1;
  ::DJIFRProto::Standard::SummaryInformation_Platform platform() const;
  void set_platform(::DJIFRProto::Standard::SummaryInformation_Platform value);

  // float totalDistance = 12;
  void clear_totaldistance();
  static const int kTotalDistanceFieldNumber = 12;
  float totaldistance() const;
  void set_totaldistance(float value);

  // double startTime = 10;
  void clear_starttime();
  static const int kStartTimeFieldNumber = 10;
  double starttime() const;
  void set_starttime(double value);

  // double totalTime = 13;
  void clear_totaltime();
  static const int kTotalTimeFieldNumber = 13;
  double totaltime() const;
  void set_totaltime(double value);

  // int32 samplingRate = 14;
  void clear_samplingrate();
  static const int kSamplingRateFieldNumber = 14;
  ::google::protobuf::int32 samplingrate() const;
  void set_samplingrate(::google::protobuf::int32 value);

  // float maxHeight = 15;
  void clear_maxheight();
  static const int kMaxHeightFieldNumber = 15;
  float maxheight() const;
  void set_maxheight(float value);

  // float maxHorizontalSpeed = 16;
  void clear_maxhorizontalspeed();
  static const int kMaxHorizontalSpeedFieldNumber = 16;
  float maxhorizontalspeed() const;
  void set_maxhorizontalspeed(float value);

  // float maxVirticalSpeed = 17;
  void clear_maxvirticalspeed();
  static const int kMaxVirticalSpeedFieldNumber = 17;
  float maxvirticalspeed() const;
  void set_maxvirticalspeed(float value);

  // .DJIFRProto.Standard.SDK.ProductType productType = 19;
  void clear_producttype();
  static const int kProductTypeFieldNumber = 19;
  ::DJIFRProto::Standard::SDK_ProductType producttype() const;
  void set_producttype(::DJIFRProto::Standard::SDK_ProductType value);

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.SummaryInformation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > appversion_;
  mutable int _appversion_cached_byte_size_;
  ::google::protobuf::internal::MapField<
      SummaryInformation_BatteriesInformationEntry_DoNotUse,
      ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > batteriesinformation_;
  ::google::protobuf::internal::MapField<
      SummaryInformation_CamerasInformationEntry_DoNotUse,
      ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > camerasinformation_;
  ::google::protobuf::internal::MapField<
      SummaryInformation_GimbalsInformationEntry_DoNotUse,
      ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > gimbalsinformation_;
  ::google::protobuf::internal::ArenaStringPtr aircraftname_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::DJIFRProto::Standard::ComponentInformation* remotecontrollerinformation_;
  ::DJIFRProto::Standard::ComponentInformation* flightcontrollerinformation_;
  ::DJIFRProto::Standard::LocationCoordinate2D* startcoordinate_;
  int platform_;
  float totaldistance_;
  double starttime_;
  double totaltime_;
  ::google::protobuf::int32 samplingrate_;
  float maxheight_;
  float maxhorizontalspeed_;
  float maxvirticalspeed_;
  int producttype_;
  mutable int _cached_size_;
  friend struct ::protobuf_Summary_2fFRSummaryModelProto_2eproto::TableStruct;
  friend void ::protobuf_Summary_2fFRSummaryModelProto_2eproto::InitDefaultsSummaryInformationImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ComponentInformation

// int32 index = 1;
inline void ComponentInformation::clear_index() {
  index_ = 0;
}
inline ::google::protobuf::int32 ComponentInformation::index() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.ComponentInformation.index)
  return index_;
}
inline void ComponentInformation::set_index(::google::protobuf::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.ComponentInformation.index)
}

// repeated int32 firmwareVersion = 2;
inline int ComponentInformation::firmwareversion_size() const {
  return firmwareversion_.size();
}
inline void ComponentInformation::clear_firmwareversion() {
  firmwareversion_.Clear();
}
inline ::google::protobuf::int32 ComponentInformation::firmwareversion(int index) const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.ComponentInformation.firmwareVersion)
  return firmwareversion_.Get(index);
}
inline void ComponentInformation::set_firmwareversion(int index, ::google::protobuf::int32 value) {
  firmwareversion_.Set(index, value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.ComponentInformation.firmwareVersion)
}
inline void ComponentInformation::add_firmwareversion(::google::protobuf::int32 value) {
  firmwareversion_.Add(value);
  // @@protoc_insertion_point(field_add:DJIFRProto.Standard.ComponentInformation.firmwareVersion)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ComponentInformation::firmwareversion() const {
  // @@protoc_insertion_point(field_list:DJIFRProto.Standard.ComponentInformation.firmwareVersion)
  return firmwareversion_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ComponentInformation::mutable_firmwareversion() {
  // @@protoc_insertion_point(field_mutable_list:DJIFRProto.Standard.ComponentInformation.firmwareVersion)
  return &firmwareversion_;
}

// string serialNumber = 3;
inline void ComponentInformation::clear_serialnumber() {
  serialnumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ComponentInformation::serialnumber() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.ComponentInformation.serialNumber)
  return serialnumber_.GetNoArena();
}
inline void ComponentInformation::set_serialnumber(const ::std::string& value) {
  
  serialnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.ComponentInformation.serialNumber)
}
#if LANG_CXX11
inline void ComponentInformation::set_serialnumber(::std::string&& value) {
  
  serialnumber_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DJIFRProto.Standard.ComponentInformation.serialNumber)
}
#endif
inline void ComponentInformation::set_serialnumber(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  serialnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DJIFRProto.Standard.ComponentInformation.serialNumber)
}
inline void ComponentInformation::set_serialnumber(const char* value, size_t size) {
  
  serialnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DJIFRProto.Standard.ComponentInformation.serialNumber)
}
inline ::std::string* ComponentInformation::mutable_serialnumber() {
  
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.ComponentInformation.serialNumber)
  return serialnumber_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ComponentInformation::release_serialnumber() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.ComponentInformation.serialNumber)
  
  return serialnumber_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComponentInformation::set_allocated_serialnumber(::std::string* serialnumber) {
  if (serialnumber != NULL) {
    
  } else {
    
  }
  serialnumber_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serialnumber);
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.ComponentInformation.serialNumber)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SummaryInformation

// .DJIFRProto.Standard.SummaryInformation.Platform platform = 1;
inline void SummaryInformation::clear_platform() {
  platform_ = 0;
}
inline ::DJIFRProto::Standard::SummaryInformation_Platform SummaryInformation::platform() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.SummaryInformation.platform)
  return static_cast< ::DJIFRProto::Standard::SummaryInformation_Platform >(platform_);
}
inline void SummaryInformation::set_platform(::DJIFRProto::Standard::SummaryInformation_Platform value) {
  
  platform_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.SummaryInformation.platform)
}

// repeated int32 appVersion = 2;
inline int SummaryInformation::appversion_size() const {
  return appversion_.size();
}
inline void SummaryInformation::clear_appversion() {
  appversion_.Clear();
}
inline ::google::protobuf::int32 SummaryInformation::appversion(int index) const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.SummaryInformation.appVersion)
  return appversion_.Get(index);
}
inline void SummaryInformation::set_appversion(int index, ::google::protobuf::int32 value) {
  appversion_.Set(index, value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.SummaryInformation.appVersion)
}
inline void SummaryInformation::add_appversion(::google::protobuf::int32 value) {
  appversion_.Add(value);
  // @@protoc_insertion_point(field_add:DJIFRProto.Standard.SummaryInformation.appVersion)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SummaryInformation::appversion() const {
  // @@protoc_insertion_point(field_list:DJIFRProto.Standard.SummaryInformation.appVersion)
  return appversion_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SummaryInformation::mutable_appversion() {
  // @@protoc_insertion_point(field_mutable_list:DJIFRProto.Standard.SummaryInformation.appVersion)
  return &appversion_;
}

// map<int32, .DJIFRProto.Standard.ComponentInformation> batteriesInformation = 3;
inline int SummaryInformation::batteriesinformation_size() const {
  return batteriesinformation_.size();
}
inline void SummaryInformation::clear_batteriesinformation() {
  batteriesinformation_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation >&
SummaryInformation::batteriesinformation() const {
  // @@protoc_insertion_point(field_map:DJIFRProto.Standard.SummaryInformation.batteriesInformation)
  return batteriesinformation_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation >*
SummaryInformation::mutable_batteriesinformation() {
  // @@protoc_insertion_point(field_mutable_map:DJIFRProto.Standard.SummaryInformation.batteriesInformation)
  return batteriesinformation_.MutableMap();
}

// map<int32, .DJIFRProto.Standard.ComponentInformation> camerasInformation = 4;
inline int SummaryInformation::camerasinformation_size() const {
  return camerasinformation_.size();
}
inline void SummaryInformation::clear_camerasinformation() {
  camerasinformation_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation >&
SummaryInformation::camerasinformation() const {
  // @@protoc_insertion_point(field_map:DJIFRProto.Standard.SummaryInformation.camerasInformation)
  return camerasinformation_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation >*
SummaryInformation::mutable_camerasinformation() {
  // @@protoc_insertion_point(field_mutable_map:DJIFRProto.Standard.SummaryInformation.camerasInformation)
  return camerasinformation_.MutableMap();
}

// map<int32, .DJIFRProto.Standard.ComponentInformation> gimbalsInformation = 5;
inline int SummaryInformation::gimbalsinformation_size() const {
  return gimbalsinformation_.size();
}
inline void SummaryInformation::clear_gimbalsinformation() {
  gimbalsinformation_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation >&
SummaryInformation::gimbalsinformation() const {
  // @@protoc_insertion_point(field_map:DJIFRProto.Standard.SummaryInformation.gimbalsInformation)
  return gimbalsinformation_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::ComponentInformation >*
SummaryInformation::mutable_gimbalsinformation() {
  // @@protoc_insertion_point(field_mutable_map:DJIFRProto.Standard.SummaryInformation.gimbalsInformation)
  return gimbalsinformation_.MutableMap();
}

// .DJIFRProto.Standard.ComponentInformation remoteControllerInformation = 6;
inline bool SummaryInformation::has_remotecontrollerinformation() const {
  return this != internal_default_instance() && remotecontrollerinformation_ != NULL;
}
inline void SummaryInformation::clear_remotecontrollerinformation() {
  if (GetArenaNoVirtual() == NULL && remotecontrollerinformation_ != NULL) {
    delete remotecontrollerinformation_;
  }
  remotecontrollerinformation_ = NULL;
}
inline const ::DJIFRProto::Standard::ComponentInformation& SummaryInformation::remotecontrollerinformation() const {
  const ::DJIFRProto::Standard::ComponentInformation* p = remotecontrollerinformation_;
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.SummaryInformation.remoteControllerInformation)
  return p != NULL ? *p : *reinterpret_cast<const ::DJIFRProto::Standard::ComponentInformation*>(
      &::DJIFRProto::Standard::_ComponentInformation_default_instance_);
}
inline ::DJIFRProto::Standard::ComponentInformation* SummaryInformation::release_remotecontrollerinformation() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.SummaryInformation.remoteControllerInformation)
  
  ::DJIFRProto::Standard::ComponentInformation* temp = remotecontrollerinformation_;
  remotecontrollerinformation_ = NULL;
  return temp;
}
inline ::DJIFRProto::Standard::ComponentInformation* SummaryInformation::mutable_remotecontrollerinformation() {
  
  if (remotecontrollerinformation_ == NULL) {
    remotecontrollerinformation_ = new ::DJIFRProto::Standard::ComponentInformation;
  }
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.SummaryInformation.remoteControllerInformation)
  return remotecontrollerinformation_;
}
inline void SummaryInformation::set_allocated_remotecontrollerinformation(::DJIFRProto::Standard::ComponentInformation* remotecontrollerinformation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete remotecontrollerinformation_;
  }
  if (remotecontrollerinformation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      remotecontrollerinformation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, remotecontrollerinformation, submessage_arena);
    }
    
  } else {
    
  }
  remotecontrollerinformation_ = remotecontrollerinformation;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.SummaryInformation.remoteControllerInformation)
}

// .DJIFRProto.Standard.ComponentInformation flightControllerInformation = 7;
inline bool SummaryInformation::has_flightcontrollerinformation() const {
  return this != internal_default_instance() && flightcontrollerinformation_ != NULL;
}
inline void SummaryInformation::clear_flightcontrollerinformation() {
  if (GetArenaNoVirtual() == NULL && flightcontrollerinformation_ != NULL) {
    delete flightcontrollerinformation_;
  }
  flightcontrollerinformation_ = NULL;
}
inline const ::DJIFRProto::Standard::ComponentInformation& SummaryInformation::flightcontrollerinformation() const {
  const ::DJIFRProto::Standard::ComponentInformation* p = flightcontrollerinformation_;
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.SummaryInformation.flightControllerInformation)
  return p != NULL ? *p : *reinterpret_cast<const ::DJIFRProto::Standard::ComponentInformation*>(
      &::DJIFRProto::Standard::_ComponentInformation_default_instance_);
}
inline ::DJIFRProto::Standard::ComponentInformation* SummaryInformation::release_flightcontrollerinformation() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.SummaryInformation.flightControllerInformation)
  
  ::DJIFRProto::Standard::ComponentInformation* temp = flightcontrollerinformation_;
  flightcontrollerinformation_ = NULL;
  return temp;
}
inline ::DJIFRProto::Standard::ComponentInformation* SummaryInformation::mutable_flightcontrollerinformation() {
  
  if (flightcontrollerinformation_ == NULL) {
    flightcontrollerinformation_ = new ::DJIFRProto::Standard::ComponentInformation;
  }
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.SummaryInformation.flightControllerInformation)
  return flightcontrollerinformation_;
}
inline void SummaryInformation::set_allocated_flightcontrollerinformation(::DJIFRProto::Standard::ComponentInformation* flightcontrollerinformation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete flightcontrollerinformation_;
  }
  if (flightcontrollerinformation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      flightcontrollerinformation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, flightcontrollerinformation, submessage_arena);
    }
    
  } else {
    
  }
  flightcontrollerinformation_ = flightcontrollerinformation;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.SummaryInformation.flightControllerInformation)
}

// string aircraftName = 8;
inline void SummaryInformation::clear_aircraftname() {
  aircraftname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SummaryInformation::aircraftname() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.SummaryInformation.aircraftName)
  return aircraftname_.GetNoArena();
}
inline void SummaryInformation::set_aircraftname(const ::std::string& value) {
  
  aircraftname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.SummaryInformation.aircraftName)
}
#if LANG_CXX11
inline void SummaryInformation::set_aircraftname(::std::string&& value) {
  
  aircraftname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DJIFRProto.Standard.SummaryInformation.aircraftName)
}
#endif
inline void SummaryInformation::set_aircraftname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  aircraftname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DJIFRProto.Standard.SummaryInformation.aircraftName)
}
inline void SummaryInformation::set_aircraftname(const char* value, size_t size) {
  
  aircraftname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DJIFRProto.Standard.SummaryInformation.aircraftName)
}
inline ::std::string* SummaryInformation::mutable_aircraftname() {
  
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.SummaryInformation.aircraftName)
  return aircraftname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SummaryInformation::release_aircraftname() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.SummaryInformation.aircraftName)
  
  return aircraftname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SummaryInformation::set_allocated_aircraftname(::std::string* aircraftname) {
  if (aircraftname != NULL) {
    
  } else {
    
  }
  aircraftname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), aircraftname);
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.SummaryInformation.aircraftName)
}

// double startTime = 10;
inline void SummaryInformation::clear_starttime() {
  starttime_ = 0;
}
inline double SummaryInformation::starttime() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.SummaryInformation.startTime)
  return starttime_;
}
inline void SummaryInformation::set_starttime(double value) {
  
  starttime_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.SummaryInformation.startTime)
}

// .DJIFRProto.Standard.LocationCoordinate2D startCoordinate = 11;
inline bool SummaryInformation::has_startcoordinate() const {
  return this != internal_default_instance() && startcoordinate_ != NULL;
}
inline const ::DJIFRProto::Standard::LocationCoordinate2D& SummaryInformation::startcoordinate() const {
  const ::DJIFRProto::Standard::LocationCoordinate2D* p = startcoordinate_;
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.SummaryInformation.startCoordinate)
  return p != NULL ? *p : *reinterpret_cast<const ::DJIFRProto::Standard::LocationCoordinate2D*>(
      &::DJIFRProto::Standard::_LocationCoordinate2D_default_instance_);
}
inline ::DJIFRProto::Standard::LocationCoordinate2D* SummaryInformation::release_startcoordinate() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.SummaryInformation.startCoordinate)
  
  ::DJIFRProto::Standard::LocationCoordinate2D* temp = startcoordinate_;
  startcoordinate_ = NULL;
  return temp;
}
inline ::DJIFRProto::Standard::LocationCoordinate2D* SummaryInformation::mutable_startcoordinate() {
  
  if (startcoordinate_ == NULL) {
    startcoordinate_ = new ::DJIFRProto::Standard::LocationCoordinate2D;
  }
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.SummaryInformation.startCoordinate)
  return startcoordinate_;
}
inline void SummaryInformation::set_allocated_startcoordinate(::DJIFRProto::Standard::LocationCoordinate2D* startcoordinate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(startcoordinate_);
  }
  if (startcoordinate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      startcoordinate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, startcoordinate, submessage_arena);
    }
    
  } else {
    
  }
  startcoordinate_ = startcoordinate;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.SummaryInformation.startCoordinate)
}

// float totalDistance = 12;
inline void SummaryInformation::clear_totaldistance() {
  totaldistance_ = 0;
}
inline float SummaryInformation::totaldistance() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.SummaryInformation.totalDistance)
  return totaldistance_;
}
inline void SummaryInformation::set_totaldistance(float value) {
  
  totaldistance_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.SummaryInformation.totalDistance)
}

// double totalTime = 13;
inline void SummaryInformation::clear_totaltime() {
  totaltime_ = 0;
}
inline double SummaryInformation::totaltime() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.SummaryInformation.totalTime)
  return totaltime_;
}
inline void SummaryInformation::set_totaltime(double value) {
  
  totaltime_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.SummaryInformation.totalTime)
}

// int32 samplingRate = 14;
inline void SummaryInformation::clear_samplingrate() {
  samplingrate_ = 0;
}
inline ::google::protobuf::int32 SummaryInformation::samplingrate() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.SummaryInformation.samplingRate)
  return samplingrate_;
}
inline void SummaryInformation::set_samplingrate(::google::protobuf::int32 value) {
  
  samplingrate_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.SummaryInformation.samplingRate)
}

// float maxHeight = 15;
inline void SummaryInformation::clear_maxheight() {
  maxheight_ = 0;
}
inline float SummaryInformation::maxheight() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.SummaryInformation.maxHeight)
  return maxheight_;
}
inline void SummaryInformation::set_maxheight(float value) {
  
  maxheight_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.SummaryInformation.maxHeight)
}

// float maxHorizontalSpeed = 16;
inline void SummaryInformation::clear_maxhorizontalspeed() {
  maxhorizontalspeed_ = 0;
}
inline float SummaryInformation::maxhorizontalspeed() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.SummaryInformation.maxHorizontalSpeed)
  return maxhorizontalspeed_;
}
inline void SummaryInformation::set_maxhorizontalspeed(float value) {
  
  maxhorizontalspeed_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.SummaryInformation.maxHorizontalSpeed)
}

// float maxVirticalSpeed = 17;
inline void SummaryInformation::clear_maxvirticalspeed() {
  maxvirticalspeed_ = 0;
}
inline float SummaryInformation::maxvirticalspeed() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.SummaryInformation.maxVirticalSpeed)
  return maxvirticalspeed_;
}
inline void SummaryInformation::set_maxvirticalspeed(float value) {
  
  maxvirticalspeed_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.SummaryInformation.maxVirticalSpeed)
}

// string uuid = 18;
inline void SummaryInformation::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SummaryInformation::uuid() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.SummaryInformation.uuid)
  return uuid_.GetNoArena();
}
inline void SummaryInformation::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.SummaryInformation.uuid)
}
#if LANG_CXX11
inline void SummaryInformation::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DJIFRProto.Standard.SummaryInformation.uuid)
}
#endif
inline void SummaryInformation::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DJIFRProto.Standard.SummaryInformation.uuid)
}
inline void SummaryInformation::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DJIFRProto.Standard.SummaryInformation.uuid)
}
inline ::std::string* SummaryInformation::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.SummaryInformation.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SummaryInformation::release_uuid() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.SummaryInformation.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SummaryInformation::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.SummaryInformation.uuid)
}

// .DJIFRProto.Standard.SDK.ProductType productType = 19;
inline void SummaryInformation::clear_producttype() {
  producttype_ = 0;
}
inline ::DJIFRProto::Standard::SDK_ProductType SummaryInformation::producttype() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.SummaryInformation.productType)
  return static_cast< ::DJIFRProto::Standard::SDK_ProductType >(producttype_);
}
inline void SummaryInformation::set_producttype(::DJIFRProto::Standard::SDK_ProductType value) {
  
  producttype_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.SummaryInformation.productType)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Standard
}  // namespace DJIFRProto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::DJIFRProto::Standard::SummaryInformation_Platform> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DJIFRProto::Standard::SummaryInformation_Platform>() {
  return ::DJIFRProto::Standard::SummaryInformation_Platform_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Summary_2fFRSummaryModelProto_2eproto__INCLUDED
