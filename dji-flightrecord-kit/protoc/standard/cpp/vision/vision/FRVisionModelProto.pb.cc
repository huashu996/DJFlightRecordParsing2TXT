// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vision/FRVisionModelProto.proto

#include "vision/FRVisionModelProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace DJIFRProto {
namespace Standard {
class VisionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Vision>
      _instance;
} _Vision_default_instance_;
class VisionControlStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VisionControlState>
      _instance;
} _VisionControlState_default_instance_;
class ObstacleDetectionSectorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObstacleDetectionSector>
      _instance;
} _ObstacleDetectionSector_default_instance_;
class VisionDetectionStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VisionDetectionState>
      _instance;
} _VisionDetectionState_default_instance_;
class VisionState_DetectionStateMapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VisionState_DetectionStateMapEntry_DoNotUse>
      _instance;
} _VisionState_DetectionStateMapEntry_DoNotUse_default_instance_;
class VisionStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VisionState>
      _instance;
} _VisionState_default_instance_;
}  // namespace Standard
}  // namespace DJIFRProto
namespace protobuf_vision_2fFRVisionModelProto_2eproto {
void InitDefaultsVisionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::DJIFRProto::Standard::_Vision_default_instance_;
    new (ptr) ::DJIFRProto::Standard::Vision();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DJIFRProto::Standard::Vision::InitAsDefaultInstance();
}

void InitDefaultsVision() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVisionImpl);
}

void InitDefaultsVisionControlStateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::DJIFRProto::Standard::_VisionControlState_default_instance_;
    new (ptr) ::DJIFRProto::Standard::VisionControlState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DJIFRProto::Standard::VisionControlState::InitAsDefaultInstance();
}

void InitDefaultsVisionControlState() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVisionControlStateImpl);
}

void InitDefaultsObstacleDetectionSectorImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::DJIFRProto::Standard::_ObstacleDetectionSector_default_instance_;
    new (ptr) ::DJIFRProto::Standard::ObstacleDetectionSector();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DJIFRProto::Standard::ObstacleDetectionSector::InitAsDefaultInstance();
}

void InitDefaultsObstacleDetectionSector() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsObstacleDetectionSectorImpl);
}

void InitDefaultsVisionDetectionStateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_vision_2fFRVisionModelProto_2eproto::InitDefaultsObstacleDetectionSector();
  {
    void* ptr = &::DJIFRProto::Standard::_VisionDetectionState_default_instance_;
    new (ptr) ::DJIFRProto::Standard::VisionDetectionState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DJIFRProto::Standard::VisionDetectionState::InitAsDefaultInstance();
}

void InitDefaultsVisionDetectionState() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVisionDetectionStateImpl);
}

void InitDefaultsVisionState_DetectionStateMapEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_vision_2fFRVisionModelProto_2eproto::InitDefaultsVisionDetectionState();
  {
    void* ptr = &::DJIFRProto::Standard::_VisionState_DetectionStateMapEntry_DoNotUse_default_instance_;
    new (ptr) ::DJIFRProto::Standard::VisionState_DetectionStateMapEntry_DoNotUse();
  }
  ::DJIFRProto::Standard::VisionState_DetectionStateMapEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsVisionState_DetectionStateMapEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVisionState_DetectionStateMapEntry_DoNotUseImpl);
}

void InitDefaultsVisionStateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_vision_2fFRVisionModelProto_2eproto::InitDefaultsVisionControlState();
  protobuf_vision_2fFRVisionModelProto_2eproto::InitDefaultsVisionState_DetectionStateMapEntry_DoNotUse();
  {
    void* ptr = &::DJIFRProto::Standard::_VisionState_default_instance_;
    new (ptr) ::DJIFRProto::Standard::VisionState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DJIFRProto::Standard::VisionState::InitAsDefaultInstance();
}

void InitDefaultsVisionState() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVisionStateImpl);
}

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::Vision, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::VisionControlState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::VisionControlState, isascentlimitedbyobstacle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::VisionControlState, isavoidingactiveobstaclecollision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::VisionControlState, isbraking_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::VisionControlState, isperformingprecisionlanding_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::ObstacleDetectionSector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::ObstacleDetectionSector, obstacledistanceinmeters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::ObstacleDetectionSector, warninglevel_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::VisionDetectionState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::VisionDetectionState, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::VisionDetectionState, issensorbeingused_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::VisionDetectionState, systemwarning_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::VisionDetectionState, obstacledistanceinmeters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::VisionDetectionState, detectionsectors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::VisionState_DetectionStateMapEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::VisionState_DetectionStateMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::VisionState_DetectionStateMapEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::VisionState_DetectionStateMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::VisionState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::VisionState, collisionavoidanceenabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::VisionState, controlstate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DJIFRProto::Standard::VisionState, detectionstatemap_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::DJIFRProto::Standard::Vision)},
  { 5, -1, sizeof(::DJIFRProto::Standard::VisionControlState)},
  { 14, -1, sizeof(::DJIFRProto::Standard::ObstacleDetectionSector)},
  { 21, -1, sizeof(::DJIFRProto::Standard::VisionDetectionState)},
  { 31, 38, sizeof(::DJIFRProto::Standard::VisionState_DetectionStateMapEntry_DoNotUse)},
  { 40, -1, sizeof(::DJIFRProto::Standard::VisionState)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::DJIFRProto::Standard::_Vision_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DJIFRProto::Standard::_VisionControlState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DJIFRProto::Standard::_ObstacleDetectionSector_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DJIFRProto::Standard::_VisionDetectionState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DJIFRProto::Standard::_VisionState_DetectionStateMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DJIFRProto::Standard::_VisionState_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "vision/FRVisionModelProto.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\037vision/FRVisionModelProto.proto\022\023DJIFR"
      "Proto.Standard\"\260\002\n\006Vision\"b\n\036ObstacleDet"
      "ectionSectorWarning\022\024\n\020DetectionInvalid\020"
      "\000\022\021\n\rDetectionSafe\020\001\022\013\n\007Warning\020\002\022\n\n\006Dan"
      "ger\020\003\"T\n\024VisionSensorPosition\022\010\n\004Nose\020\000\022"
      "\010\n\004Tail\020\001\022\t\n\005Right\020\002\022\010\n\004Left\020\003\022\023\n\017Positi"
      "onUnknown\020\004\"l\n\023VisionSystemWarning\022\027\n\023Vi"
      "sionSystemInvalid\020\000\022\024\n\020VisionSystemSafe\020"
      "\001\022\r\n\tDangerous\020\002\022\027\n\023VisionSystemUnknown\020"
      "\003\"\233\001\n\022VisionControlState\022!\n\031isAscentLimi"
      "tedByObstacle\030\001 \001(\010\022)\n!isAvoidingActiveO"
      "bstacleCollision\030\002 \001(\010\022\021\n\tisBraking\030\003 \001("
      "\010\022$\n\034isPerformingPrecisionLanding\030\004 \001(\010\""
      "\215\001\n\027ObstacleDetectionSector\022 \n\030obstacleD"
      "istanceInMeters\030\001 \001(\001\022P\n\014warningLevel\030\002 "
      "\001(\0162:.DJIFRProto.Standard.Vision.Obstacl"
      "eDetectionSectorWarning\"\247\002\n\024VisionDetect"
      "ionState\022B\n\010position\030\001 \001(\01620.DJIFRProto."
      "Standard.Vision.VisionSensorPosition\022\031\n\021"
      "isSensorBeingUsed\030\002 \001(\010\022F\n\rsystemWarning"
      "\030\003 \001(\0162/.DJIFRProto.Standard.Vision.Visi"
      "onSystemWarning\022 \n\030obstacleDistanceInMet"
      "ers\030\004 \001(\001\022F\n\020detectionSectors\030\005 \003(\0132,.DJ"
      "IFRProto.Standard.ObstacleDetectionSecto"
      "r\"\250\002\n\013VisionState\022!\n\031collisionAvoidanceE"
      "nabled\030\001 \001(\010\022=\n\014controlState\030\002 \001(\0132\'.DJI"
      "FRProto.Standard.VisionControlState\022R\n\021d"
      "etectionStateMap\030\003 \003(\01327.DJIFRProto.Stan"
      "dard.VisionState.DetectionStateMapEntry\032"
      "c\n\026DetectionStateMapEntry\022\013\n\003key\030\001 \001(\005\0228"
      "\n\005value\030\002 \001(\0132).DJIFRProto.Standard.Visi"
      "onDetectionState:\0028\001B\r\242\002\nDJIFRProtob\006pro"
      "to3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1283);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vision/FRVisionModelProto.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_vision_2fFRVisionModelProto_2eproto
namespace DJIFRProto {
namespace Standard {
const ::google::protobuf::EnumDescriptor* Vision_ObstacleDetectionSectorWarning_descriptor() {
  protobuf_vision_2fFRVisionModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vision_2fFRVisionModelProto_2eproto::file_level_enum_descriptors[0];
}
bool Vision_ObstacleDetectionSectorWarning_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Vision_ObstacleDetectionSectorWarning Vision::DetectionInvalid;
const Vision_ObstacleDetectionSectorWarning Vision::DetectionSafe;
const Vision_ObstacleDetectionSectorWarning Vision::Warning;
const Vision_ObstacleDetectionSectorWarning Vision::Danger;
const Vision_ObstacleDetectionSectorWarning Vision::ObstacleDetectionSectorWarning_MIN;
const Vision_ObstacleDetectionSectorWarning Vision::ObstacleDetectionSectorWarning_MAX;
const int Vision::ObstacleDetectionSectorWarning_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Vision_VisionSensorPosition_descriptor() {
  protobuf_vision_2fFRVisionModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vision_2fFRVisionModelProto_2eproto::file_level_enum_descriptors[1];
}
bool Vision_VisionSensorPosition_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Vision_VisionSensorPosition Vision::Nose;
const Vision_VisionSensorPosition Vision::Tail;
const Vision_VisionSensorPosition Vision::Right;
const Vision_VisionSensorPosition Vision::Left;
const Vision_VisionSensorPosition Vision::PositionUnknown;
const Vision_VisionSensorPosition Vision::VisionSensorPosition_MIN;
const Vision_VisionSensorPosition Vision::VisionSensorPosition_MAX;
const int Vision::VisionSensorPosition_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Vision_VisionSystemWarning_descriptor() {
  protobuf_vision_2fFRVisionModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vision_2fFRVisionModelProto_2eproto::file_level_enum_descriptors[2];
}
bool Vision_VisionSystemWarning_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Vision_VisionSystemWarning Vision::VisionSystemInvalid;
const Vision_VisionSystemWarning Vision::VisionSystemSafe;
const Vision_VisionSystemWarning Vision::Dangerous;
const Vision_VisionSystemWarning Vision::VisionSystemUnknown;
const Vision_VisionSystemWarning Vision::VisionSystemWarning_MIN;
const Vision_VisionSystemWarning Vision::VisionSystemWarning_MAX;
const int Vision::VisionSystemWarning_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Vision::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vision::Vision()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_vision_2fFRVisionModelProto_2eproto::InitDefaultsVision();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DJIFRProto.Standard.Vision)
}
Vision::Vision(const Vision& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.Vision)
}

void Vision::SharedCtor() {
  _cached_size_ = 0;
}

Vision::~Vision() {
  // @@protoc_insertion_point(destructor:DJIFRProto.Standard.Vision)
  SharedDtor();
}

void Vision::SharedDtor() {
}

void Vision::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vision::descriptor() {
  ::protobuf_vision_2fFRVisionModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vision_2fFRVisionModelProto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vision& Vision::default_instance() {
  ::protobuf_vision_2fFRVisionModelProto_2eproto::InitDefaultsVision();
  return *internal_default_instance();
}

Vision* Vision::New(::google::protobuf::Arena* arena) const {
  Vision* n = new Vision;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vision::Clear() {
// @@protoc_insertion_point(message_clear_start:DJIFRProto.Standard.Vision)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool Vision::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DJIFRProto.Standard.Vision)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:DJIFRProto.Standard.Vision)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DJIFRProto.Standard.Vision)
  return false;
#undef DO_
}

void Vision::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DJIFRProto.Standard.Vision)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DJIFRProto.Standard.Vision)
}

::google::protobuf::uint8* Vision::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DJIFRProto.Standard.Vision)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DJIFRProto.Standard.Vision)
  return target;
}

size_t Vision::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DJIFRProto.Standard.Vision)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vision::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DJIFRProto.Standard.Vision)
  GOOGLE_DCHECK_NE(&from, this);
  const Vision* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vision>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DJIFRProto.Standard.Vision)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DJIFRProto.Standard.Vision)
    MergeFrom(*source);
  }
}

void Vision::MergeFrom(const Vision& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DJIFRProto.Standard.Vision)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Vision::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DJIFRProto.Standard.Vision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vision::CopyFrom(const Vision& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DJIFRProto.Standard.Vision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vision::IsInitialized() const {
  return true;
}

void Vision::Swap(Vision* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vision::InternalSwap(Vision* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vision::GetMetadata() const {
  protobuf_vision_2fFRVisionModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vision_2fFRVisionModelProto_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VisionControlState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VisionControlState::kIsAscentLimitedByObstacleFieldNumber;
const int VisionControlState::kIsAvoidingActiveObstacleCollisionFieldNumber;
const int VisionControlState::kIsBrakingFieldNumber;
const int VisionControlState::kIsPerformingPrecisionLandingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VisionControlState::VisionControlState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_vision_2fFRVisionModelProto_2eproto::InitDefaultsVisionControlState();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DJIFRProto.Standard.VisionControlState)
}
VisionControlState::VisionControlState(const VisionControlState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&isascentlimitedbyobstacle_, &from.isascentlimitedbyobstacle_,
    static_cast<size_t>(reinterpret_cast<char*>(&isperformingprecisionlanding_) -
    reinterpret_cast<char*>(&isascentlimitedbyobstacle_)) + sizeof(isperformingprecisionlanding_));
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.VisionControlState)
}

void VisionControlState::SharedCtor() {
  ::memset(&isascentlimitedbyobstacle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isperformingprecisionlanding_) -
      reinterpret_cast<char*>(&isascentlimitedbyobstacle_)) + sizeof(isperformingprecisionlanding_));
  _cached_size_ = 0;
}

VisionControlState::~VisionControlState() {
  // @@protoc_insertion_point(destructor:DJIFRProto.Standard.VisionControlState)
  SharedDtor();
}

void VisionControlState::SharedDtor() {
}

void VisionControlState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VisionControlState::descriptor() {
  ::protobuf_vision_2fFRVisionModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vision_2fFRVisionModelProto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VisionControlState& VisionControlState::default_instance() {
  ::protobuf_vision_2fFRVisionModelProto_2eproto::InitDefaultsVisionControlState();
  return *internal_default_instance();
}

VisionControlState* VisionControlState::New(::google::protobuf::Arena* arena) const {
  VisionControlState* n = new VisionControlState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VisionControlState::Clear() {
// @@protoc_insertion_point(message_clear_start:DJIFRProto.Standard.VisionControlState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&isascentlimitedbyobstacle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isperformingprecisionlanding_) -
      reinterpret_cast<char*>(&isascentlimitedbyobstacle_)) + sizeof(isperformingprecisionlanding_));
  _internal_metadata_.Clear();
}

bool VisionControlState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DJIFRProto.Standard.VisionControlState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool isAscentLimitedByObstacle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isascentlimitedbyobstacle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isAvoidingActiveObstacleCollision = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isavoidingactiveobstaclecollision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isBraking = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isbraking_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isPerformingPrecisionLanding = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isperformingprecisionlanding_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DJIFRProto.Standard.VisionControlState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DJIFRProto.Standard.VisionControlState)
  return false;
#undef DO_
}

void VisionControlState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DJIFRProto.Standard.VisionControlState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isAscentLimitedByObstacle = 1;
  if (this->isascentlimitedbyobstacle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isascentlimitedbyobstacle(), output);
  }

  // bool isAvoidingActiveObstacleCollision = 2;
  if (this->isavoidingactiveobstaclecollision() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isavoidingactiveobstaclecollision(), output);
  }

  // bool isBraking = 3;
  if (this->isbraking() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isbraking(), output);
  }

  // bool isPerformingPrecisionLanding = 4;
  if (this->isperformingprecisionlanding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isperformingprecisionlanding(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DJIFRProto.Standard.VisionControlState)
}

::google::protobuf::uint8* VisionControlState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DJIFRProto.Standard.VisionControlState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isAscentLimitedByObstacle = 1;
  if (this->isascentlimitedbyobstacle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isascentlimitedbyobstacle(), target);
  }

  // bool isAvoidingActiveObstacleCollision = 2;
  if (this->isavoidingactiveobstaclecollision() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isavoidingactiveobstaclecollision(), target);
  }

  // bool isBraking = 3;
  if (this->isbraking() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isbraking(), target);
  }

  // bool isPerformingPrecisionLanding = 4;
  if (this->isperformingprecisionlanding() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isperformingprecisionlanding(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DJIFRProto.Standard.VisionControlState)
  return target;
}

size_t VisionControlState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DJIFRProto.Standard.VisionControlState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool isAscentLimitedByObstacle = 1;
  if (this->isascentlimitedbyobstacle() != 0) {
    total_size += 1 + 1;
  }

  // bool isAvoidingActiveObstacleCollision = 2;
  if (this->isavoidingactiveobstaclecollision() != 0) {
    total_size += 1 + 1;
  }

  // bool isBraking = 3;
  if (this->isbraking() != 0) {
    total_size += 1 + 1;
  }

  // bool isPerformingPrecisionLanding = 4;
  if (this->isperformingprecisionlanding() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VisionControlState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DJIFRProto.Standard.VisionControlState)
  GOOGLE_DCHECK_NE(&from, this);
  const VisionControlState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VisionControlState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DJIFRProto.Standard.VisionControlState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DJIFRProto.Standard.VisionControlState)
    MergeFrom(*source);
  }
}

void VisionControlState::MergeFrom(const VisionControlState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DJIFRProto.Standard.VisionControlState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.isascentlimitedbyobstacle() != 0) {
    set_isascentlimitedbyobstacle(from.isascentlimitedbyobstacle());
  }
  if (from.isavoidingactiveobstaclecollision() != 0) {
    set_isavoidingactiveobstaclecollision(from.isavoidingactiveobstaclecollision());
  }
  if (from.isbraking() != 0) {
    set_isbraking(from.isbraking());
  }
  if (from.isperformingprecisionlanding() != 0) {
    set_isperformingprecisionlanding(from.isperformingprecisionlanding());
  }
}

void VisionControlState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DJIFRProto.Standard.VisionControlState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisionControlState::CopyFrom(const VisionControlState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DJIFRProto.Standard.VisionControlState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisionControlState::IsInitialized() const {
  return true;
}

void VisionControlState::Swap(VisionControlState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VisionControlState::InternalSwap(VisionControlState* other) {
  using std::swap;
  swap(isascentlimitedbyobstacle_, other->isascentlimitedbyobstacle_);
  swap(isavoidingactiveobstaclecollision_, other->isavoidingactiveobstaclecollision_);
  swap(isbraking_, other->isbraking_);
  swap(isperformingprecisionlanding_, other->isperformingprecisionlanding_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VisionControlState::GetMetadata() const {
  protobuf_vision_2fFRVisionModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vision_2fFRVisionModelProto_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ObstacleDetectionSector::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObstacleDetectionSector::kObstacleDistanceInMetersFieldNumber;
const int ObstacleDetectionSector::kWarningLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObstacleDetectionSector::ObstacleDetectionSector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_vision_2fFRVisionModelProto_2eproto::InitDefaultsObstacleDetectionSector();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DJIFRProto.Standard.ObstacleDetectionSector)
}
ObstacleDetectionSector::ObstacleDetectionSector(const ObstacleDetectionSector& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&obstacledistanceinmeters_, &from.obstacledistanceinmeters_,
    static_cast<size_t>(reinterpret_cast<char*>(&warninglevel_) -
    reinterpret_cast<char*>(&obstacledistanceinmeters_)) + sizeof(warninglevel_));
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.ObstacleDetectionSector)
}

void ObstacleDetectionSector::SharedCtor() {
  ::memset(&obstacledistanceinmeters_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&warninglevel_) -
      reinterpret_cast<char*>(&obstacledistanceinmeters_)) + sizeof(warninglevel_));
  _cached_size_ = 0;
}

ObstacleDetectionSector::~ObstacleDetectionSector() {
  // @@protoc_insertion_point(destructor:DJIFRProto.Standard.ObstacleDetectionSector)
  SharedDtor();
}

void ObstacleDetectionSector::SharedDtor() {
}

void ObstacleDetectionSector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObstacleDetectionSector::descriptor() {
  ::protobuf_vision_2fFRVisionModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vision_2fFRVisionModelProto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObstacleDetectionSector& ObstacleDetectionSector::default_instance() {
  ::protobuf_vision_2fFRVisionModelProto_2eproto::InitDefaultsObstacleDetectionSector();
  return *internal_default_instance();
}

ObstacleDetectionSector* ObstacleDetectionSector::New(::google::protobuf::Arena* arena) const {
  ObstacleDetectionSector* n = new ObstacleDetectionSector;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObstacleDetectionSector::Clear() {
// @@protoc_insertion_point(message_clear_start:DJIFRProto.Standard.ObstacleDetectionSector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&obstacledistanceinmeters_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&warninglevel_) -
      reinterpret_cast<char*>(&obstacledistanceinmeters_)) + sizeof(warninglevel_));
  _internal_metadata_.Clear();
}

bool ObstacleDetectionSector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DJIFRProto.Standard.ObstacleDetectionSector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double obstacleDistanceInMeters = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &obstacledistanceinmeters_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DJIFRProto.Standard.Vision.ObstacleDetectionSectorWarning warningLevel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_warninglevel(static_cast< ::DJIFRProto::Standard::Vision_ObstacleDetectionSectorWarning >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DJIFRProto.Standard.ObstacleDetectionSector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DJIFRProto.Standard.ObstacleDetectionSector)
  return false;
#undef DO_
}

void ObstacleDetectionSector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DJIFRProto.Standard.ObstacleDetectionSector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double obstacleDistanceInMeters = 1;
  if (this->obstacledistanceinmeters() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->obstacledistanceinmeters(), output);
  }

  // .DJIFRProto.Standard.Vision.ObstacleDetectionSectorWarning warningLevel = 2;
  if (this->warninglevel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->warninglevel(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DJIFRProto.Standard.ObstacleDetectionSector)
}

::google::protobuf::uint8* ObstacleDetectionSector::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DJIFRProto.Standard.ObstacleDetectionSector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double obstacleDistanceInMeters = 1;
  if (this->obstacledistanceinmeters() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->obstacledistanceinmeters(), target);
  }

  // .DJIFRProto.Standard.Vision.ObstacleDetectionSectorWarning warningLevel = 2;
  if (this->warninglevel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->warninglevel(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DJIFRProto.Standard.ObstacleDetectionSector)
  return target;
}

size_t ObstacleDetectionSector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DJIFRProto.Standard.ObstacleDetectionSector)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double obstacleDistanceInMeters = 1;
  if (this->obstacledistanceinmeters() != 0) {
    total_size += 1 + 8;
  }

  // .DJIFRProto.Standard.Vision.ObstacleDetectionSectorWarning warningLevel = 2;
  if (this->warninglevel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->warninglevel());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObstacleDetectionSector::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DJIFRProto.Standard.ObstacleDetectionSector)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleDetectionSector* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObstacleDetectionSector>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DJIFRProto.Standard.ObstacleDetectionSector)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DJIFRProto.Standard.ObstacleDetectionSector)
    MergeFrom(*source);
  }
}

void ObstacleDetectionSector::MergeFrom(const ObstacleDetectionSector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DJIFRProto.Standard.ObstacleDetectionSector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.obstacledistanceinmeters() != 0) {
    set_obstacledistanceinmeters(from.obstacledistanceinmeters());
  }
  if (from.warninglevel() != 0) {
    set_warninglevel(from.warninglevel());
  }
}

void ObstacleDetectionSector::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DJIFRProto.Standard.ObstacleDetectionSector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleDetectionSector::CopyFrom(const ObstacleDetectionSector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DJIFRProto.Standard.ObstacleDetectionSector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleDetectionSector::IsInitialized() const {
  return true;
}

void ObstacleDetectionSector::Swap(ObstacleDetectionSector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObstacleDetectionSector::InternalSwap(ObstacleDetectionSector* other) {
  using std::swap;
  swap(obstacledistanceinmeters_, other->obstacledistanceinmeters_);
  swap(warninglevel_, other->warninglevel_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObstacleDetectionSector::GetMetadata() const {
  protobuf_vision_2fFRVisionModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vision_2fFRVisionModelProto_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VisionDetectionState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VisionDetectionState::kPositionFieldNumber;
const int VisionDetectionState::kIsSensorBeingUsedFieldNumber;
const int VisionDetectionState::kSystemWarningFieldNumber;
const int VisionDetectionState::kObstacleDistanceInMetersFieldNumber;
const int VisionDetectionState::kDetectionSectorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VisionDetectionState::VisionDetectionState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_vision_2fFRVisionModelProto_2eproto::InitDefaultsVisionDetectionState();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DJIFRProto.Standard.VisionDetectionState)
}
VisionDetectionState::VisionDetectionState(const VisionDetectionState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      detectionsectors_(from.detectionsectors_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&position_, &from.position_,
    static_cast<size_t>(reinterpret_cast<char*>(&systemwarning_) -
    reinterpret_cast<char*>(&position_)) + sizeof(systemwarning_));
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.VisionDetectionState)
}

void VisionDetectionState::SharedCtor() {
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&systemwarning_) -
      reinterpret_cast<char*>(&position_)) + sizeof(systemwarning_));
  _cached_size_ = 0;
}

VisionDetectionState::~VisionDetectionState() {
  // @@protoc_insertion_point(destructor:DJIFRProto.Standard.VisionDetectionState)
  SharedDtor();
}

void VisionDetectionState::SharedDtor() {
}

void VisionDetectionState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VisionDetectionState::descriptor() {
  ::protobuf_vision_2fFRVisionModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vision_2fFRVisionModelProto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VisionDetectionState& VisionDetectionState::default_instance() {
  ::protobuf_vision_2fFRVisionModelProto_2eproto::InitDefaultsVisionDetectionState();
  return *internal_default_instance();
}

VisionDetectionState* VisionDetectionState::New(::google::protobuf::Arena* arena) const {
  VisionDetectionState* n = new VisionDetectionState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VisionDetectionState::Clear() {
// @@protoc_insertion_point(message_clear_start:DJIFRProto.Standard.VisionDetectionState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detectionsectors_.Clear();
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&systemwarning_) -
      reinterpret_cast<char*>(&position_)) + sizeof(systemwarning_));
  _internal_metadata_.Clear();
}

bool VisionDetectionState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DJIFRProto.Standard.VisionDetectionState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .DJIFRProto.Standard.Vision.VisionSensorPosition position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_position(static_cast< ::DJIFRProto::Standard::Vision_VisionSensorPosition >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isSensorBeingUsed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issensorbeingused_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DJIFRProto.Standard.Vision.VisionSystemWarning systemWarning = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_systemwarning(static_cast< ::DJIFRProto::Standard::Vision_VisionSystemWarning >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double obstacleDistanceInMeters = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &obstacledistanceinmeters_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .DJIFRProto.Standard.ObstacleDetectionSector detectionSectors = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_detectionsectors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DJIFRProto.Standard.VisionDetectionState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DJIFRProto.Standard.VisionDetectionState)
  return false;
#undef DO_
}

void VisionDetectionState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DJIFRProto.Standard.VisionDetectionState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DJIFRProto.Standard.Vision.VisionSensorPosition position = 1;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->position(), output);
  }

  // bool isSensorBeingUsed = 2;
  if (this->issensorbeingused() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->issensorbeingused(), output);
  }

  // .DJIFRProto.Standard.Vision.VisionSystemWarning systemWarning = 3;
  if (this->systemwarning() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->systemwarning(), output);
  }

  // double obstacleDistanceInMeters = 4;
  if (this->obstacledistanceinmeters() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->obstacledistanceinmeters(), output);
  }

  // repeated .DJIFRProto.Standard.ObstacleDetectionSector detectionSectors = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detectionsectors_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->detectionsectors(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DJIFRProto.Standard.VisionDetectionState)
}

::google::protobuf::uint8* VisionDetectionState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DJIFRProto.Standard.VisionDetectionState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DJIFRProto.Standard.Vision.VisionSensorPosition position = 1;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->position(), target);
  }

  // bool isSensorBeingUsed = 2;
  if (this->issensorbeingused() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->issensorbeingused(), target);
  }

  // .DJIFRProto.Standard.Vision.VisionSystemWarning systemWarning = 3;
  if (this->systemwarning() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->systemwarning(), target);
  }

  // double obstacleDistanceInMeters = 4;
  if (this->obstacledistanceinmeters() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->obstacledistanceinmeters(), target);
  }

  // repeated .DJIFRProto.Standard.ObstacleDetectionSector detectionSectors = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detectionsectors_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->detectionsectors(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DJIFRProto.Standard.VisionDetectionState)
  return target;
}

size_t VisionDetectionState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DJIFRProto.Standard.VisionDetectionState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .DJIFRProto.Standard.ObstacleDetectionSector detectionSectors = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->detectionsectors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->detectionsectors(static_cast<int>(i)));
    }
  }

  // .DJIFRProto.Standard.Vision.VisionSensorPosition position = 1;
  if (this->position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->position());
  }

  // bool isSensorBeingUsed = 2;
  if (this->issensorbeingused() != 0) {
    total_size += 1 + 1;
  }

  // double obstacleDistanceInMeters = 4;
  if (this->obstacledistanceinmeters() != 0) {
    total_size += 1 + 8;
  }

  // .DJIFRProto.Standard.Vision.VisionSystemWarning systemWarning = 3;
  if (this->systemwarning() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->systemwarning());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VisionDetectionState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DJIFRProto.Standard.VisionDetectionState)
  GOOGLE_DCHECK_NE(&from, this);
  const VisionDetectionState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VisionDetectionState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DJIFRProto.Standard.VisionDetectionState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DJIFRProto.Standard.VisionDetectionState)
    MergeFrom(*source);
  }
}

void VisionDetectionState::MergeFrom(const VisionDetectionState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DJIFRProto.Standard.VisionDetectionState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  detectionsectors_.MergeFrom(from.detectionsectors_);
  if (from.position() != 0) {
    set_position(from.position());
  }
  if (from.issensorbeingused() != 0) {
    set_issensorbeingused(from.issensorbeingused());
  }
  if (from.obstacledistanceinmeters() != 0) {
    set_obstacledistanceinmeters(from.obstacledistanceinmeters());
  }
  if (from.systemwarning() != 0) {
    set_systemwarning(from.systemwarning());
  }
}

void VisionDetectionState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DJIFRProto.Standard.VisionDetectionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisionDetectionState::CopyFrom(const VisionDetectionState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DJIFRProto.Standard.VisionDetectionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisionDetectionState::IsInitialized() const {
  return true;
}

void VisionDetectionState::Swap(VisionDetectionState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VisionDetectionState::InternalSwap(VisionDetectionState* other) {
  using std::swap;
  detectionsectors_.InternalSwap(&other->detectionsectors_);
  swap(position_, other->position_);
  swap(issensorbeingused_, other->issensorbeingused_);
  swap(obstacledistanceinmeters_, other->obstacledistanceinmeters_);
  swap(systemwarning_, other->systemwarning_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VisionDetectionState::GetMetadata() const {
  protobuf_vision_2fFRVisionModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vision_2fFRVisionModelProto_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

VisionState_DetectionStateMapEntry_DoNotUse::VisionState_DetectionStateMapEntry_DoNotUse() {}
VisionState_DetectionStateMapEntry_DoNotUse::VisionState_DetectionStateMapEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void VisionState_DetectionStateMapEntry_DoNotUse::MergeFrom(const VisionState_DetectionStateMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata VisionState_DetectionStateMapEntry_DoNotUse::GetMetadata() const {
  ::protobuf_vision_2fFRVisionModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vision_2fFRVisionModelProto_2eproto::file_level_metadata[4];
}
void VisionState_DetectionStateMapEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void VisionState::InitAsDefaultInstance() {
  ::DJIFRProto::Standard::_VisionState_default_instance_._instance.get_mutable()->controlstate_ = const_cast< ::DJIFRProto::Standard::VisionControlState*>(
      ::DJIFRProto::Standard::VisionControlState::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VisionState::kCollisionAvoidanceEnabledFieldNumber;
const int VisionState::kControlStateFieldNumber;
const int VisionState::kDetectionStateMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VisionState::VisionState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_vision_2fFRVisionModelProto_2eproto::InitDefaultsVisionState();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DJIFRProto.Standard.VisionState)
}
VisionState::VisionState(const VisionState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  detectionstatemap_.MergeFrom(from.detectionstatemap_);
  if (from.has_controlstate()) {
    controlstate_ = new ::DJIFRProto::Standard::VisionControlState(*from.controlstate_);
  } else {
    controlstate_ = NULL;
  }
  collisionavoidanceenabled_ = from.collisionavoidanceenabled_;
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.VisionState)
}

void VisionState::SharedCtor() {
  ::memset(&controlstate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collisionavoidanceenabled_) -
      reinterpret_cast<char*>(&controlstate_)) + sizeof(collisionavoidanceenabled_));
  _cached_size_ = 0;
}

VisionState::~VisionState() {
  // @@protoc_insertion_point(destructor:DJIFRProto.Standard.VisionState)
  SharedDtor();
}

void VisionState::SharedDtor() {
  if (this != internal_default_instance()) delete controlstate_;
}

void VisionState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VisionState::descriptor() {
  ::protobuf_vision_2fFRVisionModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vision_2fFRVisionModelProto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VisionState& VisionState::default_instance() {
  ::protobuf_vision_2fFRVisionModelProto_2eproto::InitDefaultsVisionState();
  return *internal_default_instance();
}

VisionState* VisionState::New(::google::protobuf::Arena* arena) const {
  VisionState* n = new VisionState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VisionState::Clear() {
// @@protoc_insertion_point(message_clear_start:DJIFRProto.Standard.VisionState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detectionstatemap_.Clear();
  if (GetArenaNoVirtual() == NULL && controlstate_ != NULL) {
    delete controlstate_;
  }
  controlstate_ = NULL;
  collisionavoidanceenabled_ = false;
  _internal_metadata_.Clear();
}

bool VisionState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DJIFRProto.Standard.VisionState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool collisionAvoidanceEnabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &collisionavoidanceenabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DJIFRProto.Standard.VisionControlState controlState = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_controlstate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int32, .DJIFRProto.Standard.VisionDetectionState> detectionStateMap = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          VisionState_DetectionStateMapEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              VisionState_DetectionStateMapEntry_DoNotUse,
              ::google::protobuf::int32, ::DJIFRProto::Standard::VisionDetectionState,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::VisionDetectionState > > parser(&detectionstatemap_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DJIFRProto.Standard.VisionState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DJIFRProto.Standard.VisionState)
  return false;
#undef DO_
}

void VisionState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DJIFRProto.Standard.VisionState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool collisionAvoidanceEnabled = 1;
  if (this->collisionavoidanceenabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->collisionavoidanceenabled(), output);
  }

  // .DJIFRProto.Standard.VisionControlState controlState = 2;
  if (this->has_controlstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->controlstate_, output);
  }

  // map<int32, .DJIFRProto.Standard.VisionDetectionState> detectionStateMap = 3;
  if (!this->detectionstatemap().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::VisionDetectionState >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->detectionstatemap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->detectionstatemap().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::VisionDetectionState >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::VisionDetectionState >::const_iterator
          it = this->detectionstatemap().begin();
          it != this->detectionstatemap().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<VisionState_DetectionStateMapEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(detectionstatemap_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<VisionState_DetectionStateMapEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::VisionDetectionState >::const_iterator
          it = this->detectionstatemap().begin();
          it != this->detectionstatemap().end(); ++it) {
        entry.reset(detectionstatemap_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DJIFRProto.Standard.VisionState)
}

::google::protobuf::uint8* VisionState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DJIFRProto.Standard.VisionState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool collisionAvoidanceEnabled = 1;
  if (this->collisionavoidanceenabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->collisionavoidanceenabled(), target);
  }

  // .DJIFRProto.Standard.VisionControlState controlState = 2;
  if (this->has_controlstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->controlstate_, deterministic, target);
  }

  // map<int32, .DJIFRProto.Standard.VisionDetectionState> detectionStateMap = 3;
  if (!this->detectionstatemap().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::VisionDetectionState >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->detectionstatemap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->detectionstatemap().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::VisionDetectionState >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::VisionDetectionState >::const_iterator
          it = this->detectionstatemap().begin();
          it != this->detectionstatemap().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<VisionState_DetectionStateMapEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(detectionstatemap_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<VisionState_DetectionStateMapEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::VisionDetectionState >::const_iterator
          it = this->detectionstatemap().begin();
          it != this->detectionstatemap().end(); ++it) {
        entry.reset(detectionstatemap_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DJIFRProto.Standard.VisionState)
  return target;
}

size_t VisionState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DJIFRProto.Standard.VisionState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<int32, .DJIFRProto.Standard.VisionDetectionState> detectionStateMap = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->detectionstatemap_size());
  {
    ::google::protobuf::scoped_ptr<VisionState_DetectionStateMapEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::VisionDetectionState >::const_iterator
        it = this->detectionstatemap().begin();
        it != this->detectionstatemap().end(); ++it) {
      entry.reset(detectionstatemap_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // .DJIFRProto.Standard.VisionControlState controlState = 2;
  if (this->has_controlstate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->controlstate_);
  }

  // bool collisionAvoidanceEnabled = 1;
  if (this->collisionavoidanceenabled() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VisionState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DJIFRProto.Standard.VisionState)
  GOOGLE_DCHECK_NE(&from, this);
  const VisionState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VisionState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DJIFRProto.Standard.VisionState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DJIFRProto.Standard.VisionState)
    MergeFrom(*source);
  }
}

void VisionState::MergeFrom(const VisionState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DJIFRProto.Standard.VisionState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  detectionstatemap_.MergeFrom(from.detectionstatemap_);
  if (from.has_controlstate()) {
    mutable_controlstate()->::DJIFRProto::Standard::VisionControlState::MergeFrom(from.controlstate());
  }
  if (from.collisionavoidanceenabled() != 0) {
    set_collisionavoidanceenabled(from.collisionavoidanceenabled());
  }
}

void VisionState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DJIFRProto.Standard.VisionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisionState::CopyFrom(const VisionState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DJIFRProto.Standard.VisionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisionState::IsInitialized() const {
  return true;
}

void VisionState::Swap(VisionState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VisionState::InternalSwap(VisionState* other) {
  using std::swap;
  detectionstatemap_.Swap(&other->detectionstatemap_);
  swap(controlstate_, other->controlstate_);
  swap(collisionavoidanceenabled_, other->collisionavoidanceenabled_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VisionState::GetMetadata() const {
  protobuf_vision_2fFRVisionModelProto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vision_2fFRVisionModelProto_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Standard
}  // namespace DJIFRProto

// @@protoc_insertion_point(global_scope)
