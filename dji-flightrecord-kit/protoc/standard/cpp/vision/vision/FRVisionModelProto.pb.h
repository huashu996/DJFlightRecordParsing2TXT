// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vision/FRVisionModelProto.proto

#ifndef PROTOBUF_vision_2fFRVisionModelProto_2eproto__INCLUDED
#define PROTOBUF_vision_2fFRVisionModelProto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_vision_2fFRVisionModelProto_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsVisionImpl();
void InitDefaultsVision();
void InitDefaultsVisionControlStateImpl();
void InitDefaultsVisionControlState();
void InitDefaultsObstacleDetectionSectorImpl();
void InitDefaultsObstacleDetectionSector();
void InitDefaultsVisionDetectionStateImpl();
void InitDefaultsVisionDetectionState();
void InitDefaultsVisionState_DetectionStateMapEntry_DoNotUseImpl();
void InitDefaultsVisionState_DetectionStateMapEntry_DoNotUse();
void InitDefaultsVisionStateImpl();
void InitDefaultsVisionState();
inline void InitDefaults() {
  InitDefaultsVision();
  InitDefaultsVisionControlState();
  InitDefaultsObstacleDetectionSector();
  InitDefaultsVisionDetectionState();
  InitDefaultsVisionState_DetectionStateMapEntry_DoNotUse();
  InitDefaultsVisionState();
}
}  // namespace protobuf_vision_2fFRVisionModelProto_2eproto
namespace DJIFRProto {
namespace Standard {
class ObstacleDetectionSector;
class ObstacleDetectionSectorDefaultTypeInternal;
extern ObstacleDetectionSectorDefaultTypeInternal _ObstacleDetectionSector_default_instance_;
class Vision;
class VisionDefaultTypeInternal;
extern VisionDefaultTypeInternal _Vision_default_instance_;
class VisionControlState;
class VisionControlStateDefaultTypeInternal;
extern VisionControlStateDefaultTypeInternal _VisionControlState_default_instance_;
class VisionDetectionState;
class VisionDetectionStateDefaultTypeInternal;
extern VisionDetectionStateDefaultTypeInternal _VisionDetectionState_default_instance_;
class VisionState;
class VisionStateDefaultTypeInternal;
extern VisionStateDefaultTypeInternal _VisionState_default_instance_;
class VisionState_DetectionStateMapEntry_DoNotUse;
class VisionState_DetectionStateMapEntry_DoNotUseDefaultTypeInternal;
extern VisionState_DetectionStateMapEntry_DoNotUseDefaultTypeInternal _VisionState_DetectionStateMapEntry_DoNotUse_default_instance_;
}  // namespace Standard
}  // namespace DJIFRProto
namespace DJIFRProto {
namespace Standard {

enum Vision_ObstacleDetectionSectorWarning {
  Vision_ObstacleDetectionSectorWarning_DetectionInvalid = 0,
  Vision_ObstacleDetectionSectorWarning_DetectionSafe = 1,
  Vision_ObstacleDetectionSectorWarning_Warning = 2,
  Vision_ObstacleDetectionSectorWarning_Danger = 3,
  Vision_ObstacleDetectionSectorWarning_Vision_ObstacleDetectionSectorWarning_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Vision_ObstacleDetectionSectorWarning_Vision_ObstacleDetectionSectorWarning_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Vision_ObstacleDetectionSectorWarning_IsValid(int value);
const Vision_ObstacleDetectionSectorWarning Vision_ObstacleDetectionSectorWarning_ObstacleDetectionSectorWarning_MIN = Vision_ObstacleDetectionSectorWarning_DetectionInvalid;
const Vision_ObstacleDetectionSectorWarning Vision_ObstacleDetectionSectorWarning_ObstacleDetectionSectorWarning_MAX = Vision_ObstacleDetectionSectorWarning_Danger;
const int Vision_ObstacleDetectionSectorWarning_ObstacleDetectionSectorWarning_ARRAYSIZE = Vision_ObstacleDetectionSectorWarning_ObstacleDetectionSectorWarning_MAX + 1;

const ::google::protobuf::EnumDescriptor* Vision_ObstacleDetectionSectorWarning_descriptor();
inline const ::std::string& Vision_ObstacleDetectionSectorWarning_Name(Vision_ObstacleDetectionSectorWarning value) {
  return ::google::protobuf::internal::NameOfEnum(
    Vision_ObstacleDetectionSectorWarning_descriptor(), value);
}
inline bool Vision_ObstacleDetectionSectorWarning_Parse(
    const ::std::string& name, Vision_ObstacleDetectionSectorWarning* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Vision_ObstacleDetectionSectorWarning>(
    Vision_ObstacleDetectionSectorWarning_descriptor(), name, value);
}
enum Vision_VisionSensorPosition {
  Vision_VisionSensorPosition_Nose = 0,
  Vision_VisionSensorPosition_Tail = 1,
  Vision_VisionSensorPosition_Right = 2,
  Vision_VisionSensorPosition_Left = 3,
  Vision_VisionSensorPosition_PositionUnknown = 4,
  Vision_VisionSensorPosition_Vision_VisionSensorPosition_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Vision_VisionSensorPosition_Vision_VisionSensorPosition_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Vision_VisionSensorPosition_IsValid(int value);
const Vision_VisionSensorPosition Vision_VisionSensorPosition_VisionSensorPosition_MIN = Vision_VisionSensorPosition_Nose;
const Vision_VisionSensorPosition Vision_VisionSensorPosition_VisionSensorPosition_MAX = Vision_VisionSensorPosition_PositionUnknown;
const int Vision_VisionSensorPosition_VisionSensorPosition_ARRAYSIZE = Vision_VisionSensorPosition_VisionSensorPosition_MAX + 1;

const ::google::protobuf::EnumDescriptor* Vision_VisionSensorPosition_descriptor();
inline const ::std::string& Vision_VisionSensorPosition_Name(Vision_VisionSensorPosition value) {
  return ::google::protobuf::internal::NameOfEnum(
    Vision_VisionSensorPosition_descriptor(), value);
}
inline bool Vision_VisionSensorPosition_Parse(
    const ::std::string& name, Vision_VisionSensorPosition* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Vision_VisionSensorPosition>(
    Vision_VisionSensorPosition_descriptor(), name, value);
}
enum Vision_VisionSystemWarning {
  Vision_VisionSystemWarning_VisionSystemInvalid = 0,
  Vision_VisionSystemWarning_VisionSystemSafe = 1,
  Vision_VisionSystemWarning_Dangerous = 2,
  Vision_VisionSystemWarning_VisionSystemUnknown = 3,
  Vision_VisionSystemWarning_Vision_VisionSystemWarning_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Vision_VisionSystemWarning_Vision_VisionSystemWarning_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Vision_VisionSystemWarning_IsValid(int value);
const Vision_VisionSystemWarning Vision_VisionSystemWarning_VisionSystemWarning_MIN = Vision_VisionSystemWarning_VisionSystemInvalid;
const Vision_VisionSystemWarning Vision_VisionSystemWarning_VisionSystemWarning_MAX = Vision_VisionSystemWarning_VisionSystemUnknown;
const int Vision_VisionSystemWarning_VisionSystemWarning_ARRAYSIZE = Vision_VisionSystemWarning_VisionSystemWarning_MAX + 1;

const ::google::protobuf::EnumDescriptor* Vision_VisionSystemWarning_descriptor();
inline const ::std::string& Vision_VisionSystemWarning_Name(Vision_VisionSystemWarning value) {
  return ::google::protobuf::internal::NameOfEnum(
    Vision_VisionSystemWarning_descriptor(), value);
}
inline bool Vision_VisionSystemWarning_Parse(
    const ::std::string& name, Vision_VisionSystemWarning* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Vision_VisionSystemWarning>(
    Vision_VisionSystemWarning_descriptor(), name, value);
}
// ===================================================================

class Vision : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.Vision) */ {
 public:
  Vision();
  virtual ~Vision();

  Vision(const Vision& from);

  inline Vision& operator=(const Vision& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vision(Vision&& from) noexcept
    : Vision() {
    *this = ::std::move(from);
  }

  inline Vision& operator=(Vision&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vision& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vision* internal_default_instance() {
    return reinterpret_cast<const Vision*>(
               &_Vision_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Vision* other);
  friend void swap(Vision& a, Vision& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vision* New() const PROTOBUF_FINAL { return New(NULL); }

  Vision* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Vision& from);
  void MergeFrom(const Vision& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Vision* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Vision_ObstacleDetectionSectorWarning ObstacleDetectionSectorWarning;
  static const ObstacleDetectionSectorWarning DetectionInvalid =
    Vision_ObstacleDetectionSectorWarning_DetectionInvalid;
  static const ObstacleDetectionSectorWarning DetectionSafe =
    Vision_ObstacleDetectionSectorWarning_DetectionSafe;
  static const ObstacleDetectionSectorWarning Warning =
    Vision_ObstacleDetectionSectorWarning_Warning;
  static const ObstacleDetectionSectorWarning Danger =
    Vision_ObstacleDetectionSectorWarning_Danger;
  static inline bool ObstacleDetectionSectorWarning_IsValid(int value) {
    return Vision_ObstacleDetectionSectorWarning_IsValid(value);
  }
  static const ObstacleDetectionSectorWarning ObstacleDetectionSectorWarning_MIN =
    Vision_ObstacleDetectionSectorWarning_ObstacleDetectionSectorWarning_MIN;
  static const ObstacleDetectionSectorWarning ObstacleDetectionSectorWarning_MAX =
    Vision_ObstacleDetectionSectorWarning_ObstacleDetectionSectorWarning_MAX;
  static const int ObstacleDetectionSectorWarning_ARRAYSIZE =
    Vision_ObstacleDetectionSectorWarning_ObstacleDetectionSectorWarning_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ObstacleDetectionSectorWarning_descriptor() {
    return Vision_ObstacleDetectionSectorWarning_descriptor();
  }
  static inline const ::std::string& ObstacleDetectionSectorWarning_Name(ObstacleDetectionSectorWarning value) {
    return Vision_ObstacleDetectionSectorWarning_Name(value);
  }
  static inline bool ObstacleDetectionSectorWarning_Parse(const ::std::string& name,
      ObstacleDetectionSectorWarning* value) {
    return Vision_ObstacleDetectionSectorWarning_Parse(name, value);
  }

  typedef Vision_VisionSensorPosition VisionSensorPosition;
  static const VisionSensorPosition Nose =
    Vision_VisionSensorPosition_Nose;
  static const VisionSensorPosition Tail =
    Vision_VisionSensorPosition_Tail;
  static const VisionSensorPosition Right =
    Vision_VisionSensorPosition_Right;
  static const VisionSensorPosition Left =
    Vision_VisionSensorPosition_Left;
  static const VisionSensorPosition PositionUnknown =
    Vision_VisionSensorPosition_PositionUnknown;
  static inline bool VisionSensorPosition_IsValid(int value) {
    return Vision_VisionSensorPosition_IsValid(value);
  }
  static const VisionSensorPosition VisionSensorPosition_MIN =
    Vision_VisionSensorPosition_VisionSensorPosition_MIN;
  static const VisionSensorPosition VisionSensorPosition_MAX =
    Vision_VisionSensorPosition_VisionSensorPosition_MAX;
  static const int VisionSensorPosition_ARRAYSIZE =
    Vision_VisionSensorPosition_VisionSensorPosition_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VisionSensorPosition_descriptor() {
    return Vision_VisionSensorPosition_descriptor();
  }
  static inline const ::std::string& VisionSensorPosition_Name(VisionSensorPosition value) {
    return Vision_VisionSensorPosition_Name(value);
  }
  static inline bool VisionSensorPosition_Parse(const ::std::string& name,
      VisionSensorPosition* value) {
    return Vision_VisionSensorPosition_Parse(name, value);
  }

  typedef Vision_VisionSystemWarning VisionSystemWarning;
  static const VisionSystemWarning VisionSystemInvalid =
    Vision_VisionSystemWarning_VisionSystemInvalid;
  static const VisionSystemWarning VisionSystemSafe =
    Vision_VisionSystemWarning_VisionSystemSafe;
  static const VisionSystemWarning Dangerous =
    Vision_VisionSystemWarning_Dangerous;
  static const VisionSystemWarning VisionSystemUnknown =
    Vision_VisionSystemWarning_VisionSystemUnknown;
  static inline bool VisionSystemWarning_IsValid(int value) {
    return Vision_VisionSystemWarning_IsValid(value);
  }
  static const VisionSystemWarning VisionSystemWarning_MIN =
    Vision_VisionSystemWarning_VisionSystemWarning_MIN;
  static const VisionSystemWarning VisionSystemWarning_MAX =
    Vision_VisionSystemWarning_VisionSystemWarning_MAX;
  static const int VisionSystemWarning_ARRAYSIZE =
    Vision_VisionSystemWarning_VisionSystemWarning_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VisionSystemWarning_descriptor() {
    return Vision_VisionSystemWarning_descriptor();
  }
  static inline const ::std::string& VisionSystemWarning_Name(VisionSystemWarning value) {
    return Vision_VisionSystemWarning_Name(value);
  }
  static inline bool VisionSystemWarning_Parse(const ::std::string& name,
      VisionSystemWarning* value) {
    return Vision_VisionSystemWarning_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.Vision)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_vision_2fFRVisionModelProto_2eproto::TableStruct;
  friend void ::protobuf_vision_2fFRVisionModelProto_2eproto::InitDefaultsVisionImpl();
};
// -------------------------------------------------------------------

class VisionControlState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.VisionControlState) */ {
 public:
  VisionControlState();
  virtual ~VisionControlState();

  VisionControlState(const VisionControlState& from);

  inline VisionControlState& operator=(const VisionControlState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VisionControlState(VisionControlState&& from) noexcept
    : VisionControlState() {
    *this = ::std::move(from);
  }

  inline VisionControlState& operator=(VisionControlState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VisionControlState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VisionControlState* internal_default_instance() {
    return reinterpret_cast<const VisionControlState*>(
               &_VisionControlState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(VisionControlState* other);
  friend void swap(VisionControlState& a, VisionControlState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VisionControlState* New() const PROTOBUF_FINAL { return New(NULL); }

  VisionControlState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VisionControlState& from);
  void MergeFrom(const VisionControlState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VisionControlState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool isAscentLimitedByObstacle = 1;
  void clear_isascentlimitedbyobstacle();
  static const int kIsAscentLimitedByObstacleFieldNumber = 1;
  bool isascentlimitedbyobstacle() const;
  void set_isascentlimitedbyobstacle(bool value);

  // bool isAvoidingActiveObstacleCollision = 2;
  void clear_isavoidingactiveobstaclecollision();
  static const int kIsAvoidingActiveObstacleCollisionFieldNumber = 2;
  bool isavoidingactiveobstaclecollision() const;
  void set_isavoidingactiveobstaclecollision(bool value);

  // bool isBraking = 3;
  void clear_isbraking();
  static const int kIsBrakingFieldNumber = 3;
  bool isbraking() const;
  void set_isbraking(bool value);

  // bool isPerformingPrecisionLanding = 4;
  void clear_isperformingprecisionlanding();
  static const int kIsPerformingPrecisionLandingFieldNumber = 4;
  bool isperformingprecisionlanding() const;
  void set_isperformingprecisionlanding(bool value);

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.VisionControlState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool isascentlimitedbyobstacle_;
  bool isavoidingactiveobstaclecollision_;
  bool isbraking_;
  bool isperformingprecisionlanding_;
  mutable int _cached_size_;
  friend struct ::protobuf_vision_2fFRVisionModelProto_2eproto::TableStruct;
  friend void ::protobuf_vision_2fFRVisionModelProto_2eproto::InitDefaultsVisionControlStateImpl();
};
// -------------------------------------------------------------------

class ObstacleDetectionSector : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.ObstacleDetectionSector) */ {
 public:
  ObstacleDetectionSector();
  virtual ~ObstacleDetectionSector();

  ObstacleDetectionSector(const ObstacleDetectionSector& from);

  inline ObstacleDetectionSector& operator=(const ObstacleDetectionSector& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObstacleDetectionSector(ObstacleDetectionSector&& from) noexcept
    : ObstacleDetectionSector() {
    *this = ::std::move(from);
  }

  inline ObstacleDetectionSector& operator=(ObstacleDetectionSector&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObstacleDetectionSector& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObstacleDetectionSector* internal_default_instance() {
    return reinterpret_cast<const ObstacleDetectionSector*>(
               &_ObstacleDetectionSector_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ObstacleDetectionSector* other);
  friend void swap(ObstacleDetectionSector& a, ObstacleDetectionSector& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObstacleDetectionSector* New() const PROTOBUF_FINAL { return New(NULL); }

  ObstacleDetectionSector* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ObstacleDetectionSector& from);
  void MergeFrom(const ObstacleDetectionSector& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ObstacleDetectionSector* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double obstacleDistanceInMeters = 1;
  void clear_obstacledistanceinmeters();
  static const int kObstacleDistanceInMetersFieldNumber = 1;
  double obstacledistanceinmeters() const;
  void set_obstacledistanceinmeters(double value);

  // .DJIFRProto.Standard.Vision.ObstacleDetectionSectorWarning warningLevel = 2;
  void clear_warninglevel();
  static const int kWarningLevelFieldNumber = 2;
  ::DJIFRProto::Standard::Vision_ObstacleDetectionSectorWarning warninglevel() const;
  void set_warninglevel(::DJIFRProto::Standard::Vision_ObstacleDetectionSectorWarning value);

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.ObstacleDetectionSector)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double obstacledistanceinmeters_;
  int warninglevel_;
  mutable int _cached_size_;
  friend struct ::protobuf_vision_2fFRVisionModelProto_2eproto::TableStruct;
  friend void ::protobuf_vision_2fFRVisionModelProto_2eproto::InitDefaultsObstacleDetectionSectorImpl();
};
// -------------------------------------------------------------------

class VisionDetectionState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.VisionDetectionState) */ {
 public:
  VisionDetectionState();
  virtual ~VisionDetectionState();

  VisionDetectionState(const VisionDetectionState& from);

  inline VisionDetectionState& operator=(const VisionDetectionState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VisionDetectionState(VisionDetectionState&& from) noexcept
    : VisionDetectionState() {
    *this = ::std::move(from);
  }

  inline VisionDetectionState& operator=(VisionDetectionState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VisionDetectionState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VisionDetectionState* internal_default_instance() {
    return reinterpret_cast<const VisionDetectionState*>(
               &_VisionDetectionState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(VisionDetectionState* other);
  friend void swap(VisionDetectionState& a, VisionDetectionState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VisionDetectionState* New() const PROTOBUF_FINAL { return New(NULL); }

  VisionDetectionState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VisionDetectionState& from);
  void MergeFrom(const VisionDetectionState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VisionDetectionState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .DJIFRProto.Standard.ObstacleDetectionSector detectionSectors = 5;
  int detectionsectors_size() const;
  void clear_detectionsectors();
  static const int kDetectionSectorsFieldNumber = 5;
  const ::DJIFRProto::Standard::ObstacleDetectionSector& detectionsectors(int index) const;
  ::DJIFRProto::Standard::ObstacleDetectionSector* mutable_detectionsectors(int index);
  ::DJIFRProto::Standard::ObstacleDetectionSector* add_detectionsectors();
  ::google::protobuf::RepeatedPtrField< ::DJIFRProto::Standard::ObstacleDetectionSector >*
      mutable_detectionsectors();
  const ::google::protobuf::RepeatedPtrField< ::DJIFRProto::Standard::ObstacleDetectionSector >&
      detectionsectors() const;

  // .DJIFRProto.Standard.Vision.VisionSensorPosition position = 1;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  ::DJIFRProto::Standard::Vision_VisionSensorPosition position() const;
  void set_position(::DJIFRProto::Standard::Vision_VisionSensorPosition value);

  // bool isSensorBeingUsed = 2;
  void clear_issensorbeingused();
  static const int kIsSensorBeingUsedFieldNumber = 2;
  bool issensorbeingused() const;
  void set_issensorbeingused(bool value);

  // double obstacleDistanceInMeters = 4;
  void clear_obstacledistanceinmeters();
  static const int kObstacleDistanceInMetersFieldNumber = 4;
  double obstacledistanceinmeters() const;
  void set_obstacledistanceinmeters(double value);

  // .DJIFRProto.Standard.Vision.VisionSystemWarning systemWarning = 3;
  void clear_systemwarning();
  static const int kSystemWarningFieldNumber = 3;
  ::DJIFRProto::Standard::Vision_VisionSystemWarning systemwarning() const;
  void set_systemwarning(::DJIFRProto::Standard::Vision_VisionSystemWarning value);

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.VisionDetectionState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::DJIFRProto::Standard::ObstacleDetectionSector > detectionsectors_;
  int position_;
  bool issensorbeingused_;
  double obstacledistanceinmeters_;
  int systemwarning_;
  mutable int _cached_size_;
  friend struct ::protobuf_vision_2fFRVisionModelProto_2eproto::TableStruct;
  friend void ::protobuf_vision_2fFRVisionModelProto_2eproto::InitDefaultsVisionDetectionStateImpl();
};
// -------------------------------------------------------------------

class VisionState_DetectionStateMapEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<VisionState_DetectionStateMapEntry_DoNotUse, 
    ::google::protobuf::int32, ::DJIFRProto::Standard::VisionDetectionState,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<VisionState_DetectionStateMapEntry_DoNotUse, 
    ::google::protobuf::int32, ::DJIFRProto::Standard::VisionDetectionState,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  VisionState_DetectionStateMapEntry_DoNotUse();
  VisionState_DetectionStateMapEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const VisionState_DetectionStateMapEntry_DoNotUse& other);
  static const VisionState_DetectionStateMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const VisionState_DetectionStateMapEntry_DoNotUse*>(&_VisionState_DetectionStateMapEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class VisionState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.VisionState) */ {
 public:
  VisionState();
  virtual ~VisionState();

  VisionState(const VisionState& from);

  inline VisionState& operator=(const VisionState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VisionState(VisionState&& from) noexcept
    : VisionState() {
    *this = ::std::move(from);
  }

  inline VisionState& operator=(VisionState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VisionState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VisionState* internal_default_instance() {
    return reinterpret_cast<const VisionState*>(
               &_VisionState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(VisionState* other);
  friend void swap(VisionState& a, VisionState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VisionState* New() const PROTOBUF_FINAL { return New(NULL); }

  VisionState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VisionState& from);
  void MergeFrom(const VisionState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VisionState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<int32, .DJIFRProto.Standard.VisionDetectionState> detectionStateMap = 3;
  int detectionstatemap_size() const;
  void clear_detectionstatemap();
  static const int kDetectionStateMapFieldNumber = 3;
  const ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::VisionDetectionState >&
      detectionstatemap() const;
  ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::VisionDetectionState >*
      mutable_detectionstatemap();

  // .DJIFRProto.Standard.VisionControlState controlState = 2;
  bool has_controlstate() const;
  void clear_controlstate();
  static const int kControlStateFieldNumber = 2;
  const ::DJIFRProto::Standard::VisionControlState& controlstate() const;
  ::DJIFRProto::Standard::VisionControlState* release_controlstate();
  ::DJIFRProto::Standard::VisionControlState* mutable_controlstate();
  void set_allocated_controlstate(::DJIFRProto::Standard::VisionControlState* controlstate);

  // bool collisionAvoidanceEnabled = 1;
  void clear_collisionavoidanceenabled();
  static const int kCollisionAvoidanceEnabledFieldNumber = 1;
  bool collisionavoidanceenabled() const;
  void set_collisionavoidanceenabled(bool value);

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.VisionState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      VisionState_DetectionStateMapEntry_DoNotUse,
      ::google::protobuf::int32, ::DJIFRProto::Standard::VisionDetectionState,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > detectionstatemap_;
  ::DJIFRProto::Standard::VisionControlState* controlstate_;
  bool collisionavoidanceenabled_;
  mutable int _cached_size_;
  friend struct ::protobuf_vision_2fFRVisionModelProto_2eproto::TableStruct;
  friend void ::protobuf_vision_2fFRVisionModelProto_2eproto::InitDefaultsVisionStateImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vision

// -------------------------------------------------------------------

// VisionControlState

// bool isAscentLimitedByObstacle = 1;
inline void VisionControlState::clear_isascentlimitedbyobstacle() {
  isascentlimitedbyobstacle_ = false;
}
inline bool VisionControlState::isascentlimitedbyobstacle() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.VisionControlState.isAscentLimitedByObstacle)
  return isascentlimitedbyobstacle_;
}
inline void VisionControlState::set_isascentlimitedbyobstacle(bool value) {
  
  isascentlimitedbyobstacle_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.VisionControlState.isAscentLimitedByObstacle)
}

// bool isAvoidingActiveObstacleCollision = 2;
inline void VisionControlState::clear_isavoidingactiveobstaclecollision() {
  isavoidingactiveobstaclecollision_ = false;
}
inline bool VisionControlState::isavoidingactiveobstaclecollision() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.VisionControlState.isAvoidingActiveObstacleCollision)
  return isavoidingactiveobstaclecollision_;
}
inline void VisionControlState::set_isavoidingactiveobstaclecollision(bool value) {
  
  isavoidingactiveobstaclecollision_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.VisionControlState.isAvoidingActiveObstacleCollision)
}

// bool isBraking = 3;
inline void VisionControlState::clear_isbraking() {
  isbraking_ = false;
}
inline bool VisionControlState::isbraking() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.VisionControlState.isBraking)
  return isbraking_;
}
inline void VisionControlState::set_isbraking(bool value) {
  
  isbraking_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.VisionControlState.isBraking)
}

// bool isPerformingPrecisionLanding = 4;
inline void VisionControlState::clear_isperformingprecisionlanding() {
  isperformingprecisionlanding_ = false;
}
inline bool VisionControlState::isperformingprecisionlanding() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.VisionControlState.isPerformingPrecisionLanding)
  return isperformingprecisionlanding_;
}
inline void VisionControlState::set_isperformingprecisionlanding(bool value) {
  
  isperformingprecisionlanding_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.VisionControlState.isPerformingPrecisionLanding)
}

// -------------------------------------------------------------------

// ObstacleDetectionSector

// double obstacleDistanceInMeters = 1;
inline void ObstacleDetectionSector::clear_obstacledistanceinmeters() {
  obstacledistanceinmeters_ = 0;
}
inline double ObstacleDetectionSector::obstacledistanceinmeters() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.ObstacleDetectionSector.obstacleDistanceInMeters)
  return obstacledistanceinmeters_;
}
inline void ObstacleDetectionSector::set_obstacledistanceinmeters(double value) {
  
  obstacledistanceinmeters_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.ObstacleDetectionSector.obstacleDistanceInMeters)
}

// .DJIFRProto.Standard.Vision.ObstacleDetectionSectorWarning warningLevel = 2;
inline void ObstacleDetectionSector::clear_warninglevel() {
  warninglevel_ = 0;
}
inline ::DJIFRProto::Standard::Vision_ObstacleDetectionSectorWarning ObstacleDetectionSector::warninglevel() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.ObstacleDetectionSector.warningLevel)
  return static_cast< ::DJIFRProto::Standard::Vision_ObstacleDetectionSectorWarning >(warninglevel_);
}
inline void ObstacleDetectionSector::set_warninglevel(::DJIFRProto::Standard::Vision_ObstacleDetectionSectorWarning value) {
  
  warninglevel_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.ObstacleDetectionSector.warningLevel)
}

// -------------------------------------------------------------------

// VisionDetectionState

// .DJIFRProto.Standard.Vision.VisionSensorPosition position = 1;
inline void VisionDetectionState::clear_position() {
  position_ = 0;
}
inline ::DJIFRProto::Standard::Vision_VisionSensorPosition VisionDetectionState::position() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.VisionDetectionState.position)
  return static_cast< ::DJIFRProto::Standard::Vision_VisionSensorPosition >(position_);
}
inline void VisionDetectionState::set_position(::DJIFRProto::Standard::Vision_VisionSensorPosition value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.VisionDetectionState.position)
}

// bool isSensorBeingUsed = 2;
inline void VisionDetectionState::clear_issensorbeingused() {
  issensorbeingused_ = false;
}
inline bool VisionDetectionState::issensorbeingused() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.VisionDetectionState.isSensorBeingUsed)
  return issensorbeingused_;
}
inline void VisionDetectionState::set_issensorbeingused(bool value) {
  
  issensorbeingused_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.VisionDetectionState.isSensorBeingUsed)
}

// .DJIFRProto.Standard.Vision.VisionSystemWarning systemWarning = 3;
inline void VisionDetectionState::clear_systemwarning() {
  systemwarning_ = 0;
}
inline ::DJIFRProto::Standard::Vision_VisionSystemWarning VisionDetectionState::systemwarning() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.VisionDetectionState.systemWarning)
  return static_cast< ::DJIFRProto::Standard::Vision_VisionSystemWarning >(systemwarning_);
}
inline void VisionDetectionState::set_systemwarning(::DJIFRProto::Standard::Vision_VisionSystemWarning value) {
  
  systemwarning_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.VisionDetectionState.systemWarning)
}

// double obstacleDistanceInMeters = 4;
inline void VisionDetectionState::clear_obstacledistanceinmeters() {
  obstacledistanceinmeters_ = 0;
}
inline double VisionDetectionState::obstacledistanceinmeters() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.VisionDetectionState.obstacleDistanceInMeters)
  return obstacledistanceinmeters_;
}
inline void VisionDetectionState::set_obstacledistanceinmeters(double value) {
  
  obstacledistanceinmeters_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.VisionDetectionState.obstacleDistanceInMeters)
}

// repeated .DJIFRProto.Standard.ObstacleDetectionSector detectionSectors = 5;
inline int VisionDetectionState::detectionsectors_size() const {
  return detectionsectors_.size();
}
inline void VisionDetectionState::clear_detectionsectors() {
  detectionsectors_.Clear();
}
inline const ::DJIFRProto::Standard::ObstacleDetectionSector& VisionDetectionState::detectionsectors(int index) const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.VisionDetectionState.detectionSectors)
  return detectionsectors_.Get(index);
}
inline ::DJIFRProto::Standard::ObstacleDetectionSector* VisionDetectionState::mutable_detectionsectors(int index) {
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.VisionDetectionState.detectionSectors)
  return detectionsectors_.Mutable(index);
}
inline ::DJIFRProto::Standard::ObstacleDetectionSector* VisionDetectionState::add_detectionsectors() {
  // @@protoc_insertion_point(field_add:DJIFRProto.Standard.VisionDetectionState.detectionSectors)
  return detectionsectors_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::DJIFRProto::Standard::ObstacleDetectionSector >*
VisionDetectionState::mutable_detectionsectors() {
  // @@protoc_insertion_point(field_mutable_list:DJIFRProto.Standard.VisionDetectionState.detectionSectors)
  return &detectionsectors_;
}
inline const ::google::protobuf::RepeatedPtrField< ::DJIFRProto::Standard::ObstacleDetectionSector >&
VisionDetectionState::detectionsectors() const {
  // @@protoc_insertion_point(field_list:DJIFRProto.Standard.VisionDetectionState.detectionSectors)
  return detectionsectors_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// VisionState

// bool collisionAvoidanceEnabled = 1;
inline void VisionState::clear_collisionavoidanceenabled() {
  collisionavoidanceenabled_ = false;
}
inline bool VisionState::collisionavoidanceenabled() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.VisionState.collisionAvoidanceEnabled)
  return collisionavoidanceenabled_;
}
inline void VisionState::set_collisionavoidanceenabled(bool value) {
  
  collisionavoidanceenabled_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.VisionState.collisionAvoidanceEnabled)
}

// .DJIFRProto.Standard.VisionControlState controlState = 2;
inline bool VisionState::has_controlstate() const {
  return this != internal_default_instance() && controlstate_ != NULL;
}
inline void VisionState::clear_controlstate() {
  if (GetArenaNoVirtual() == NULL && controlstate_ != NULL) {
    delete controlstate_;
  }
  controlstate_ = NULL;
}
inline const ::DJIFRProto::Standard::VisionControlState& VisionState::controlstate() const {
  const ::DJIFRProto::Standard::VisionControlState* p = controlstate_;
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.VisionState.controlState)
  return p != NULL ? *p : *reinterpret_cast<const ::DJIFRProto::Standard::VisionControlState*>(
      &::DJIFRProto::Standard::_VisionControlState_default_instance_);
}
inline ::DJIFRProto::Standard::VisionControlState* VisionState::release_controlstate() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.VisionState.controlState)
  
  ::DJIFRProto::Standard::VisionControlState* temp = controlstate_;
  controlstate_ = NULL;
  return temp;
}
inline ::DJIFRProto::Standard::VisionControlState* VisionState::mutable_controlstate() {
  
  if (controlstate_ == NULL) {
    controlstate_ = new ::DJIFRProto::Standard::VisionControlState;
  }
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.VisionState.controlState)
  return controlstate_;
}
inline void VisionState::set_allocated_controlstate(::DJIFRProto::Standard::VisionControlState* controlstate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete controlstate_;
  }
  if (controlstate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      controlstate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, controlstate, submessage_arena);
    }
    
  } else {
    
  }
  controlstate_ = controlstate;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.VisionState.controlState)
}

// map<int32, .DJIFRProto.Standard.VisionDetectionState> detectionStateMap = 3;
inline int VisionState::detectionstatemap_size() const {
  return detectionstatemap_.size();
}
inline void VisionState::clear_detectionstatemap() {
  detectionstatemap_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::VisionDetectionState >&
VisionState::detectionstatemap() const {
  // @@protoc_insertion_point(field_map:DJIFRProto.Standard.VisionState.detectionStateMap)
  return detectionstatemap_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::int32, ::DJIFRProto::Standard::VisionDetectionState >*
VisionState::mutable_detectionstatemap() {
  // @@protoc_insertion_point(field_mutable_map:DJIFRProto.Standard.VisionState.detectionStateMap)
  return detectionstatemap_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Standard
}  // namespace DJIFRProto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::DJIFRProto::Standard::Vision_ObstacleDetectionSectorWarning> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DJIFRProto::Standard::Vision_ObstacleDetectionSectorWarning>() {
  return ::DJIFRProto::Standard::Vision_ObstacleDetectionSectorWarning_descriptor();
}
template <> struct is_proto_enum< ::DJIFRProto::Standard::Vision_VisionSensorPosition> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DJIFRProto::Standard::Vision_VisionSensorPosition>() {
  return ::DJIFRProto::Standard::Vision_VisionSensorPosition_descriptor();
}
template <> struct is_proto_enum< ::DJIFRProto::Standard::Vision_VisionSystemWarning> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DJIFRProto::Standard::Vision_VisionSystemWarning>() {
  return ::DJIFRProto::Standard::Vision_VisionSystemWarning_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_vision_2fFRVisionModelProto_2eproto__INCLUDED
