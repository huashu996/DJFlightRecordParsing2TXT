// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FRBatteryStateProto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_FRBatteryStateProto_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_FRBatteryStateProto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_FRBatteryStateProto_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_FRBatteryStateProto_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_FRBatteryStateProto_2eproto;
namespace DJIFRProto {
namespace Standard {
class BatteryState;
struct BatteryStateDefaultTypeInternal;
extern BatteryStateDefaultTypeInternal _BatteryState_default_instance_;
}  // namespace Standard
}  // namespace DJIFRProto
PROTOBUF_NAMESPACE_OPEN
template<> ::DJIFRProto::Standard::BatteryState* Arena::CreateMaybeMessage<::DJIFRProto::Standard::BatteryState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace DJIFRProto {
namespace Standard {

// ===================================================================

class BatteryState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.BatteryState) */ {
 public:
  inline BatteryState() : BatteryState(nullptr) {}
  ~BatteryState() override;
  explicit PROTOBUF_CONSTEXPR BatteryState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatteryState(const BatteryState& from);
  BatteryState(BatteryState&& from) noexcept
    : BatteryState() {
    *this = ::std::move(from);
  }

  inline BatteryState& operator=(const BatteryState& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatteryState& operator=(BatteryState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatteryState& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatteryState* internal_default_instance() {
    return reinterpret_cast<const BatteryState*>(
               &_BatteryState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BatteryState& a, BatteryState& b) {
    a.Swap(&b);
  }
  inline void Swap(BatteryState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatteryState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatteryState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatteryState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatteryState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatteryState& from) {
    BatteryState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatteryState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DJIFRProto.Standard.BatteryState";
  }
  protected:
  explicit BatteryState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellVoltagesFieldNumber = 4,
    kVoltageFieldNumber = 1,
    kCurrentFieldNumber = 2,
    kTemperatureFieldNumber = 3,
    kChargeRemainingInPercentFieldNumber = 5,
    kLowBatteryWarningThresholdFieldNumber = 6,
    kSeriousLowBatteryWarningThresholdFieldNumber = 7,
    kIndexFieldNumber = 8,
    kLifetimeRemainingFieldNumber = 9,
    kDesignCapacityFieldNumber = 10,
    kNumberOfDischargesFieldNumber = 11,
    kIsInSingleBatteryModeFieldNumber = 12,
    kFullChargeCapacityFieldNumber = 13,
    kChargeRemainingFieldNumber = 14,
  };
  // repeated int32 cellVoltages = 4;
  int cellvoltages_size() const;
  private:
  int _internal_cellvoltages_size() const;
  public:
  void clear_cellvoltages();
  private:
  int32_t _internal_cellvoltages(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_cellvoltages() const;
  void _internal_add_cellvoltages(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_cellvoltages();
  public:
  int32_t cellvoltages(int index) const;
  void set_cellvoltages(int index, int32_t value);
  void add_cellvoltages(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      cellvoltages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_cellvoltages();

  // int32 voltage = 1;
  void clear_voltage();
  int32_t voltage() const;
  void set_voltage(int32_t value);
  private:
  int32_t _internal_voltage() const;
  void _internal_set_voltage(int32_t value);
  public:

  // int32 current = 2;
  void clear_current();
  int32_t current() const;
  void set_current(int32_t value);
  private:
  int32_t _internal_current() const;
  void _internal_set_current(int32_t value);
  public:

  // double temperature = 3;
  void clear_temperature();
  double temperature() const;
  void set_temperature(double value);
  private:
  double _internal_temperature() const;
  void _internal_set_temperature(double value);
  public:

  // int32 chargeRemainingInPercent = 5;
  void clear_chargeremaininginpercent();
  int32_t chargeremaininginpercent() const;
  void set_chargeremaininginpercent(int32_t value);
  private:
  int32_t _internal_chargeremaininginpercent() const;
  void _internal_set_chargeremaininginpercent(int32_t value);
  public:

  // int32 lowBatteryWarningThreshold = 6;
  void clear_lowbatterywarningthreshold();
  int32_t lowbatterywarningthreshold() const;
  void set_lowbatterywarningthreshold(int32_t value);
  private:
  int32_t _internal_lowbatterywarningthreshold() const;
  void _internal_set_lowbatterywarningthreshold(int32_t value);
  public:

  // int32 seriousLowBatteryWarningThreshold = 7;
  void clear_seriouslowbatterywarningthreshold();
  int32_t seriouslowbatterywarningthreshold() const;
  void set_seriouslowbatterywarningthreshold(int32_t value);
  private:
  int32_t _internal_seriouslowbatterywarningthreshold() const;
  void _internal_set_seriouslowbatterywarningthreshold(int32_t value);
  public:

  // int32 index = 8;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // int32 lifetimeRemaining = 9;
  void clear_lifetimeremaining();
  int32_t lifetimeremaining() const;
  void set_lifetimeremaining(int32_t value);
  private:
  int32_t _internal_lifetimeremaining() const;
  void _internal_set_lifetimeremaining(int32_t value);
  public:

  // int32 designCapacity = 10;
  void clear_designcapacity();
  int32_t designcapacity() const;
  void set_designcapacity(int32_t value);
  private:
  int32_t _internal_designcapacity() const;
  void _internal_set_designcapacity(int32_t value);
  public:

  // int32 numberOfDischarges = 11;
  void clear_numberofdischarges();
  int32_t numberofdischarges() const;
  void set_numberofdischarges(int32_t value);
  private:
  int32_t _internal_numberofdischarges() const;
  void _internal_set_numberofdischarges(int32_t value);
  public:

  // bool isInSingleBatteryMode = 12;
  void clear_isinsinglebatterymode();
  bool isinsinglebatterymode() const;
  void set_isinsinglebatterymode(bool value);
  private:
  bool _internal_isinsinglebatterymode() const;
  void _internal_set_isinsinglebatterymode(bool value);
  public:

  // uint32 fullChargeCapacity = 13;
  void clear_fullchargecapacity();
  uint32_t fullchargecapacity() const;
  void set_fullchargecapacity(uint32_t value);
  private:
  uint32_t _internal_fullchargecapacity() const;
  void _internal_set_fullchargecapacity(uint32_t value);
  public:

  // uint32 chargeRemaining = 14;
  void clear_chargeremaining();
  uint32_t chargeremaining() const;
  void set_chargeremaining(uint32_t value);
  private:
  uint32_t _internal_chargeremaining() const;
  void _internal_set_chargeremaining(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.BatteryState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > cellvoltages_;
    mutable std::atomic<int> _cellvoltages_cached_byte_size_;
    int32_t voltage_;
    int32_t current_;
    double temperature_;
    int32_t chargeremaininginpercent_;
    int32_t lowbatterywarningthreshold_;
    int32_t seriouslowbatterywarningthreshold_;
    int32_t index_;
    int32_t lifetimeremaining_;
    int32_t designcapacity_;
    int32_t numberofdischarges_;
    bool isinsinglebatterymode_;
    uint32_t fullchargecapacity_;
    uint32_t chargeremaining_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FRBatteryStateProto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BatteryState

// int32 voltage = 1;
inline void BatteryState::clear_voltage() {
  _impl_.voltage_ = 0;
}
inline int32_t BatteryState::_internal_voltage() const {
  return _impl_.voltage_;
}
inline int32_t BatteryState::voltage() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.BatteryState.voltage)
  return _internal_voltage();
}
inline void BatteryState::_internal_set_voltage(int32_t value) {
  
  _impl_.voltage_ = value;
}
inline void BatteryState::set_voltage(int32_t value) {
  _internal_set_voltage(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.BatteryState.voltage)
}

// int32 current = 2;
inline void BatteryState::clear_current() {
  _impl_.current_ = 0;
}
inline int32_t BatteryState::_internal_current() const {
  return _impl_.current_;
}
inline int32_t BatteryState::current() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.BatteryState.current)
  return _internal_current();
}
inline void BatteryState::_internal_set_current(int32_t value) {
  
  _impl_.current_ = value;
}
inline void BatteryState::set_current(int32_t value) {
  _internal_set_current(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.BatteryState.current)
}

// double temperature = 3;
inline void BatteryState::clear_temperature() {
  _impl_.temperature_ = 0;
}
inline double BatteryState::_internal_temperature() const {
  return _impl_.temperature_;
}
inline double BatteryState::temperature() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.BatteryState.temperature)
  return _internal_temperature();
}
inline void BatteryState::_internal_set_temperature(double value) {
  
  _impl_.temperature_ = value;
}
inline void BatteryState::set_temperature(double value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.BatteryState.temperature)
}

// repeated int32 cellVoltages = 4;
inline int BatteryState::_internal_cellvoltages_size() const {
  return _impl_.cellvoltages_.size();
}
inline int BatteryState::cellvoltages_size() const {
  return _internal_cellvoltages_size();
}
inline void BatteryState::clear_cellvoltages() {
  _impl_.cellvoltages_.Clear();
}
inline int32_t BatteryState::_internal_cellvoltages(int index) const {
  return _impl_.cellvoltages_.Get(index);
}
inline int32_t BatteryState::cellvoltages(int index) const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.BatteryState.cellVoltages)
  return _internal_cellvoltages(index);
}
inline void BatteryState::set_cellvoltages(int index, int32_t value) {
  _impl_.cellvoltages_.Set(index, value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.BatteryState.cellVoltages)
}
inline void BatteryState::_internal_add_cellvoltages(int32_t value) {
  _impl_.cellvoltages_.Add(value);
}
inline void BatteryState::add_cellvoltages(int32_t value) {
  _internal_add_cellvoltages(value);
  // @@protoc_insertion_point(field_add:DJIFRProto.Standard.BatteryState.cellVoltages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
BatteryState::_internal_cellvoltages() const {
  return _impl_.cellvoltages_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
BatteryState::cellvoltages() const {
  // @@protoc_insertion_point(field_list:DJIFRProto.Standard.BatteryState.cellVoltages)
  return _internal_cellvoltages();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
BatteryState::_internal_mutable_cellvoltages() {
  return &_impl_.cellvoltages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
BatteryState::mutable_cellvoltages() {
  // @@protoc_insertion_point(field_mutable_list:DJIFRProto.Standard.BatteryState.cellVoltages)
  return _internal_mutable_cellvoltages();
}

// int32 chargeRemainingInPercent = 5;
inline void BatteryState::clear_chargeremaininginpercent() {
  _impl_.chargeremaininginpercent_ = 0;
}
inline int32_t BatteryState::_internal_chargeremaininginpercent() const {
  return _impl_.chargeremaininginpercent_;
}
inline int32_t BatteryState::chargeremaininginpercent() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.BatteryState.chargeRemainingInPercent)
  return _internal_chargeremaininginpercent();
}
inline void BatteryState::_internal_set_chargeremaininginpercent(int32_t value) {
  
  _impl_.chargeremaininginpercent_ = value;
}
inline void BatteryState::set_chargeremaininginpercent(int32_t value) {
  _internal_set_chargeremaininginpercent(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.BatteryState.chargeRemainingInPercent)
}

// int32 lowBatteryWarningThreshold = 6;
inline void BatteryState::clear_lowbatterywarningthreshold() {
  _impl_.lowbatterywarningthreshold_ = 0;
}
inline int32_t BatteryState::_internal_lowbatterywarningthreshold() const {
  return _impl_.lowbatterywarningthreshold_;
}
inline int32_t BatteryState::lowbatterywarningthreshold() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.BatteryState.lowBatteryWarningThreshold)
  return _internal_lowbatterywarningthreshold();
}
inline void BatteryState::_internal_set_lowbatterywarningthreshold(int32_t value) {
  
  _impl_.lowbatterywarningthreshold_ = value;
}
inline void BatteryState::set_lowbatterywarningthreshold(int32_t value) {
  _internal_set_lowbatterywarningthreshold(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.BatteryState.lowBatteryWarningThreshold)
}

// int32 seriousLowBatteryWarningThreshold = 7;
inline void BatteryState::clear_seriouslowbatterywarningthreshold() {
  _impl_.seriouslowbatterywarningthreshold_ = 0;
}
inline int32_t BatteryState::_internal_seriouslowbatterywarningthreshold() const {
  return _impl_.seriouslowbatterywarningthreshold_;
}
inline int32_t BatteryState::seriouslowbatterywarningthreshold() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.BatteryState.seriousLowBatteryWarningThreshold)
  return _internal_seriouslowbatterywarningthreshold();
}
inline void BatteryState::_internal_set_seriouslowbatterywarningthreshold(int32_t value) {
  
  _impl_.seriouslowbatterywarningthreshold_ = value;
}
inline void BatteryState::set_seriouslowbatterywarningthreshold(int32_t value) {
  _internal_set_seriouslowbatterywarningthreshold(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.BatteryState.seriousLowBatteryWarningThreshold)
}

// int32 index = 8;
inline void BatteryState::clear_index() {
  _impl_.index_ = 0;
}
inline int32_t BatteryState::_internal_index() const {
  return _impl_.index_;
}
inline int32_t BatteryState::index() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.BatteryState.index)
  return _internal_index();
}
inline void BatteryState::_internal_set_index(int32_t value) {
  
  _impl_.index_ = value;
}
inline void BatteryState::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.BatteryState.index)
}

// int32 lifetimeRemaining = 9;
inline void BatteryState::clear_lifetimeremaining() {
  _impl_.lifetimeremaining_ = 0;
}
inline int32_t BatteryState::_internal_lifetimeremaining() const {
  return _impl_.lifetimeremaining_;
}
inline int32_t BatteryState::lifetimeremaining() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.BatteryState.lifetimeRemaining)
  return _internal_lifetimeremaining();
}
inline void BatteryState::_internal_set_lifetimeremaining(int32_t value) {
  
  _impl_.lifetimeremaining_ = value;
}
inline void BatteryState::set_lifetimeremaining(int32_t value) {
  _internal_set_lifetimeremaining(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.BatteryState.lifetimeRemaining)
}

// int32 designCapacity = 10;
inline void BatteryState::clear_designcapacity() {
  _impl_.designcapacity_ = 0;
}
inline int32_t BatteryState::_internal_designcapacity() const {
  return _impl_.designcapacity_;
}
inline int32_t BatteryState::designcapacity() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.BatteryState.designCapacity)
  return _internal_designcapacity();
}
inline void BatteryState::_internal_set_designcapacity(int32_t value) {
  
  _impl_.designcapacity_ = value;
}
inline void BatteryState::set_designcapacity(int32_t value) {
  _internal_set_designcapacity(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.BatteryState.designCapacity)
}

// int32 numberOfDischarges = 11;
inline void BatteryState::clear_numberofdischarges() {
  _impl_.numberofdischarges_ = 0;
}
inline int32_t BatteryState::_internal_numberofdischarges() const {
  return _impl_.numberofdischarges_;
}
inline int32_t BatteryState::numberofdischarges() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.BatteryState.numberOfDischarges)
  return _internal_numberofdischarges();
}
inline void BatteryState::_internal_set_numberofdischarges(int32_t value) {
  
  _impl_.numberofdischarges_ = value;
}
inline void BatteryState::set_numberofdischarges(int32_t value) {
  _internal_set_numberofdischarges(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.BatteryState.numberOfDischarges)
}

// bool isInSingleBatteryMode = 12;
inline void BatteryState::clear_isinsinglebatterymode() {
  _impl_.isinsinglebatterymode_ = false;
}
inline bool BatteryState::_internal_isinsinglebatterymode() const {
  return _impl_.isinsinglebatterymode_;
}
inline bool BatteryState::isinsinglebatterymode() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.BatteryState.isInSingleBatteryMode)
  return _internal_isinsinglebatterymode();
}
inline void BatteryState::_internal_set_isinsinglebatterymode(bool value) {
  
  _impl_.isinsinglebatterymode_ = value;
}
inline void BatteryState::set_isinsinglebatterymode(bool value) {
  _internal_set_isinsinglebatterymode(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.BatteryState.isInSingleBatteryMode)
}

// uint32 fullChargeCapacity = 13;
inline void BatteryState::clear_fullchargecapacity() {
  _impl_.fullchargecapacity_ = 0u;
}
inline uint32_t BatteryState::_internal_fullchargecapacity() const {
  return _impl_.fullchargecapacity_;
}
inline uint32_t BatteryState::fullchargecapacity() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.BatteryState.fullChargeCapacity)
  return _internal_fullchargecapacity();
}
inline void BatteryState::_internal_set_fullchargecapacity(uint32_t value) {
  
  _impl_.fullchargecapacity_ = value;
}
inline void BatteryState::set_fullchargecapacity(uint32_t value) {
  _internal_set_fullchargecapacity(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.BatteryState.fullChargeCapacity)
}

// uint32 chargeRemaining = 14;
inline void BatteryState::clear_chargeremaining() {
  _impl_.chargeremaining_ = 0u;
}
inline uint32_t BatteryState::_internal_chargeremaining() const {
  return _impl_.chargeremaining_;
}
inline uint32_t BatteryState::chargeremaining() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.BatteryState.chargeRemaining)
  return _internal_chargeremaining();
}
inline void BatteryState::_internal_set_chargeremaining(uint32_t value) {
  
  _impl_.chargeremaining_ = value;
}
inline void BatteryState::set_chargeremaining(uint32_t value) {
  _internal_set_chargeremaining(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.BatteryState.chargeRemaining)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Standard
}  // namespace DJIFRProto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_FRBatteryStateProto_2eproto
