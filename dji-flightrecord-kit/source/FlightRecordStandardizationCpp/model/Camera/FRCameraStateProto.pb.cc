// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FRCameraStateProto.proto

#include "FRCameraStateProto.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace DJIFRProto {
namespace Standard {
PROTOBUF_CONSTEXPR CameraState::CameraState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.isrecording_)*/false
  , /*decltype(_impl_.isshootingsinglephoto_)*/false
  , /*decltype(_impl_.isinserted_)*/false
  , /*decltype(_impl_.isinitializing_)*/false
  , /*decltype(_impl_.haserror_)*/false
  , /*decltype(_impl_.isverified_)*/false
  , /*decltype(_impl_.isfull_)*/false
  , /*decltype(_impl_.isformatted_)*/false
  , /*decltype(_impl_.isformatting_)*/false
  , /*decltype(_impl_.isinvalidformat_)*/false
  , /*decltype(_impl_.isreadonly_)*/false
  , /*decltype(_impl_.totalspaceinmb_)*/0u
  , /*decltype(_impl_.remainingspaceinmb_)*/0u
  , /*decltype(_impl_.availablecapturecount_)*/0u
  , /*decltype(_impl_.availablerecordingtimeinseconds_)*/0u
  , /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_.mode_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CameraStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CameraStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CameraStateDefaultTypeInternal() {}
  union {
    CameraState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CameraStateDefaultTypeInternal _CameraState_default_instance_;
}  // namespace Standard
}  // namespace DJIFRProto
static ::_pb::Metadata file_level_metadata_FRCameraStateProto_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_FRCameraStateProto_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_FRCameraStateProto_2eproto = nullptr;

const uint32_t TableStruct_FRCameraStateProto_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::CameraState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::CameraState, _impl_.isrecording_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::CameraState, _impl_.isshootingsinglephoto_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::CameraState, _impl_.isinserted_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::CameraState, _impl_.isinitializing_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::CameraState, _impl_.haserror_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::CameraState, _impl_.isverified_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::CameraState, _impl_.isfull_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::CameraState, _impl_.isformatted_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::CameraState, _impl_.isformatting_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::CameraState, _impl_.isinvalidformat_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::CameraState, _impl_.isreadonly_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::CameraState, _impl_.totalspaceinmb_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::CameraState, _impl_.remainingspaceinmb_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::CameraState, _impl_.availablecapturecount_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::CameraState, _impl_.availablerecordingtimeinseconds_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::CameraState, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::CameraState, _impl_.mode_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::DJIFRProto::Standard::CameraState)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::DJIFRProto::Standard::_CameraState_default_instance_._instance,
};

const char descriptor_table_protodef_FRCameraStateProto_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030FRCameraStateProto.proto\022\023DJIFRProto.S"
  "tandard\"\256\004\n\013CameraState\022\023\n\013isRecording\030\001"
  " \001(\010\022\035\n\025isShootingSinglePhoto\030\002 \001(\010\022\022\n\ni"
  "sInserted\030\003 \001(\010\022\026\n\016isInitializing\030\004 \001(\010\022"
  "\020\n\010hasError\030\005 \001(\010\022\022\n\nisVerified\030\006 \001(\010\022\016\n"
  "\006isFull\030\007 \001(\010\022\023\n\013isFormatted\030\010 \001(\010\022\024\n\014is"
  "Formatting\030\t \001(\010\022\027\n\017isInvalidFormat\030\n \001("
  "\010\022\022\n\nisReadOnly\030\013 \001(\010\022\026\n\016totalSpaceInMB\030"
  "\014 \001(\r\022\032\n\022remainingSpaceInMB\030\r \001(\r\022\035\n\025ava"
  "ilableCaptureCount\030\016 \001(\r\022\'\n\037availableRec"
  "ordingTimeInSeconds\030\017 \001(\r\022\r\n\005index\030\020 \001(\005"
  "\0229\n\004mode\030\021 \001(\0162+.DJIFRProto.Standard.Cam"
  "eraState.CameraMode\"k\n\nCameraMode\022\016\n\nSho"
  "otPhoto\020\000\022\017\n\013RecordVideo\020\001\022\014\n\010Playback\020\002"
  "\022\021\n\rMediaDownload\020\003\022\r\n\tBroadcast\020\004\022\014\n\007Un"
  "known\020\377\001B\r\242\002\nDJIFRProtob\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_FRCameraStateProto_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_FRCameraStateProto_2eproto = {
    false, false, 631, descriptor_table_protodef_FRCameraStateProto_2eproto,
    "FRCameraStateProto.proto",
    &descriptor_table_FRCameraStateProto_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_FRCameraStateProto_2eproto::offsets,
    file_level_metadata_FRCameraStateProto_2eproto, file_level_enum_descriptors_FRCameraStateProto_2eproto,
    file_level_service_descriptors_FRCameraStateProto_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_FRCameraStateProto_2eproto_getter() {
  return &descriptor_table_FRCameraStateProto_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_FRCameraStateProto_2eproto(&descriptor_table_FRCameraStateProto_2eproto);
namespace DJIFRProto {
namespace Standard {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraState_CameraMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_FRCameraStateProto_2eproto);
  return file_level_enum_descriptors_FRCameraStateProto_2eproto[0];
}
bool CameraState_CameraMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 255:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CameraState_CameraMode CameraState::ShootPhoto;
constexpr CameraState_CameraMode CameraState::RecordVideo;
constexpr CameraState_CameraMode CameraState::Playback;
constexpr CameraState_CameraMode CameraState::MediaDownload;
constexpr CameraState_CameraMode CameraState::Broadcast;
constexpr CameraState_CameraMode CameraState::Unknown;
constexpr CameraState_CameraMode CameraState::CameraMode_MIN;
constexpr CameraState_CameraMode CameraState::CameraMode_MAX;
constexpr int CameraState::CameraMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class CameraState::_Internal {
 public:
};

CameraState::CameraState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DJIFRProto.Standard.CameraState)
}
CameraState::CameraState(const CameraState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CameraState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.isrecording_){}
    , decltype(_impl_.isshootingsinglephoto_){}
    , decltype(_impl_.isinserted_){}
    , decltype(_impl_.isinitializing_){}
    , decltype(_impl_.haserror_){}
    , decltype(_impl_.isverified_){}
    , decltype(_impl_.isfull_){}
    , decltype(_impl_.isformatted_){}
    , decltype(_impl_.isformatting_){}
    , decltype(_impl_.isinvalidformat_){}
    , decltype(_impl_.isreadonly_){}
    , decltype(_impl_.totalspaceinmb_){}
    , decltype(_impl_.remainingspaceinmb_){}
    , decltype(_impl_.availablecapturecount_){}
    , decltype(_impl_.availablerecordingtimeinseconds_){}
    , decltype(_impl_.index_){}
    , decltype(_impl_.mode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.isrecording_, &from._impl_.isrecording_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mode_) -
    reinterpret_cast<char*>(&_impl_.isrecording_)) + sizeof(_impl_.mode_));
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.CameraState)
}

inline void CameraState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.isrecording_){false}
    , decltype(_impl_.isshootingsinglephoto_){false}
    , decltype(_impl_.isinserted_){false}
    , decltype(_impl_.isinitializing_){false}
    , decltype(_impl_.haserror_){false}
    , decltype(_impl_.isverified_){false}
    , decltype(_impl_.isfull_){false}
    , decltype(_impl_.isformatted_){false}
    , decltype(_impl_.isformatting_){false}
    , decltype(_impl_.isinvalidformat_){false}
    , decltype(_impl_.isreadonly_){false}
    , decltype(_impl_.totalspaceinmb_){0u}
    , decltype(_impl_.remainingspaceinmb_){0u}
    , decltype(_impl_.availablecapturecount_){0u}
    , decltype(_impl_.availablerecordingtimeinseconds_){0u}
    , decltype(_impl_.index_){0}
    , decltype(_impl_.mode_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CameraState::~CameraState() {
  // @@protoc_insertion_point(destructor:DJIFRProto.Standard.CameraState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CameraState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CameraState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CameraState::Clear() {
// @@protoc_insertion_point(message_clear_start:DJIFRProto.Standard.CameraState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.isrecording_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.mode_) -
      reinterpret_cast<char*>(&_impl_.isrecording_)) + sizeof(_impl_.mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool isRecording = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.isrecording_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isShootingSinglePhoto = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.isshootingsinglephoto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isInserted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.isinserted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isInitializing = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.isinitializing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool hasError = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.haserror_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isVerified = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.isverified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isFull = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.isfull_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isFormatted = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.isformatted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isFormatting = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.isformatting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isInvalidFormat = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.isinvalidformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isReadOnly = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.isreadonly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 totalSpaceInMB = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.totalspaceinmb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 remainingSpaceInMB = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.remainingspaceinmb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 availableCaptureCount = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.availablecapturecount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 availableRecordingTimeInSeconds = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.availablerecordingtimeinseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 index = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DJIFRProto.Standard.CameraState.CameraMode mode = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::DJIFRProto::Standard::CameraState_CameraMode>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CameraState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DJIFRProto.Standard.CameraState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isRecording = 1;
  if (this->_internal_isrecording() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_isrecording(), target);
  }

  // bool isShootingSinglePhoto = 2;
  if (this->_internal_isshootingsinglephoto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_isshootingsinglephoto(), target);
  }

  // bool isInserted = 3;
  if (this->_internal_isinserted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_isinserted(), target);
  }

  // bool isInitializing = 4;
  if (this->_internal_isinitializing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_isinitializing(), target);
  }

  // bool hasError = 5;
  if (this->_internal_haserror() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_haserror(), target);
  }

  // bool isVerified = 6;
  if (this->_internal_isverified() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_isverified(), target);
  }

  // bool isFull = 7;
  if (this->_internal_isfull() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_isfull(), target);
  }

  // bool isFormatted = 8;
  if (this->_internal_isformatted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_isformatted(), target);
  }

  // bool isFormatting = 9;
  if (this->_internal_isformatting() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_isformatting(), target);
  }

  // bool isInvalidFormat = 10;
  if (this->_internal_isinvalidformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_isinvalidformat(), target);
  }

  // bool isReadOnly = 11;
  if (this->_internal_isreadonly() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_isreadonly(), target);
  }

  // uint32 totalSpaceInMB = 12;
  if (this->_internal_totalspaceinmb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_totalspaceinmb(), target);
  }

  // uint32 remainingSpaceInMB = 13;
  if (this->_internal_remainingspaceinmb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_remainingspaceinmb(), target);
  }

  // uint32 availableCaptureCount = 14;
  if (this->_internal_availablecapturecount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_availablecapturecount(), target);
  }

  // uint32 availableRecordingTimeInSeconds = 15;
  if (this->_internal_availablerecordingtimeinseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_availablerecordingtimeinseconds(), target);
  }

  // int32 index = 16;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_index(), target);
  }

  // .DJIFRProto.Standard.CameraState.CameraMode mode = 17;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      17, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DJIFRProto.Standard.CameraState)
  return target;
}

size_t CameraState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DJIFRProto.Standard.CameraState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool isRecording = 1;
  if (this->_internal_isrecording() != 0) {
    total_size += 1 + 1;
  }

  // bool isShootingSinglePhoto = 2;
  if (this->_internal_isshootingsinglephoto() != 0) {
    total_size += 1 + 1;
  }

  // bool isInserted = 3;
  if (this->_internal_isinserted() != 0) {
    total_size += 1 + 1;
  }

  // bool isInitializing = 4;
  if (this->_internal_isinitializing() != 0) {
    total_size += 1 + 1;
  }

  // bool hasError = 5;
  if (this->_internal_haserror() != 0) {
    total_size += 1 + 1;
  }

  // bool isVerified = 6;
  if (this->_internal_isverified() != 0) {
    total_size += 1 + 1;
  }

  // bool isFull = 7;
  if (this->_internal_isfull() != 0) {
    total_size += 1 + 1;
  }

  // bool isFormatted = 8;
  if (this->_internal_isformatted() != 0) {
    total_size += 1 + 1;
  }

  // bool isFormatting = 9;
  if (this->_internal_isformatting() != 0) {
    total_size += 1 + 1;
  }

  // bool isInvalidFormat = 10;
  if (this->_internal_isinvalidformat() != 0) {
    total_size += 1 + 1;
  }

  // bool isReadOnly = 11;
  if (this->_internal_isreadonly() != 0) {
    total_size += 1 + 1;
  }

  // uint32 totalSpaceInMB = 12;
  if (this->_internal_totalspaceinmb() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_totalspaceinmb());
  }

  // uint32 remainingSpaceInMB = 13;
  if (this->_internal_remainingspaceinmb() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_remainingspaceinmb());
  }

  // uint32 availableCaptureCount = 14;
  if (this->_internal_availablecapturecount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_availablecapturecount());
  }

  // uint32 availableRecordingTimeInSeconds = 15;
  if (this->_internal_availablerecordingtimeinseconds() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_availablerecordingtimeinseconds());
  }

  // int32 index = 16;
  if (this->_internal_index() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  // .DJIFRProto.Standard.CameraState.CameraMode mode = 17;
  if (this->_internal_mode() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CameraState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CameraState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CameraState::GetClassData() const { return &_class_data_; }


void CameraState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CameraState*>(&to_msg);
  auto& from = static_cast<const CameraState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DJIFRProto.Standard.CameraState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_isrecording() != 0) {
    _this->_internal_set_isrecording(from._internal_isrecording());
  }
  if (from._internal_isshootingsinglephoto() != 0) {
    _this->_internal_set_isshootingsinglephoto(from._internal_isshootingsinglephoto());
  }
  if (from._internal_isinserted() != 0) {
    _this->_internal_set_isinserted(from._internal_isinserted());
  }
  if (from._internal_isinitializing() != 0) {
    _this->_internal_set_isinitializing(from._internal_isinitializing());
  }
  if (from._internal_haserror() != 0) {
    _this->_internal_set_haserror(from._internal_haserror());
  }
  if (from._internal_isverified() != 0) {
    _this->_internal_set_isverified(from._internal_isverified());
  }
  if (from._internal_isfull() != 0) {
    _this->_internal_set_isfull(from._internal_isfull());
  }
  if (from._internal_isformatted() != 0) {
    _this->_internal_set_isformatted(from._internal_isformatted());
  }
  if (from._internal_isformatting() != 0) {
    _this->_internal_set_isformatting(from._internal_isformatting());
  }
  if (from._internal_isinvalidformat() != 0) {
    _this->_internal_set_isinvalidformat(from._internal_isinvalidformat());
  }
  if (from._internal_isreadonly() != 0) {
    _this->_internal_set_isreadonly(from._internal_isreadonly());
  }
  if (from._internal_totalspaceinmb() != 0) {
    _this->_internal_set_totalspaceinmb(from._internal_totalspaceinmb());
  }
  if (from._internal_remainingspaceinmb() != 0) {
    _this->_internal_set_remainingspaceinmb(from._internal_remainingspaceinmb());
  }
  if (from._internal_availablecapturecount() != 0) {
    _this->_internal_set_availablecapturecount(from._internal_availablecapturecount());
  }
  if (from._internal_availablerecordingtimeinseconds() != 0) {
    _this->_internal_set_availablerecordingtimeinseconds(from._internal_availablerecordingtimeinseconds());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_mode() != 0) {
    _this->_internal_set_mode(from._internal_mode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CameraState::CopyFrom(const CameraState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DJIFRProto.Standard.CameraState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraState::IsInitialized() const {
  return true;
}

void CameraState::InternalSwap(CameraState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CameraState, _impl_.mode_)
      + sizeof(CameraState::_impl_.mode_)
      - PROTOBUF_FIELD_OFFSET(CameraState, _impl_.isrecording_)>(
          reinterpret_cast<char*>(&_impl_.isrecording_),
          reinterpret_cast<char*>(&other->_impl_.isrecording_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FRCameraStateProto_2eproto_getter, &descriptor_table_FRCameraStateProto_2eproto_once,
      file_level_metadata_FRCameraStateProto_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Standard
}  // namespace DJIFRProto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DJIFRProto::Standard::CameraState*
Arena::CreateMaybeMessage< ::DJIFRProto::Standard::CameraState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DJIFRProto::Standard::CameraState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
