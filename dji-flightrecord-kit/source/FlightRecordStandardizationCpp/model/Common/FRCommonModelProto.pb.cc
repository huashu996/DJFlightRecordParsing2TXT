// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FRCommonModelProto.proto

#include "FRCommonModelProto.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace DJIFRProto {
namespace Standard {
PROTOBUF_CONSTEXPR LocationCoordinate2D::LocationCoordinate2D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.latitude_)*/0
  , /*decltype(_impl_.longitude_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LocationCoordinate2DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocationCoordinate2DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocationCoordinate2DDefaultTypeInternal() {}
  union {
    LocationCoordinate2D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocationCoordinate2DDefaultTypeInternal _LocationCoordinate2D_default_instance_;
PROTOBUF_CONSTEXPR Velocity::Velocity(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.velocityx_)*/0
  , /*decltype(_impl_.velocityy_)*/0
  , /*decltype(_impl_.velocityz_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VelocityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VelocityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VelocityDefaultTypeInternal() {}
  union {
    Velocity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VelocityDefaultTypeInternal _Velocity_default_instance_;
PROTOBUF_CONSTEXPR Attitude::Attitude(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pitch_)*/0
  , /*decltype(_impl_.roll_)*/0
  , /*decltype(_impl_.yaw_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AttitudeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttitudeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttitudeDefaultTypeInternal() {}
  union {
    Attitude _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttitudeDefaultTypeInternal _Attitude_default_instance_;
PROTOBUF_CONSTEXPR GPSSignal::GPSSignal(
    ::_pbi::ConstantInitialized) {}
struct GPSSignalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GPSSignalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GPSSignalDefaultTypeInternal() {}
  union {
    GPSSignal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GPSSignalDefaultTypeInternal _GPSSignal_default_instance_;
PROTOBUF_CONSTEXPR SDK::SDK(
    ::_pbi::ConstantInitialized) {}
struct SDKDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SDKDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SDKDefaultTypeInternal() {}
  union {
    SDK _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SDKDefaultTypeInternal _SDK_default_instance_;
}  // namespace Standard
}  // namespace DJIFRProto
static ::_pb::Metadata file_level_metadata_FRCommonModelProto_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_FRCommonModelProto_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_FRCommonModelProto_2eproto = nullptr;

const uint32_t TableStruct_FRCommonModelProto_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::LocationCoordinate2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::LocationCoordinate2D, _impl_.latitude_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::LocationCoordinate2D, _impl_.longitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::Velocity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::Velocity, _impl_.velocityx_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::Velocity, _impl_.velocityy_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::Velocity, _impl_.velocityz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::Attitude, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::Attitude, _impl_.pitch_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::Attitude, _impl_.roll_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::Attitude, _impl_.yaw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::GPSSignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::SDK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::DJIFRProto::Standard::LocationCoordinate2D)},
  { 8, -1, -1, sizeof(::DJIFRProto::Standard::Velocity)},
  { 17, -1, -1, sizeof(::DJIFRProto::Standard::Attitude)},
  { 26, -1, -1, sizeof(::DJIFRProto::Standard::GPSSignal)},
  { 32, -1, -1, sizeof(::DJIFRProto::Standard::SDK)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::DJIFRProto::Standard::_LocationCoordinate2D_default_instance_._instance,
  &::DJIFRProto::Standard::_Velocity_default_instance_._instance,
  &::DJIFRProto::Standard::_Attitude_default_instance_._instance,
  &::DJIFRProto::Standard::_GPSSignal_default_instance_._instance,
  &::DJIFRProto::Standard::_SDK_default_instance_._instance,
};

const char descriptor_table_protodef_FRCommonModelProto_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030FRCommonModelProto.proto\022\023DJIFRProto.S"
  "tandard\";\n\024LocationCoordinate2D\022\020\n\010latit"
  "ude\030\001 \001(\001\022\021\n\tlongitude\030\002 \001(\001\"C\n\010Velocity"
  "\022\021\n\tvelocityX\030\001 \001(\002\022\021\n\tvelocityY\030\002 \001(\002\022\021"
  "\n\tvelocityZ\030\003 \001(\002\"4\n\010Attitude\022\r\n\005pitch\030\001"
  " \001(\001\022\014\n\004roll\030\002 \001(\001\022\013\n\003yaw\030\003 \001(\001\"i\n\tGPSSi"
  "gnal\"\\\n\005Level\022\n\n\006Level0\020\000\022\n\n\006Level1\020\001\022\n\n"
  "\006Level2\020\002\022\n\n\006Level3\020\003\022\n\n\006Level4\020\004\022\n\n\006Lev"
  "el5\020\005\022\013\n\007Unknown\020\006\"\240\005\n\003SDK\"\230\005\n\013ProductTy"
  "pe\022\010\n\004None\020\000\022\024\n\020ZUYdiVOVXfGCLDcI\020\001\022\024\n\020Ph"
  "antom3Standard\020\002\022\024\n\020jwtAbyahuARrhuhr\020\003\022\024"
  "\n\020kshQeTGrEeTmtpoe\020\004\022\014\n\010Phantom4\020\007\022\024\n\020qv"
  "MmdCGxrtrJWvxx\020\010\022\024\n\020CdogAypKribEXKfS\020\t\022\016"
  "\n\nMatrice600\020\013\022\016\n\nPhantom34K\020\014\022\014\n\010MavicP"
  "ro\020\r\022\014\n\010Inspire2\020\021\022\017\n\013Phantom4Pro\020\030\022\t\n\005S"
  "park\020\032\022\021\n\rMatrice600Pro\020\033\022\024\n\020Phantom4Adv"
  "anced\020\034\022\016\n\nPhantom3SE\020\035\022\016\n\nMatrice200\020\037\022"
  "\016\n\nMatrice210\020!\022\021\n\rMatrice210RTK\020\"\022\014\n\010Ma"
  "vicAir\020&\022\n\n\006Mavic2\020*\022\021\n\rPhantom4ProV2\020,\022"
  "\017\n\013Phantom4RTK\020.\022\023\n\017P4Multispectral\0209\022\024\n"
  "\020Mavic2Enterprise\020:\022\r\n\tMavicMini\020;\022\020\n\014Ma"
  "trice200V2\020<\022\020\n\014Matrice210V2\020=\022\023\n\017Matric"
  "e210RTKV2\020>\022\r\n\tMavicAir2\020C\022\021\n\rMatrice300"
  "RTK\020F\022\n\n\006DJIFPV\020I\022\016\n\nMavicAir2S\020K\022\016\n\nMav"
  "icMini2\020L\022\n\n\006Mavic3\020M\022\017\n\013MavicMiniSE\020`\022\r"
  "\n\tMatrice30\020tB\r\242\002\nDJIFRProtob\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_FRCommonModelProto_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_FRCommonModelProto_2eproto = {
    false, false, 1036, descriptor_table_protodef_FRCommonModelProto_2eproto,
    "FRCommonModelProto.proto",
    &descriptor_table_FRCommonModelProto_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_FRCommonModelProto_2eproto::offsets,
    file_level_metadata_FRCommonModelProto_2eproto, file_level_enum_descriptors_FRCommonModelProto_2eproto,
    file_level_service_descriptors_FRCommonModelProto_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_FRCommonModelProto_2eproto_getter() {
  return &descriptor_table_FRCommonModelProto_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_FRCommonModelProto_2eproto(&descriptor_table_FRCommonModelProto_2eproto);
namespace DJIFRProto {
namespace Standard {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GPSSignal_Level_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_FRCommonModelProto_2eproto);
  return file_level_enum_descriptors_FRCommonModelProto_2eproto[0];
}
bool GPSSignal_Level_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr GPSSignal_Level GPSSignal::Level0;
constexpr GPSSignal_Level GPSSignal::Level1;
constexpr GPSSignal_Level GPSSignal::Level2;
constexpr GPSSignal_Level GPSSignal::Level3;
constexpr GPSSignal_Level GPSSignal::Level4;
constexpr GPSSignal_Level GPSSignal::Level5;
constexpr GPSSignal_Level GPSSignal::Unknown;
constexpr GPSSignal_Level GPSSignal::Level_MIN;
constexpr GPSSignal_Level GPSSignal::Level_MAX;
constexpr int GPSSignal::Level_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SDK_ProductType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_FRCommonModelProto_2eproto);
  return file_level_enum_descriptors_FRCommonModelProto_2eproto[1];
}
bool SDK_ProductType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 7:
    case 8:
    case 9:
    case 11:
    case 12:
    case 13:
    case 17:
    case 24:
    case 26:
    case 27:
    case 28:
    case 29:
    case 31:
    case 33:
    case 34:
    case 38:
    case 42:
    case 44:
    case 46:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 67:
    case 70:
    case 73:
    case 75:
    case 76:
    case 77:
    case 96:
    case 116:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SDK_ProductType SDK::None;
constexpr SDK_ProductType SDK::ZUYdiVOVXfGCLDcI;
constexpr SDK_ProductType SDK::Phantom3Standard;
constexpr SDK_ProductType SDK::jwtAbyahuARrhuhr;
constexpr SDK_ProductType SDK::kshQeTGrEeTmtpoe;
constexpr SDK_ProductType SDK::Phantom4;
constexpr SDK_ProductType SDK::qvMmdCGxrtrJWvxx;
constexpr SDK_ProductType SDK::CdogAypKribEXKfS;
constexpr SDK_ProductType SDK::Matrice600;
constexpr SDK_ProductType SDK::Phantom34K;
constexpr SDK_ProductType SDK::MavicPro;
constexpr SDK_ProductType SDK::Inspire2;
constexpr SDK_ProductType SDK::Phantom4Pro;
constexpr SDK_ProductType SDK::Spark;
constexpr SDK_ProductType SDK::Matrice600Pro;
constexpr SDK_ProductType SDK::Phantom4Advanced;
constexpr SDK_ProductType SDK::Phantom3SE;
constexpr SDK_ProductType SDK::Matrice200;
constexpr SDK_ProductType SDK::Matrice210;
constexpr SDK_ProductType SDK::Matrice210RTK;
constexpr SDK_ProductType SDK::MavicAir;
constexpr SDK_ProductType SDK::Mavic2;
constexpr SDK_ProductType SDK::Phantom4ProV2;
constexpr SDK_ProductType SDK::Phantom4RTK;
constexpr SDK_ProductType SDK::P4Multispectral;
constexpr SDK_ProductType SDK::Mavic2Enterprise;
constexpr SDK_ProductType SDK::MavicMini;
constexpr SDK_ProductType SDK::Matrice200V2;
constexpr SDK_ProductType SDK::Matrice210V2;
constexpr SDK_ProductType SDK::Matrice210RTKV2;
constexpr SDK_ProductType SDK::MavicAir2;
constexpr SDK_ProductType SDK::Matrice300RTK;
constexpr SDK_ProductType SDK::DJIFPV;
constexpr SDK_ProductType SDK::MavicAir2S;
constexpr SDK_ProductType SDK::MavicMini2;
constexpr SDK_ProductType SDK::Mavic3;
constexpr SDK_ProductType SDK::MavicMiniSE;
constexpr SDK_ProductType SDK::Matrice30;
constexpr SDK_ProductType SDK::ProductType_MIN;
constexpr SDK_ProductType SDK::ProductType_MAX;
constexpr int SDK::ProductType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class LocationCoordinate2D::_Internal {
 public:
};

LocationCoordinate2D::LocationCoordinate2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DJIFRProto.Standard.LocationCoordinate2D)
}
LocationCoordinate2D::LocationCoordinate2D(const LocationCoordinate2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LocationCoordinate2D* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.latitude_){}
    , decltype(_impl_.longitude_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.latitude_, &from._impl_.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.longitude_) -
    reinterpret_cast<char*>(&_impl_.latitude_)) + sizeof(_impl_.longitude_));
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.LocationCoordinate2D)
}

inline void LocationCoordinate2D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.latitude_){0}
    , decltype(_impl_.longitude_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LocationCoordinate2D::~LocationCoordinate2D() {
  // @@protoc_insertion_point(destructor:DJIFRProto.Standard.LocationCoordinate2D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocationCoordinate2D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LocationCoordinate2D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocationCoordinate2D::Clear() {
// @@protoc_insertion_point(message_clear_start:DJIFRProto.Standard.LocationCoordinate2D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.longitude_) -
      reinterpret_cast<char*>(&_impl_.latitude_)) + sizeof(_impl_.longitude_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocationCoordinate2D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double latitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double longitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocationCoordinate2D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DJIFRProto.Standard.LocationCoordinate2D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double latitude = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_latitude(), target);
  }

  // double longitude = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_longitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DJIFRProto.Standard.LocationCoordinate2D)
  return target;
}

size_t LocationCoordinate2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DJIFRProto.Standard.LocationCoordinate2D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double latitude = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    total_size += 1 + 8;
  }

  // double longitude = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocationCoordinate2D::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LocationCoordinate2D::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocationCoordinate2D::GetClassData() const { return &_class_data_; }


void LocationCoordinate2D::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LocationCoordinate2D*>(&to_msg);
  auto& from = static_cast<const LocationCoordinate2D&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DJIFRProto.Standard.LocationCoordinate2D)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = from._internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    _this->_internal_set_latitude(from._internal_latitude());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = from._internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    _this->_internal_set_longitude(from._internal_longitude());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocationCoordinate2D::CopyFrom(const LocationCoordinate2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DJIFRProto.Standard.LocationCoordinate2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationCoordinate2D::IsInitialized() const {
  return true;
}

void LocationCoordinate2D::InternalSwap(LocationCoordinate2D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocationCoordinate2D, _impl_.longitude_)
      + sizeof(LocationCoordinate2D::_impl_.longitude_)
      - PROTOBUF_FIELD_OFFSET(LocationCoordinate2D, _impl_.latitude_)>(
          reinterpret_cast<char*>(&_impl_.latitude_),
          reinterpret_cast<char*>(&other->_impl_.latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocationCoordinate2D::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FRCommonModelProto_2eproto_getter, &descriptor_table_FRCommonModelProto_2eproto_once,
      file_level_metadata_FRCommonModelProto_2eproto[0]);
}

// ===================================================================

class Velocity::_Internal {
 public:
};

Velocity::Velocity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DJIFRProto.Standard.Velocity)
}
Velocity::Velocity(const Velocity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Velocity* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.velocityx_){}
    , decltype(_impl_.velocityy_){}
    , decltype(_impl_.velocityz_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.velocityx_, &from._impl_.velocityx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.velocityz_) -
    reinterpret_cast<char*>(&_impl_.velocityx_)) + sizeof(_impl_.velocityz_));
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.Velocity)
}

inline void Velocity::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.velocityx_){0}
    , decltype(_impl_.velocityy_){0}
    , decltype(_impl_.velocityz_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Velocity::~Velocity() {
  // @@protoc_insertion_point(destructor:DJIFRProto.Standard.Velocity)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Velocity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Velocity::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Velocity::Clear() {
// @@protoc_insertion_point(message_clear_start:DJIFRProto.Standard.Velocity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.velocityx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.velocityz_) -
      reinterpret_cast<char*>(&_impl_.velocityx_)) + sizeof(_impl_.velocityz_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Velocity::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float velocityX = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.velocityx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float velocityY = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.velocityy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float velocityZ = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.velocityz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Velocity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DJIFRProto.Standard.Velocity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float velocityX = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocityx = this->_internal_velocityx();
  uint32_t raw_velocityx;
  memcpy(&raw_velocityx, &tmp_velocityx, sizeof(tmp_velocityx));
  if (raw_velocityx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_velocityx(), target);
  }

  // float velocityY = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocityy = this->_internal_velocityy();
  uint32_t raw_velocityy;
  memcpy(&raw_velocityy, &tmp_velocityy, sizeof(tmp_velocityy));
  if (raw_velocityy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_velocityy(), target);
  }

  // float velocityZ = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocityz = this->_internal_velocityz();
  uint32_t raw_velocityz;
  memcpy(&raw_velocityz, &tmp_velocityz, sizeof(tmp_velocityz));
  if (raw_velocityz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_velocityz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DJIFRProto.Standard.Velocity)
  return target;
}

size_t Velocity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DJIFRProto.Standard.Velocity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float velocityX = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocityx = this->_internal_velocityx();
  uint32_t raw_velocityx;
  memcpy(&raw_velocityx, &tmp_velocityx, sizeof(tmp_velocityx));
  if (raw_velocityx != 0) {
    total_size += 1 + 4;
  }

  // float velocityY = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocityy = this->_internal_velocityy();
  uint32_t raw_velocityy;
  memcpy(&raw_velocityy, &tmp_velocityy, sizeof(tmp_velocityy));
  if (raw_velocityy != 0) {
    total_size += 1 + 4;
  }

  // float velocityZ = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocityz = this->_internal_velocityz();
  uint32_t raw_velocityz;
  memcpy(&raw_velocityz, &tmp_velocityz, sizeof(tmp_velocityz));
  if (raw_velocityz != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Velocity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Velocity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Velocity::GetClassData() const { return &_class_data_; }


void Velocity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Velocity*>(&to_msg);
  auto& from = static_cast<const Velocity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DJIFRProto.Standard.Velocity)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocityx = from._internal_velocityx();
  uint32_t raw_velocityx;
  memcpy(&raw_velocityx, &tmp_velocityx, sizeof(tmp_velocityx));
  if (raw_velocityx != 0) {
    _this->_internal_set_velocityx(from._internal_velocityx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocityy = from._internal_velocityy();
  uint32_t raw_velocityy;
  memcpy(&raw_velocityy, &tmp_velocityy, sizeof(tmp_velocityy));
  if (raw_velocityy != 0) {
    _this->_internal_set_velocityy(from._internal_velocityy());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocityz = from._internal_velocityz();
  uint32_t raw_velocityz;
  memcpy(&raw_velocityz, &tmp_velocityz, sizeof(tmp_velocityz));
  if (raw_velocityz != 0) {
    _this->_internal_set_velocityz(from._internal_velocityz());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Velocity::CopyFrom(const Velocity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DJIFRProto.Standard.Velocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Velocity::IsInitialized() const {
  return true;
}

void Velocity::InternalSwap(Velocity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Velocity, _impl_.velocityz_)
      + sizeof(Velocity::_impl_.velocityz_)
      - PROTOBUF_FIELD_OFFSET(Velocity, _impl_.velocityx_)>(
          reinterpret_cast<char*>(&_impl_.velocityx_),
          reinterpret_cast<char*>(&other->_impl_.velocityx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Velocity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FRCommonModelProto_2eproto_getter, &descriptor_table_FRCommonModelProto_2eproto_once,
      file_level_metadata_FRCommonModelProto_2eproto[1]);
}

// ===================================================================

class Attitude::_Internal {
 public:
};

Attitude::Attitude(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DJIFRProto.Standard.Attitude)
}
Attitude::Attitude(const Attitude& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Attitude* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pitch_){}
    , decltype(_impl_.roll_){}
    , decltype(_impl_.yaw_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pitch_, &from._impl_.pitch_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.yaw_) -
    reinterpret_cast<char*>(&_impl_.pitch_)) + sizeof(_impl_.yaw_));
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.Attitude)
}

inline void Attitude::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pitch_){0}
    , decltype(_impl_.roll_){0}
    , decltype(_impl_.yaw_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Attitude::~Attitude() {
  // @@protoc_insertion_point(destructor:DJIFRProto.Standard.Attitude)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Attitude::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Attitude::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Attitude::Clear() {
// @@protoc_insertion_point(message_clear_start:DJIFRProto.Standard.Attitude)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pitch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.yaw_) -
      reinterpret_cast<char*>(&_impl_.pitch_)) + sizeof(_impl_.yaw_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Attitude::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double pitch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double roll = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double yaw = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Attitude::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DJIFRProto.Standard.Attitude)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double pitch = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pitch = this->_internal_pitch();
  uint64_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_pitch(), target);
  }

  // double roll = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_roll = this->_internal_roll();
  uint64_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_roll(), target);
  }

  // double yaw = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_yaw = this->_internal_yaw();
  uint64_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_yaw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DJIFRProto.Standard.Attitude)
  return target;
}

size_t Attitude::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DJIFRProto.Standard.Attitude)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double pitch = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pitch = this->_internal_pitch();
  uint64_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    total_size += 1 + 8;
  }

  // double roll = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_roll = this->_internal_roll();
  uint64_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    total_size += 1 + 8;
  }

  // double yaw = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_yaw = this->_internal_yaw();
  uint64_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Attitude::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Attitude::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Attitude::GetClassData() const { return &_class_data_; }


void Attitude::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Attitude*>(&to_msg);
  auto& from = static_cast<const Attitude&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DJIFRProto.Standard.Attitude)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pitch = from._internal_pitch();
  uint64_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    _this->_internal_set_pitch(from._internal_pitch());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_roll = from._internal_roll();
  uint64_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    _this->_internal_set_roll(from._internal_roll());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_yaw = from._internal_yaw();
  uint64_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _this->_internal_set_yaw(from._internal_yaw());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Attitude::CopyFrom(const Attitude& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DJIFRProto.Standard.Attitude)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attitude::IsInitialized() const {
  return true;
}

void Attitude::InternalSwap(Attitude* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Attitude, _impl_.yaw_)
      + sizeof(Attitude::_impl_.yaw_)
      - PROTOBUF_FIELD_OFFSET(Attitude, _impl_.pitch_)>(
          reinterpret_cast<char*>(&_impl_.pitch_),
          reinterpret_cast<char*>(&other->_impl_.pitch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Attitude::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FRCommonModelProto_2eproto_getter, &descriptor_table_FRCommonModelProto_2eproto_once,
      file_level_metadata_FRCommonModelProto_2eproto[2]);
}

// ===================================================================

class GPSSignal::_Internal {
 public:
};

GPSSignal::GPSSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:DJIFRProto.Standard.GPSSignal)
}
GPSSignal::GPSSignal(const GPSSignal& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  GPSSignal* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.GPSSignal)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GPSSignal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GPSSignal::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GPSSignal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FRCommonModelProto_2eproto_getter, &descriptor_table_FRCommonModelProto_2eproto_once,
      file_level_metadata_FRCommonModelProto_2eproto[3]);
}

// ===================================================================

class SDK::_Internal {
 public:
};

SDK::SDK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:DJIFRProto.Standard.SDK)
}
SDK::SDK(const SDK& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  SDK* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.SDK)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SDK::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SDK::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SDK::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FRCommonModelProto_2eproto_getter, &descriptor_table_FRCommonModelProto_2eproto_once,
      file_level_metadata_FRCommonModelProto_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Standard
}  // namespace DJIFRProto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DJIFRProto::Standard::LocationCoordinate2D*
Arena::CreateMaybeMessage< ::DJIFRProto::Standard::LocationCoordinate2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DJIFRProto::Standard::LocationCoordinate2D >(arena);
}
template<> PROTOBUF_NOINLINE ::DJIFRProto::Standard::Velocity*
Arena::CreateMaybeMessage< ::DJIFRProto::Standard::Velocity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DJIFRProto::Standard::Velocity >(arena);
}
template<> PROTOBUF_NOINLINE ::DJIFRProto::Standard::Attitude*
Arena::CreateMaybeMessage< ::DJIFRProto::Standard::Attitude >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DJIFRProto::Standard::Attitude >(arena);
}
template<> PROTOBUF_NOINLINE ::DJIFRProto::Standard::GPSSignal*
Arena::CreateMaybeMessage< ::DJIFRProto::Standard::GPSSignal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DJIFRProto::Standard::GPSSignal >(arena);
}
template<> PROTOBUF_NOINLINE ::DJIFRProto::Standard::SDK*
Arena::CreateMaybeMessage< ::DJIFRProto::Standard::SDK >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DJIFRProto::Standard::SDK >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
