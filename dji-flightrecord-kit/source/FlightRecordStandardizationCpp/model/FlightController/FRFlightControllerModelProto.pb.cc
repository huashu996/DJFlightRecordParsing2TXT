// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FRFlightControllerModelProto.proto

#include "FRFlightControllerModelProto.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace DJIFRProto {
namespace Standard {
PROTOBUF_CONSTEXPR FlightWind::FlightWind(
    ::_pbi::ConstantInitialized) {}
struct FlightWindDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlightWindDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlightWindDefaultTypeInternal() {}
  union {
    FlightWind _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlightWindDefaultTypeInternal _FlightWind_default_instance_;
PROTOBUF_CONSTEXPR Connection::Connection(
    ::_pbi::ConstantInitialized) {}
struct ConnectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectionDefaultTypeInternal() {}
  union {
    Connection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectionDefaultTypeInternal _Connection_default_instance_;
PROTOBUF_CONSTEXPR SmartRTH::SmartRTH(
    ::_pbi::ConstantInitialized) {}
struct SmartRTHDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SmartRTHDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SmartRTHDefaultTypeInternal() {}
  union {
    SmartRTH _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SmartRTHDefaultTypeInternal _SmartRTH_default_instance_;
PROTOBUF_CONSTEXPR VirtualStickVerticalControl::VirtualStickVerticalControl(
    ::_pbi::ConstantInitialized) {}
struct VirtualStickVerticalControlDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VirtualStickVerticalControlDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VirtualStickVerticalControlDefaultTypeInternal() {}
  union {
    VirtualStickVerticalControl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VirtualStickVerticalControlDefaultTypeInternal _VirtualStickVerticalControl_default_instance_;
PROTOBUF_CONSTEXPR VirtualStickRollPitchControl::VirtualStickRollPitchControl(
    ::_pbi::ConstantInitialized) {}
struct VirtualStickRollPitchControlDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VirtualStickRollPitchControlDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VirtualStickRollPitchControlDefaultTypeInternal() {}
  union {
    VirtualStickRollPitchControl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VirtualStickRollPitchControlDefaultTypeInternal _VirtualStickRollPitchControl_default_instance_;
PROTOBUF_CONSTEXPR VirtualStickYawControl::VirtualStickYawControl(
    ::_pbi::ConstantInitialized) {}
struct VirtualStickYawControlDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VirtualStickYawControlDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VirtualStickYawControlDefaultTypeInternal() {}
  union {
    VirtualStickYawControl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VirtualStickYawControlDefaultTypeInternal _VirtualStickYawControl_default_instance_;
PROTOBUF_CONSTEXPR VirtualStickFlightCoordinate::VirtualStickFlightCoordinate(
    ::_pbi::ConstantInitialized) {}
struct VirtualStickFlightCoordinateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VirtualStickFlightCoordinateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VirtualStickFlightCoordinateDefaultTypeInternal() {}
  union {
    VirtualStickFlightCoordinate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VirtualStickFlightCoordinateDefaultTypeInternal _VirtualStickFlightCoordinate_default_instance_;
PROTOBUF_CONSTEXPR VirtualStickFlightControlData::VirtualStickFlightControlData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pitch_)*/0
  , /*decltype(_impl_.roll_)*/0
  , /*decltype(_impl_.yaw_)*/0
  , /*decltype(_impl_.verticalthrottle_)*/0
  , /*decltype(_impl_.verticalcontrolmode_)*/0
  , /*decltype(_impl_.rollpitchcontrolmode_)*/0
  , /*decltype(_impl_.yawcontrolmode_)*/0
  , /*decltype(_impl_.rollpitchcoordinatesystem_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VirtualStickFlightControlDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VirtualStickFlightControlDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VirtualStickFlightControlDataDefaultTypeInternal() {}
  union {
    VirtualStickFlightControlData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VirtualStickFlightControlDataDefaultTypeInternal _VirtualStickFlightControlData_default_instance_;
PROTOBUF_CONSTEXPR FlightControllerState::FlightControllerState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attitude_)*/nullptr
  , /*decltype(_impl_.homelocationcoordinate_)*/nullptr
  , /*decltype(_impl_.aircraftlocation_)*/nullptr
  , /*decltype(_impl_.virtualcontroldata_)*/nullptr
  , /*decltype(_impl_.velocity_)*/nullptr
  , /*decltype(_impl_.takeofflocationaltitude_)*/0
  , /*decltype(_impl_.altitude_)*/0
  , /*decltype(_impl_.flightmode_)*/0
  , /*decltype(_impl_.gpssignallevel_)*/0
  , /*decltype(_impl_.satellitecount_)*/0
  , /*decltype(_impl_.remainingflighttime_)*/0
  , /*decltype(_impl_.batterypercentageneededtolandfromcurrentheight_)*/0
  , /*decltype(_impl_.batterypercentageneededtogohome_)*/0
  , /*decltype(_impl_.smartrthstate_)*/0
  , /*decltype(_impl_.behavior_)*/0
  , /*decltype(_impl_.isfailsafeenabled_)*/false
  , /*decltype(_impl_.aremotorson_)*/false
  , /*decltype(_impl_.ishomelocationset_)*/false
  , /*decltype(_impl_.islandingconfirmationneeded_)*/false
  , /*decltype(_impl_.windwarning_)*/0
  , /*decltype(_impl_.countofflights_)*/0
  , /*decltype(_impl_.hasreachedmaxflightheight_)*/false
  , /*decltype(_impl_.hasreachedmaxflightradius_)*/false
  , /*decltype(_impl_.isflying_)*/false
  , /*decltype(_impl_.isgpsbeingused_)*/false
  , /*decltype(_impl_.flightlogindex_)*/0
  , /*decltype(_impl_.smartrthcountdown_)*/0
  , /*decltype(_impl_.flighttimeinseconds_)*/0
  , /*decltype(_impl_.cumulativeflightdistance_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FlightControllerStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlightControllerStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlightControllerStateDefaultTypeInternal() {}
  union {
    FlightControllerState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlightControllerStateDefaultTypeInternal _FlightControllerState_default_instance_;
}  // namespace Standard
}  // namespace DJIFRProto
static ::_pb::Metadata file_level_metadata_FRFlightControllerModelProto_2eproto[9];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_FRFlightControllerModelProto_2eproto[8];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_FRFlightControllerModelProto_2eproto = nullptr;

const uint32_t TableStruct_FRFlightControllerModelProto_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FlightWind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::Connection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::SmartRTH, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::VirtualStickVerticalControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::VirtualStickRollPitchControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::VirtualStickYawControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::VirtualStickFlightCoordinate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::VirtualStickFlightControlData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::VirtualStickFlightControlData, _impl_.pitch_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::VirtualStickFlightControlData, _impl_.roll_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::VirtualStickFlightControlData, _impl_.yaw_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::VirtualStickFlightControlData, _impl_.verticalthrottle_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::VirtualStickFlightControlData, _impl_.verticalcontrolmode_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::VirtualStickFlightControlData, _impl_.rollpitchcontrolmode_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::VirtualStickFlightControlData, _impl_.yawcontrolmode_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::VirtualStickFlightControlData, _impl_.rollpitchcoordinatesystem_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, _impl_.attitude_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, _impl_.homelocationcoordinate_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, _impl_.takeofflocationaltitude_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, _impl_.aircraftlocation_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, _impl_.altitude_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, _impl_.flightmode_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, _impl_.gpssignallevel_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, _impl_.satellitecount_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, _impl_.remainingflighttime_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, _impl_.batterypercentageneededtolandfromcurrentheight_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, _impl_.batterypercentageneededtogohome_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, _impl_.smartrthstate_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, _impl_.behavior_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, _impl_.virtualcontroldata_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, _impl_.isfailsafeenabled_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, _impl_.aremotorson_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, _impl_.ishomelocationset_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, _impl_.islandingconfirmationneeded_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, _impl_.hasreachedmaxflightheight_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, _impl_.hasreachedmaxflightradius_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, _impl_.windwarning_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, _impl_.countofflights_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, _impl_.flightlogindex_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, _impl_.isflying_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, _impl_.smartrthcountdown_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, _impl_.velocity_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, _impl_.isgpsbeingused_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, _impl_.flighttimeinseconds_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FlightControllerState, _impl_.cumulativeflightdistance_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::DJIFRProto::Standard::FlightWind)},
  { 6, -1, -1, sizeof(::DJIFRProto::Standard::Connection)},
  { 12, -1, -1, sizeof(::DJIFRProto::Standard::SmartRTH)},
  { 18, -1, -1, sizeof(::DJIFRProto::Standard::VirtualStickVerticalControl)},
  { 24, -1, -1, sizeof(::DJIFRProto::Standard::VirtualStickRollPitchControl)},
  { 30, -1, -1, sizeof(::DJIFRProto::Standard::VirtualStickYawControl)},
  { 36, -1, -1, sizeof(::DJIFRProto::Standard::VirtualStickFlightCoordinate)},
  { 42, -1, -1, sizeof(::DJIFRProto::Standard::VirtualStickFlightControlData)},
  { 56, -1, -1, sizeof(::DJIFRProto::Standard::FlightControllerState)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::DJIFRProto::Standard::_FlightWind_default_instance_._instance,
  &::DJIFRProto::Standard::_Connection_default_instance_._instance,
  &::DJIFRProto::Standard::_SmartRTH_default_instance_._instance,
  &::DJIFRProto::Standard::_VirtualStickVerticalControl_default_instance_._instance,
  &::DJIFRProto::Standard::_VirtualStickRollPitchControl_default_instance_._instance,
  &::DJIFRProto::Standard::_VirtualStickYawControl_default_instance_._instance,
  &::DJIFRProto::Standard::_VirtualStickFlightCoordinate_default_instance_._instance,
  &::DJIFRProto::Standard::_VirtualStickFlightControlData_default_instance_._instance,
  &::DJIFRProto::Standard::_FlightControllerState_default_instance_._instance,
};

const char descriptor_table_protodef_FRFlightControllerModelProto_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"FRFlightControllerModelProto.proto\022\023DJ"
  "IFRProto.Standard\032\030FRCommonModelProto.pr"
  "oto\"H\n\nFlightWind\":\n\007Warning\022\n\n\006Level0\020\000"
  "\022\n\n\006Level1\020\001\022\n\n\006Level2\020\002\022\013\n\007Unknown\020\003\"Q\n"
  "\nConnection\"C\n\020FailSafeBehavior\022\t\n\005Hover"
  "\020\000\022\013\n\007Landing\020\001\022\n\n\006GoHome\020\002\022\013\n\007Unknown\020\003"
  "\"Y\n\010SmartRTH\"M\n\005State\022\010\n\004Idle\020\000\022\020\n\014Count"
  "ingDown\020\001\022\014\n\010Executed\020\002\022\r\n\tCancelled\020\003\022\013"
  "\n\007Unknown\020\004\"N\n\033VirtualStickVerticalContr"
  "ol\"/\n\004Mode\022\014\n\010Velocity\020\000\022\014\n\010Position\020\001\022\013"
  "\n\007Unknown\020\002\"L\n\034VirtualStickRollPitchCont"
  "rol\",\n\004Mode\022\t\n\005Angle\020\000\022\014\n\010Velocity\020\001\022\013\n\007"
  "Unknown\020\002\"F\n\026VirtualStickYawControl\",\n\004M"
  "ode\022\t\n\005Angle\020\000\022\014\n\010Velocity\020\001\022\013\n\007Unknown\020"
  "\002\"K\n\034VirtualStickFlightCoordinate\"+\n\006Sys"
  "tem\022\n\n\006Ground\020\000\022\010\n\004Body\020\001\022\013\n\007Unknown\020\002\"\264"
  "\003\n\035VirtualStickFlightControlData\022\r\n\005pitc"
  "h\030\001 \001(\002\022\014\n\004roll\030\002 \001(\002\022\013\n\003yaw\030\003 \001(\002\022\030\n\020ve"
  "rticalThrottle\030\004 \001(\002\022R\n\023verticalControlM"
  "ode\030\005 \001(\01625.DJIFRProto.Standard.VirtualS"
  "tickVerticalControl.Mode\022T\n\024rollPitchCon"
  "trolMode\030\006 \001(\01626.DJIFRProto.Standard.Vir"
  "tualStickRollPitchControl.Mode\022H\n\016yawCon"
  "trolMode\030\007 \001(\01620.DJIFRProto.Standard.Vir"
  "tualStickYawControl.Mode\022[\n\031rollPitchCoo"
  "rdinateSystem\030\010 \001(\01628.DJIFRProto.Standar"
  "d.VirtualStickFlightCoordinate.System\"\275\t"
  "\n\025FlightControllerState\022/\n\010attitude\030\001 \001("
  "\0132\035.DJIFRProto.Standard.Attitude\022I\n\026home"
  "LocationCoordinate\030\002 \001(\0132).DJIFRProto.St"
  "andard.LocationCoordinate2D\022\037\n\027takeoffLo"
  "cationAltitude\030\003 \001(\002\022C\n\020aircraftLocation"
  "\030\004 \001(\0132).DJIFRProto.Standard.LocationCoo"
  "rdinate2D\022\020\n\010altitude\030\005 \001(\002\0223\n\nflightMod"
  "e\030\006 \001(\0162\037.DJIFRProto.Standard.FlightMode"
  "\022<\n\016GPSSignalLevel\030\007 \001(\0162$.DJIFRProto.St"
  "andard.GPSSignal.Level\022\026\n\016satelliteCount"
  "\030\010 \001(\005\022\033\n\023remainingFlightTime\030\t \001(\005\0226\n.b"
  "atteryPercentageNeededToLandFromCurrentH"
  "eight\030\n \001(\005\022\'\n\037batteryPercentageNeededTo"
  "GoHome\030\013 \001(\005\022:\n\rsmartRTHState\030\014 \001(\0162#.DJ"
  "IFRProto.Standard.SmartRTH.State\022B\n\010beha"
  "vior\030\r \001(\01620.DJIFRProto.Standard.Connect"
  "ion.FailSafeBehavior\022N\n\022virtualControlDa"
  "ta\030\016 \001(\01322.DJIFRProto.Standard.VirtualSt"
  "ickFlightControlData\022\031\n\021isFailsafeEnable"
  "d\030\017 \001(\010\022\023\n\013areMotorsOn\030\020 \001(\010\022\031\n\021isHomeLo"
  "cationSet\030\021 \001(\010\022#\n\033isLandingConfirmation"
  "Needed\030\022 \001(\010\022!\n\031hasReachedMaxFlightHeigh"
  "t\030\023 \001(\010\022!\n\031hasReachedMaxFlightRadius\030\024 \001"
  "(\010\022<\n\013windWarning\030\025 \001(\0162\'.DJIFRProto.Sta"
  "ndard.FlightWind.Warning\022\026\n\016countOfFligh"
  "ts\030\026 \001(\005\022\026\n\016flightLogIndex\030\027 \001(\005\022\020\n\010isFl"
  "ying\030\030 \001(\010\022\031\n\021smartRTHCountdown\030\031 \001(\005\022/\n"
  "\010velocity\030\032 \001(\0132\035.DJIFRProto.Standard.Ve"
  "locity\022\026\n\016isGPSBeingUsed\030\033 \001(\010\022\033\n\023flight"
  "TimeInSeconds\030\034 \001(\001\022 \n\030cumulativeFlightD"
  "istance\030\035 \001(\001*\267\003\n\nFlightMode\022\n\n\006Manual\020\000"
  "\022\010\n\004Atti\020\001\022\022\n\016AttiCourseLock\020\002\022\013\n\007GPSAtt"
  "i\020\006\022\021\n\rGPSCourseLock\020\007\022\017\n\013GPSHomeLock\020\010\022"
  "\017\n\013GPSHotPoint\020\t\022\023\n\017AssistedTakeoff\020\n\022\017\n"
  "\013AutoTakeoff\020\013\022\017\n\013AutoLanding\020\014\022\017\n\013GPSWa"
  "ypoint\020\016\022\n\n\006GoHome\020\017\022\014\n\010Joystick\020\021\022\024\n\020GP"
  "SAttiWristband\020\022\022\010\n\004Draw\020\030\022\017\n\013GPSFollowM"
  "e\020\031\022\017\n\013ActiveTrack\020\032\022\n\n\006TapFly\020\033\022\014\n\010GPSS"
  "port\020\037\022\r\n\tGPSNovice\020 \022\022\n\016ConfirmLanding\020"
  "!\022\021\n\rTerrainFollow\020#\022\n\n\006Tripod\020&\022\030\n\024Acti"
  "veTrackSpotlight\020\'\022\025\n\021MotorsJustStarted\020"
  ")\022\014\n\007Unknown\020\377\001B\r\242\002\nDJIFRProtob\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_FRFlightControllerModelProto_2eproto_deps[1] = {
  &::descriptor_table_FRCommonModelProto_2eproto,
};
static ::_pbi::once_flag descriptor_table_FRFlightControllerModelProto_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_FRFlightControllerModelProto_2eproto = {
    false, false, 2758, descriptor_table_protodef_FRFlightControllerModelProto_2eproto,
    "FRFlightControllerModelProto.proto",
    &descriptor_table_FRFlightControllerModelProto_2eproto_once, descriptor_table_FRFlightControllerModelProto_2eproto_deps, 1, 9,
    schemas, file_default_instances, TableStruct_FRFlightControllerModelProto_2eproto::offsets,
    file_level_metadata_FRFlightControllerModelProto_2eproto, file_level_enum_descriptors_FRFlightControllerModelProto_2eproto,
    file_level_service_descriptors_FRFlightControllerModelProto_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_FRFlightControllerModelProto_2eproto_getter() {
  return &descriptor_table_FRFlightControllerModelProto_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_FRFlightControllerModelProto_2eproto(&descriptor_table_FRFlightControllerModelProto_2eproto);
namespace DJIFRProto {
namespace Standard {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FlightWind_Warning_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_FRFlightControllerModelProto_2eproto);
  return file_level_enum_descriptors_FRFlightControllerModelProto_2eproto[0];
}
bool FlightWind_Warning_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FlightWind_Warning FlightWind::Level0;
constexpr FlightWind_Warning FlightWind::Level1;
constexpr FlightWind_Warning FlightWind::Level2;
constexpr FlightWind_Warning FlightWind::Unknown;
constexpr FlightWind_Warning FlightWind::Warning_MIN;
constexpr FlightWind_Warning FlightWind::Warning_MAX;
constexpr int FlightWind::Warning_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Connection_FailSafeBehavior_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_FRFlightControllerModelProto_2eproto);
  return file_level_enum_descriptors_FRFlightControllerModelProto_2eproto[1];
}
bool Connection_FailSafeBehavior_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Connection_FailSafeBehavior Connection::Hover;
constexpr Connection_FailSafeBehavior Connection::Landing;
constexpr Connection_FailSafeBehavior Connection::GoHome;
constexpr Connection_FailSafeBehavior Connection::Unknown;
constexpr Connection_FailSafeBehavior Connection::FailSafeBehavior_MIN;
constexpr Connection_FailSafeBehavior Connection::FailSafeBehavior_MAX;
constexpr int Connection::FailSafeBehavior_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SmartRTH_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_FRFlightControllerModelProto_2eproto);
  return file_level_enum_descriptors_FRFlightControllerModelProto_2eproto[2];
}
bool SmartRTH_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SmartRTH_State SmartRTH::Idle;
constexpr SmartRTH_State SmartRTH::CountingDown;
constexpr SmartRTH_State SmartRTH::Executed;
constexpr SmartRTH_State SmartRTH::Cancelled;
constexpr SmartRTH_State SmartRTH::Unknown;
constexpr SmartRTH_State SmartRTH::State_MIN;
constexpr SmartRTH_State SmartRTH::State_MAX;
constexpr int SmartRTH::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VirtualStickVerticalControl_Mode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_FRFlightControllerModelProto_2eproto);
  return file_level_enum_descriptors_FRFlightControllerModelProto_2eproto[3];
}
bool VirtualStickVerticalControl_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr VirtualStickVerticalControl_Mode VirtualStickVerticalControl::Velocity;
constexpr VirtualStickVerticalControl_Mode VirtualStickVerticalControl::Position;
constexpr VirtualStickVerticalControl_Mode VirtualStickVerticalControl::Unknown;
constexpr VirtualStickVerticalControl_Mode VirtualStickVerticalControl::Mode_MIN;
constexpr VirtualStickVerticalControl_Mode VirtualStickVerticalControl::Mode_MAX;
constexpr int VirtualStickVerticalControl::Mode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VirtualStickRollPitchControl_Mode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_FRFlightControllerModelProto_2eproto);
  return file_level_enum_descriptors_FRFlightControllerModelProto_2eproto[4];
}
bool VirtualStickRollPitchControl_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr VirtualStickRollPitchControl_Mode VirtualStickRollPitchControl::Angle;
constexpr VirtualStickRollPitchControl_Mode VirtualStickRollPitchControl::Velocity;
constexpr VirtualStickRollPitchControl_Mode VirtualStickRollPitchControl::Unknown;
constexpr VirtualStickRollPitchControl_Mode VirtualStickRollPitchControl::Mode_MIN;
constexpr VirtualStickRollPitchControl_Mode VirtualStickRollPitchControl::Mode_MAX;
constexpr int VirtualStickRollPitchControl::Mode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VirtualStickYawControl_Mode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_FRFlightControllerModelProto_2eproto);
  return file_level_enum_descriptors_FRFlightControllerModelProto_2eproto[5];
}
bool VirtualStickYawControl_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr VirtualStickYawControl_Mode VirtualStickYawControl::Angle;
constexpr VirtualStickYawControl_Mode VirtualStickYawControl::Velocity;
constexpr VirtualStickYawControl_Mode VirtualStickYawControl::Unknown;
constexpr VirtualStickYawControl_Mode VirtualStickYawControl::Mode_MIN;
constexpr VirtualStickYawControl_Mode VirtualStickYawControl::Mode_MAX;
constexpr int VirtualStickYawControl::Mode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VirtualStickFlightCoordinate_System_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_FRFlightControllerModelProto_2eproto);
  return file_level_enum_descriptors_FRFlightControllerModelProto_2eproto[6];
}
bool VirtualStickFlightCoordinate_System_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr VirtualStickFlightCoordinate_System VirtualStickFlightCoordinate::Ground;
constexpr VirtualStickFlightCoordinate_System VirtualStickFlightCoordinate::Body;
constexpr VirtualStickFlightCoordinate_System VirtualStickFlightCoordinate::Unknown;
constexpr VirtualStickFlightCoordinate_System VirtualStickFlightCoordinate::System_MIN;
constexpr VirtualStickFlightCoordinate_System VirtualStickFlightCoordinate::System_MAX;
constexpr int VirtualStickFlightCoordinate::System_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FlightMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_FRFlightControllerModelProto_2eproto);
  return file_level_enum_descriptors_FRFlightControllerModelProto_2eproto[7];
}
bool FlightMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 14:
    case 15:
    case 17:
    case 18:
    case 24:
    case 25:
    case 26:
    case 27:
    case 31:
    case 32:
    case 33:
    case 35:
    case 38:
    case 39:
    case 41:
    case 255:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class FlightWind::_Internal {
 public:
};

FlightWind::FlightWind(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:DJIFRProto.Standard.FlightWind)
}
FlightWind::FlightWind(const FlightWind& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  FlightWind* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.FlightWind)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlightWind::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlightWind::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata FlightWind::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FRFlightControllerModelProto_2eproto_getter, &descriptor_table_FRFlightControllerModelProto_2eproto_once,
      file_level_metadata_FRFlightControllerModelProto_2eproto[0]);
}

// ===================================================================

class Connection::_Internal {
 public:
};

Connection::Connection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:DJIFRProto.Standard.Connection)
}
Connection::Connection(const Connection& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Connection* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.Connection)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Connection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Connection::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Connection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FRFlightControllerModelProto_2eproto_getter, &descriptor_table_FRFlightControllerModelProto_2eproto_once,
      file_level_metadata_FRFlightControllerModelProto_2eproto[1]);
}

// ===================================================================

class SmartRTH::_Internal {
 public:
};

SmartRTH::SmartRTH(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:DJIFRProto.Standard.SmartRTH)
}
SmartRTH::SmartRTH(const SmartRTH& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  SmartRTH* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.SmartRTH)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SmartRTH::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SmartRTH::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SmartRTH::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FRFlightControllerModelProto_2eproto_getter, &descriptor_table_FRFlightControllerModelProto_2eproto_once,
      file_level_metadata_FRFlightControllerModelProto_2eproto[2]);
}

// ===================================================================

class VirtualStickVerticalControl::_Internal {
 public:
};

VirtualStickVerticalControl::VirtualStickVerticalControl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:DJIFRProto.Standard.VirtualStickVerticalControl)
}
VirtualStickVerticalControl::VirtualStickVerticalControl(const VirtualStickVerticalControl& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  VirtualStickVerticalControl* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.VirtualStickVerticalControl)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtualStickVerticalControl::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtualStickVerticalControl::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata VirtualStickVerticalControl::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FRFlightControllerModelProto_2eproto_getter, &descriptor_table_FRFlightControllerModelProto_2eproto_once,
      file_level_metadata_FRFlightControllerModelProto_2eproto[3]);
}

// ===================================================================

class VirtualStickRollPitchControl::_Internal {
 public:
};

VirtualStickRollPitchControl::VirtualStickRollPitchControl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:DJIFRProto.Standard.VirtualStickRollPitchControl)
}
VirtualStickRollPitchControl::VirtualStickRollPitchControl(const VirtualStickRollPitchControl& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  VirtualStickRollPitchControl* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.VirtualStickRollPitchControl)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtualStickRollPitchControl::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtualStickRollPitchControl::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata VirtualStickRollPitchControl::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FRFlightControllerModelProto_2eproto_getter, &descriptor_table_FRFlightControllerModelProto_2eproto_once,
      file_level_metadata_FRFlightControllerModelProto_2eproto[4]);
}

// ===================================================================

class VirtualStickYawControl::_Internal {
 public:
};

VirtualStickYawControl::VirtualStickYawControl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:DJIFRProto.Standard.VirtualStickYawControl)
}
VirtualStickYawControl::VirtualStickYawControl(const VirtualStickYawControl& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  VirtualStickYawControl* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.VirtualStickYawControl)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtualStickYawControl::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtualStickYawControl::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata VirtualStickYawControl::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FRFlightControllerModelProto_2eproto_getter, &descriptor_table_FRFlightControllerModelProto_2eproto_once,
      file_level_metadata_FRFlightControllerModelProto_2eproto[5]);
}

// ===================================================================

class VirtualStickFlightCoordinate::_Internal {
 public:
};

VirtualStickFlightCoordinate::VirtualStickFlightCoordinate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:DJIFRProto.Standard.VirtualStickFlightCoordinate)
}
VirtualStickFlightCoordinate::VirtualStickFlightCoordinate(const VirtualStickFlightCoordinate& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  VirtualStickFlightCoordinate* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.VirtualStickFlightCoordinate)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtualStickFlightCoordinate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtualStickFlightCoordinate::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata VirtualStickFlightCoordinate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FRFlightControllerModelProto_2eproto_getter, &descriptor_table_FRFlightControllerModelProto_2eproto_once,
      file_level_metadata_FRFlightControllerModelProto_2eproto[6]);
}

// ===================================================================

class VirtualStickFlightControlData::_Internal {
 public:
};

VirtualStickFlightControlData::VirtualStickFlightControlData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DJIFRProto.Standard.VirtualStickFlightControlData)
}
VirtualStickFlightControlData::VirtualStickFlightControlData(const VirtualStickFlightControlData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VirtualStickFlightControlData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pitch_){}
    , decltype(_impl_.roll_){}
    , decltype(_impl_.yaw_){}
    , decltype(_impl_.verticalthrottle_){}
    , decltype(_impl_.verticalcontrolmode_){}
    , decltype(_impl_.rollpitchcontrolmode_){}
    , decltype(_impl_.yawcontrolmode_){}
    , decltype(_impl_.rollpitchcoordinatesystem_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pitch_, &from._impl_.pitch_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rollpitchcoordinatesystem_) -
    reinterpret_cast<char*>(&_impl_.pitch_)) + sizeof(_impl_.rollpitchcoordinatesystem_));
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.VirtualStickFlightControlData)
}

inline void VirtualStickFlightControlData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pitch_){0}
    , decltype(_impl_.roll_){0}
    , decltype(_impl_.yaw_){0}
    , decltype(_impl_.verticalthrottle_){0}
    , decltype(_impl_.verticalcontrolmode_){0}
    , decltype(_impl_.rollpitchcontrolmode_){0}
    , decltype(_impl_.yawcontrolmode_){0}
    , decltype(_impl_.rollpitchcoordinatesystem_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VirtualStickFlightControlData::~VirtualStickFlightControlData() {
  // @@protoc_insertion_point(destructor:DJIFRProto.Standard.VirtualStickFlightControlData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VirtualStickFlightControlData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VirtualStickFlightControlData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VirtualStickFlightControlData::Clear() {
// @@protoc_insertion_point(message_clear_start:DJIFRProto.Standard.VirtualStickFlightControlData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pitch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.rollpitchcoordinatesystem_) -
      reinterpret_cast<char*>(&_impl_.pitch_)) + sizeof(_impl_.rollpitchcoordinatesystem_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtualStickFlightControlData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float pitch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float roll = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float yaw = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float verticalThrottle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.verticalthrottle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .DJIFRProto.Standard.VirtualStickVerticalControl.Mode verticalControlMode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_verticalcontrolmode(static_cast<::DJIFRProto::Standard::VirtualStickVerticalControl_Mode>(val));
        } else
          goto handle_unusual;
        continue;
      // .DJIFRProto.Standard.VirtualStickRollPitchControl.Mode rollPitchControlMode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_rollpitchcontrolmode(static_cast<::DJIFRProto::Standard::VirtualStickRollPitchControl_Mode>(val));
        } else
          goto handle_unusual;
        continue;
      // .DJIFRProto.Standard.VirtualStickYawControl.Mode yawControlMode = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_yawcontrolmode(static_cast<::DJIFRProto::Standard::VirtualStickYawControl_Mode>(val));
        } else
          goto handle_unusual;
        continue;
      // .DJIFRProto.Standard.VirtualStickFlightCoordinate.System rollPitchCoordinateSystem = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_rollpitchcoordinatesystem(static_cast<::DJIFRProto::Standard::VirtualStickFlightCoordinate_System>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VirtualStickFlightControlData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DJIFRProto.Standard.VirtualStickFlightControlData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float pitch = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_pitch(), target);
  }

  // float roll = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = this->_internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_roll(), target);
  }

  // float yaw = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_yaw(), target);
  }

  // float verticalThrottle = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_verticalthrottle = this->_internal_verticalthrottle();
  uint32_t raw_verticalthrottle;
  memcpy(&raw_verticalthrottle, &tmp_verticalthrottle, sizeof(tmp_verticalthrottle));
  if (raw_verticalthrottle != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_verticalthrottle(), target);
  }

  // .DJIFRProto.Standard.VirtualStickVerticalControl.Mode verticalControlMode = 5;
  if (this->_internal_verticalcontrolmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_verticalcontrolmode(), target);
  }

  // .DJIFRProto.Standard.VirtualStickRollPitchControl.Mode rollPitchControlMode = 6;
  if (this->_internal_rollpitchcontrolmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_rollpitchcontrolmode(), target);
  }

  // .DJIFRProto.Standard.VirtualStickYawControl.Mode yawControlMode = 7;
  if (this->_internal_yawcontrolmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_yawcontrolmode(), target);
  }

  // .DJIFRProto.Standard.VirtualStickFlightCoordinate.System rollPitchCoordinateSystem = 8;
  if (this->_internal_rollpitchcoordinatesystem() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_rollpitchcoordinatesystem(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DJIFRProto.Standard.VirtualStickFlightControlData)
  return target;
}

size_t VirtualStickFlightControlData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DJIFRProto.Standard.VirtualStickFlightControlData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float pitch = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    total_size += 1 + 4;
  }

  // float roll = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = this->_internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    total_size += 1 + 4;
  }

  // float yaw = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 1 + 4;
  }

  // float verticalThrottle = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_verticalthrottle = this->_internal_verticalthrottle();
  uint32_t raw_verticalthrottle;
  memcpy(&raw_verticalthrottle, &tmp_verticalthrottle, sizeof(tmp_verticalthrottle));
  if (raw_verticalthrottle != 0) {
    total_size += 1 + 4;
  }

  // .DJIFRProto.Standard.VirtualStickVerticalControl.Mode verticalControlMode = 5;
  if (this->_internal_verticalcontrolmode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_verticalcontrolmode());
  }

  // .DJIFRProto.Standard.VirtualStickRollPitchControl.Mode rollPitchControlMode = 6;
  if (this->_internal_rollpitchcontrolmode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_rollpitchcontrolmode());
  }

  // .DJIFRProto.Standard.VirtualStickYawControl.Mode yawControlMode = 7;
  if (this->_internal_yawcontrolmode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_yawcontrolmode());
  }

  // .DJIFRProto.Standard.VirtualStickFlightCoordinate.System rollPitchCoordinateSystem = 8;
  if (this->_internal_rollpitchcoordinatesystem() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_rollpitchcoordinatesystem());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtualStickFlightControlData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VirtualStickFlightControlData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtualStickFlightControlData::GetClassData() const { return &_class_data_; }


void VirtualStickFlightControlData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VirtualStickFlightControlData*>(&to_msg);
  auto& from = static_cast<const VirtualStickFlightControlData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DJIFRProto.Standard.VirtualStickFlightControlData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = from._internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    _this->_internal_set_pitch(from._internal_pitch());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = from._internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    _this->_internal_set_roll(from._internal_roll());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = from._internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _this->_internal_set_yaw(from._internal_yaw());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_verticalthrottle = from._internal_verticalthrottle();
  uint32_t raw_verticalthrottle;
  memcpy(&raw_verticalthrottle, &tmp_verticalthrottle, sizeof(tmp_verticalthrottle));
  if (raw_verticalthrottle != 0) {
    _this->_internal_set_verticalthrottle(from._internal_verticalthrottle());
  }
  if (from._internal_verticalcontrolmode() != 0) {
    _this->_internal_set_verticalcontrolmode(from._internal_verticalcontrolmode());
  }
  if (from._internal_rollpitchcontrolmode() != 0) {
    _this->_internal_set_rollpitchcontrolmode(from._internal_rollpitchcontrolmode());
  }
  if (from._internal_yawcontrolmode() != 0) {
    _this->_internal_set_yawcontrolmode(from._internal_yawcontrolmode());
  }
  if (from._internal_rollpitchcoordinatesystem() != 0) {
    _this->_internal_set_rollpitchcoordinatesystem(from._internal_rollpitchcoordinatesystem());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtualStickFlightControlData::CopyFrom(const VirtualStickFlightControlData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DJIFRProto.Standard.VirtualStickFlightControlData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualStickFlightControlData::IsInitialized() const {
  return true;
}

void VirtualStickFlightControlData::InternalSwap(VirtualStickFlightControlData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VirtualStickFlightControlData, _impl_.rollpitchcoordinatesystem_)
      + sizeof(VirtualStickFlightControlData::_impl_.rollpitchcoordinatesystem_)
      - PROTOBUF_FIELD_OFFSET(VirtualStickFlightControlData, _impl_.pitch_)>(
          reinterpret_cast<char*>(&_impl_.pitch_),
          reinterpret_cast<char*>(&other->_impl_.pitch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtualStickFlightControlData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FRFlightControllerModelProto_2eproto_getter, &descriptor_table_FRFlightControllerModelProto_2eproto_once,
      file_level_metadata_FRFlightControllerModelProto_2eproto[7]);
}

// ===================================================================

class FlightControllerState::_Internal {
 public:
  static const ::DJIFRProto::Standard::Attitude& attitude(const FlightControllerState* msg);
  static const ::DJIFRProto::Standard::LocationCoordinate2D& homelocationcoordinate(const FlightControllerState* msg);
  static const ::DJIFRProto::Standard::LocationCoordinate2D& aircraftlocation(const FlightControllerState* msg);
  static const ::DJIFRProto::Standard::VirtualStickFlightControlData& virtualcontroldata(const FlightControllerState* msg);
  static const ::DJIFRProto::Standard::Velocity& velocity(const FlightControllerState* msg);
};

const ::DJIFRProto::Standard::Attitude&
FlightControllerState::_Internal::attitude(const FlightControllerState* msg) {
  return *msg->_impl_.attitude_;
}
const ::DJIFRProto::Standard::LocationCoordinate2D&
FlightControllerState::_Internal::homelocationcoordinate(const FlightControllerState* msg) {
  return *msg->_impl_.homelocationcoordinate_;
}
const ::DJIFRProto::Standard::LocationCoordinate2D&
FlightControllerState::_Internal::aircraftlocation(const FlightControllerState* msg) {
  return *msg->_impl_.aircraftlocation_;
}
const ::DJIFRProto::Standard::VirtualStickFlightControlData&
FlightControllerState::_Internal::virtualcontroldata(const FlightControllerState* msg) {
  return *msg->_impl_.virtualcontroldata_;
}
const ::DJIFRProto::Standard::Velocity&
FlightControllerState::_Internal::velocity(const FlightControllerState* msg) {
  return *msg->_impl_.velocity_;
}
void FlightControllerState::clear_attitude() {
  if (GetArenaForAllocation() == nullptr && _impl_.attitude_ != nullptr) {
    delete _impl_.attitude_;
  }
  _impl_.attitude_ = nullptr;
}
void FlightControllerState::clear_homelocationcoordinate() {
  if (GetArenaForAllocation() == nullptr && _impl_.homelocationcoordinate_ != nullptr) {
    delete _impl_.homelocationcoordinate_;
  }
  _impl_.homelocationcoordinate_ = nullptr;
}
void FlightControllerState::clear_aircraftlocation() {
  if (GetArenaForAllocation() == nullptr && _impl_.aircraftlocation_ != nullptr) {
    delete _impl_.aircraftlocation_;
  }
  _impl_.aircraftlocation_ = nullptr;
}
void FlightControllerState::clear_velocity() {
  if (GetArenaForAllocation() == nullptr && _impl_.velocity_ != nullptr) {
    delete _impl_.velocity_;
  }
  _impl_.velocity_ = nullptr;
}
FlightControllerState::FlightControllerState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DJIFRProto.Standard.FlightControllerState)
}
FlightControllerState::FlightControllerState(const FlightControllerState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FlightControllerState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.attitude_){nullptr}
    , decltype(_impl_.homelocationcoordinate_){nullptr}
    , decltype(_impl_.aircraftlocation_){nullptr}
    , decltype(_impl_.virtualcontroldata_){nullptr}
    , decltype(_impl_.velocity_){nullptr}
    , decltype(_impl_.takeofflocationaltitude_){}
    , decltype(_impl_.altitude_){}
    , decltype(_impl_.flightmode_){}
    , decltype(_impl_.gpssignallevel_){}
    , decltype(_impl_.satellitecount_){}
    , decltype(_impl_.remainingflighttime_){}
    , decltype(_impl_.batterypercentageneededtolandfromcurrentheight_){}
    , decltype(_impl_.batterypercentageneededtogohome_){}
    , decltype(_impl_.smartrthstate_){}
    , decltype(_impl_.behavior_){}
    , decltype(_impl_.isfailsafeenabled_){}
    , decltype(_impl_.aremotorson_){}
    , decltype(_impl_.ishomelocationset_){}
    , decltype(_impl_.islandingconfirmationneeded_){}
    , decltype(_impl_.windwarning_){}
    , decltype(_impl_.countofflights_){}
    , decltype(_impl_.hasreachedmaxflightheight_){}
    , decltype(_impl_.hasreachedmaxflightradius_){}
    , decltype(_impl_.isflying_){}
    , decltype(_impl_.isgpsbeingused_){}
    , decltype(_impl_.flightlogindex_){}
    , decltype(_impl_.smartrthcountdown_){}
    , decltype(_impl_.flighttimeinseconds_){}
    , decltype(_impl_.cumulativeflightdistance_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_attitude()) {
    _this->_impl_.attitude_ = new ::DJIFRProto::Standard::Attitude(*from._impl_.attitude_);
  }
  if (from._internal_has_homelocationcoordinate()) {
    _this->_impl_.homelocationcoordinate_ = new ::DJIFRProto::Standard::LocationCoordinate2D(*from._impl_.homelocationcoordinate_);
  }
  if (from._internal_has_aircraftlocation()) {
    _this->_impl_.aircraftlocation_ = new ::DJIFRProto::Standard::LocationCoordinate2D(*from._impl_.aircraftlocation_);
  }
  if (from._internal_has_virtualcontroldata()) {
    _this->_impl_.virtualcontroldata_ = new ::DJIFRProto::Standard::VirtualStickFlightControlData(*from._impl_.virtualcontroldata_);
  }
  if (from._internal_has_velocity()) {
    _this->_impl_.velocity_ = new ::DJIFRProto::Standard::Velocity(*from._impl_.velocity_);
  }
  ::memcpy(&_impl_.takeofflocationaltitude_, &from._impl_.takeofflocationaltitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cumulativeflightdistance_) -
    reinterpret_cast<char*>(&_impl_.takeofflocationaltitude_)) + sizeof(_impl_.cumulativeflightdistance_));
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.FlightControllerState)
}

inline void FlightControllerState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.attitude_){nullptr}
    , decltype(_impl_.homelocationcoordinate_){nullptr}
    , decltype(_impl_.aircraftlocation_){nullptr}
    , decltype(_impl_.virtualcontroldata_){nullptr}
    , decltype(_impl_.velocity_){nullptr}
    , decltype(_impl_.takeofflocationaltitude_){0}
    , decltype(_impl_.altitude_){0}
    , decltype(_impl_.flightmode_){0}
    , decltype(_impl_.gpssignallevel_){0}
    , decltype(_impl_.satellitecount_){0}
    , decltype(_impl_.remainingflighttime_){0}
    , decltype(_impl_.batterypercentageneededtolandfromcurrentheight_){0}
    , decltype(_impl_.batterypercentageneededtogohome_){0}
    , decltype(_impl_.smartrthstate_){0}
    , decltype(_impl_.behavior_){0}
    , decltype(_impl_.isfailsafeenabled_){false}
    , decltype(_impl_.aremotorson_){false}
    , decltype(_impl_.ishomelocationset_){false}
    , decltype(_impl_.islandingconfirmationneeded_){false}
    , decltype(_impl_.windwarning_){0}
    , decltype(_impl_.countofflights_){0}
    , decltype(_impl_.hasreachedmaxflightheight_){false}
    , decltype(_impl_.hasreachedmaxflightradius_){false}
    , decltype(_impl_.isflying_){false}
    , decltype(_impl_.isgpsbeingused_){false}
    , decltype(_impl_.flightlogindex_){0}
    , decltype(_impl_.smartrthcountdown_){0}
    , decltype(_impl_.flighttimeinseconds_){0}
    , decltype(_impl_.cumulativeflightdistance_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FlightControllerState::~FlightControllerState() {
  // @@protoc_insertion_point(destructor:DJIFRProto.Standard.FlightControllerState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FlightControllerState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.attitude_;
  if (this != internal_default_instance()) delete _impl_.homelocationcoordinate_;
  if (this != internal_default_instance()) delete _impl_.aircraftlocation_;
  if (this != internal_default_instance()) delete _impl_.virtualcontroldata_;
  if (this != internal_default_instance()) delete _impl_.velocity_;
}

void FlightControllerState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FlightControllerState::Clear() {
// @@protoc_insertion_point(message_clear_start:DJIFRProto.Standard.FlightControllerState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.attitude_ != nullptr) {
    delete _impl_.attitude_;
  }
  _impl_.attitude_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.homelocationcoordinate_ != nullptr) {
    delete _impl_.homelocationcoordinate_;
  }
  _impl_.homelocationcoordinate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.aircraftlocation_ != nullptr) {
    delete _impl_.aircraftlocation_;
  }
  _impl_.aircraftlocation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.virtualcontroldata_ != nullptr) {
    delete _impl_.virtualcontroldata_;
  }
  _impl_.virtualcontroldata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.velocity_ != nullptr) {
    delete _impl_.velocity_;
  }
  _impl_.velocity_ = nullptr;
  ::memset(&_impl_.takeofflocationaltitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.cumulativeflightdistance_) -
      reinterpret_cast<char*>(&_impl_.takeofflocationaltitude_)) + sizeof(_impl_.cumulativeflightdistance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlightControllerState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DJIFRProto.Standard.Attitude attitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_attitude(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DJIFRProto.Standard.LocationCoordinate2D homeLocationCoordinate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_homelocationcoordinate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float takeoffLocationAltitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.takeofflocationaltitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .DJIFRProto.Standard.LocationCoordinate2D aircraftLocation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_aircraftlocation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float altitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .DJIFRProto.Standard.FlightMode flightMode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_flightmode(static_cast<::DJIFRProto::Standard::FlightMode>(val));
        } else
          goto handle_unusual;
        continue;
      // .DJIFRProto.Standard.GPSSignal.Level GPSSignalLevel = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_gpssignallevel(static_cast<::DJIFRProto::Standard::GPSSignal_Level>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 satelliteCount = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.satellitecount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 remainingFlightTime = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.remainingflighttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 batteryPercentageNeededToLandFromCurrentHeight = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.batterypercentageneededtolandfromcurrentheight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 batteryPercentageNeededToGoHome = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.batterypercentageneededtogohome_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DJIFRProto.Standard.SmartRTH.State smartRTHState = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_smartrthstate(static_cast<::DJIFRProto::Standard::SmartRTH_State>(val));
        } else
          goto handle_unusual;
        continue;
      // .DJIFRProto.Standard.Connection.FailSafeBehavior behavior = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_behavior(static_cast<::DJIFRProto::Standard::Connection_FailSafeBehavior>(val));
        } else
          goto handle_unusual;
        continue;
      // .DJIFRProto.Standard.VirtualStickFlightControlData virtualControlData = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_virtualcontroldata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isFailsafeEnabled = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.isfailsafeenabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool areMotorsOn = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.aremotorson_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isHomeLocationSet = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.ishomelocationset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isLandingConfirmationNeeded = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.islandingconfirmationneeded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool hasReachedMaxFlightHeight = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.hasreachedmaxflightheight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool hasReachedMaxFlightRadius = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.hasreachedmaxflightradius_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DJIFRProto.Standard.FlightWind.Warning windWarning = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_windwarning(static_cast<::DJIFRProto::Standard::FlightWind_Warning>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 countOfFlights = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.countofflights_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 flightLogIndex = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.flightlogindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isFlying = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.isflying_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 smartRTHCountdown = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.smartrthcountdown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DJIFRProto.Standard.Velocity velocity = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isGPSBeingUsed = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _impl_.isgpsbeingused_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double flightTimeInSeconds = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 225)) {
          _impl_.flighttimeinseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double cumulativeFlightDistance = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 233)) {
          _impl_.cumulativeflightdistance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FlightControllerState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DJIFRProto.Standard.FlightControllerState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DJIFRProto.Standard.Attitude attitude = 1;
  if (this->_internal_has_attitude()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::attitude(this),
        _Internal::attitude(this).GetCachedSize(), target, stream);
  }

  // .DJIFRProto.Standard.LocationCoordinate2D homeLocationCoordinate = 2;
  if (this->_internal_has_homelocationcoordinate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::homelocationcoordinate(this),
        _Internal::homelocationcoordinate(this).GetCachedSize(), target, stream);
  }

  // float takeoffLocationAltitude = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_takeofflocationaltitude = this->_internal_takeofflocationaltitude();
  uint32_t raw_takeofflocationaltitude;
  memcpy(&raw_takeofflocationaltitude, &tmp_takeofflocationaltitude, sizeof(tmp_takeofflocationaltitude));
  if (raw_takeofflocationaltitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_takeofflocationaltitude(), target);
  }

  // .DJIFRProto.Standard.LocationCoordinate2D aircraftLocation = 4;
  if (this->_internal_has_aircraftlocation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::aircraftlocation(this),
        _Internal::aircraftlocation(this).GetCachedSize(), target, stream);
  }

  // float altitude = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_altitude = this->_internal_altitude();
  uint32_t raw_altitude;
  memcpy(&raw_altitude, &tmp_altitude, sizeof(tmp_altitude));
  if (raw_altitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_altitude(), target);
  }

  // .DJIFRProto.Standard.FlightMode flightMode = 6;
  if (this->_internal_flightmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_flightmode(), target);
  }

  // .DJIFRProto.Standard.GPSSignal.Level GPSSignalLevel = 7;
  if (this->_internal_gpssignallevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_gpssignallevel(), target);
  }

  // int32 satelliteCount = 8;
  if (this->_internal_satellitecount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_satellitecount(), target);
  }

  // int32 remainingFlightTime = 9;
  if (this->_internal_remainingflighttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_remainingflighttime(), target);
  }

  // int32 batteryPercentageNeededToLandFromCurrentHeight = 10;
  if (this->_internal_batterypercentageneededtolandfromcurrentheight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_batterypercentageneededtolandfromcurrentheight(), target);
  }

  // int32 batteryPercentageNeededToGoHome = 11;
  if (this->_internal_batterypercentageneededtogohome() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_batterypercentageneededtogohome(), target);
  }

  // .DJIFRProto.Standard.SmartRTH.State smartRTHState = 12;
  if (this->_internal_smartrthstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      12, this->_internal_smartrthstate(), target);
  }

  // .DJIFRProto.Standard.Connection.FailSafeBehavior behavior = 13;
  if (this->_internal_behavior() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      13, this->_internal_behavior(), target);
  }

  // .DJIFRProto.Standard.VirtualStickFlightControlData virtualControlData = 14;
  if (this->_internal_has_virtualcontroldata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::virtualcontroldata(this),
        _Internal::virtualcontroldata(this).GetCachedSize(), target, stream);
  }

  // bool isFailsafeEnabled = 15;
  if (this->_internal_isfailsafeenabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_isfailsafeenabled(), target);
  }

  // bool areMotorsOn = 16;
  if (this->_internal_aremotorson() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_aremotorson(), target);
  }

  // bool isHomeLocationSet = 17;
  if (this->_internal_ishomelocationset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_ishomelocationset(), target);
  }

  // bool isLandingConfirmationNeeded = 18;
  if (this->_internal_islandingconfirmationneeded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_islandingconfirmationneeded(), target);
  }

  // bool hasReachedMaxFlightHeight = 19;
  if (this->_internal_hasreachedmaxflightheight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_hasreachedmaxflightheight(), target);
  }

  // bool hasReachedMaxFlightRadius = 20;
  if (this->_internal_hasreachedmaxflightradius() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(20, this->_internal_hasreachedmaxflightradius(), target);
  }

  // .DJIFRProto.Standard.FlightWind.Warning windWarning = 21;
  if (this->_internal_windwarning() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      21, this->_internal_windwarning(), target);
  }

  // int32 countOfFlights = 22;
  if (this->_internal_countofflights() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(22, this->_internal_countofflights(), target);
  }

  // int32 flightLogIndex = 23;
  if (this->_internal_flightlogindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(23, this->_internal_flightlogindex(), target);
  }

  // bool isFlying = 24;
  if (this->_internal_isflying() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(24, this->_internal_isflying(), target);
  }

  // int32 smartRTHCountdown = 25;
  if (this->_internal_smartrthcountdown() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(25, this->_internal_smartrthcountdown(), target);
  }

  // .DJIFRProto.Standard.Velocity velocity = 26;
  if (this->_internal_has_velocity()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::velocity(this),
        _Internal::velocity(this).GetCachedSize(), target, stream);
  }

  // bool isGPSBeingUsed = 27;
  if (this->_internal_isgpsbeingused() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(27, this->_internal_isgpsbeingused(), target);
  }

  // double flightTimeInSeconds = 28;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_flighttimeinseconds = this->_internal_flighttimeinseconds();
  uint64_t raw_flighttimeinseconds;
  memcpy(&raw_flighttimeinseconds, &tmp_flighttimeinseconds, sizeof(tmp_flighttimeinseconds));
  if (raw_flighttimeinseconds != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(28, this->_internal_flighttimeinseconds(), target);
  }

  // double cumulativeFlightDistance = 29;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cumulativeflightdistance = this->_internal_cumulativeflightdistance();
  uint64_t raw_cumulativeflightdistance;
  memcpy(&raw_cumulativeflightdistance, &tmp_cumulativeflightdistance, sizeof(tmp_cumulativeflightdistance));
  if (raw_cumulativeflightdistance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(29, this->_internal_cumulativeflightdistance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DJIFRProto.Standard.FlightControllerState)
  return target;
}

size_t FlightControllerState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DJIFRProto.Standard.FlightControllerState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DJIFRProto.Standard.Attitude attitude = 1;
  if (this->_internal_has_attitude()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.attitude_);
  }

  // .DJIFRProto.Standard.LocationCoordinate2D homeLocationCoordinate = 2;
  if (this->_internal_has_homelocationcoordinate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.homelocationcoordinate_);
  }

  // .DJIFRProto.Standard.LocationCoordinate2D aircraftLocation = 4;
  if (this->_internal_has_aircraftlocation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.aircraftlocation_);
  }

  // .DJIFRProto.Standard.VirtualStickFlightControlData virtualControlData = 14;
  if (this->_internal_has_virtualcontroldata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.virtualcontroldata_);
  }

  // .DJIFRProto.Standard.Velocity velocity = 26;
  if (this->_internal_has_velocity()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.velocity_);
  }

  // float takeoffLocationAltitude = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_takeofflocationaltitude = this->_internal_takeofflocationaltitude();
  uint32_t raw_takeofflocationaltitude;
  memcpy(&raw_takeofflocationaltitude, &tmp_takeofflocationaltitude, sizeof(tmp_takeofflocationaltitude));
  if (raw_takeofflocationaltitude != 0) {
    total_size += 1 + 4;
  }

  // float altitude = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_altitude = this->_internal_altitude();
  uint32_t raw_altitude;
  memcpy(&raw_altitude, &tmp_altitude, sizeof(tmp_altitude));
  if (raw_altitude != 0) {
    total_size += 1 + 4;
  }

  // .DJIFRProto.Standard.FlightMode flightMode = 6;
  if (this->_internal_flightmode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_flightmode());
  }

  // .DJIFRProto.Standard.GPSSignal.Level GPSSignalLevel = 7;
  if (this->_internal_gpssignallevel() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_gpssignallevel());
  }

  // int32 satelliteCount = 8;
  if (this->_internal_satellitecount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_satellitecount());
  }

  // int32 remainingFlightTime = 9;
  if (this->_internal_remainingflighttime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_remainingflighttime());
  }

  // int32 batteryPercentageNeededToLandFromCurrentHeight = 10;
  if (this->_internal_batterypercentageneededtolandfromcurrentheight() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_batterypercentageneededtolandfromcurrentheight());
  }

  // int32 batteryPercentageNeededToGoHome = 11;
  if (this->_internal_batterypercentageneededtogohome() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_batterypercentageneededtogohome());
  }

  // .DJIFRProto.Standard.SmartRTH.State smartRTHState = 12;
  if (this->_internal_smartrthstate() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_smartrthstate());
  }

  // .DJIFRProto.Standard.Connection.FailSafeBehavior behavior = 13;
  if (this->_internal_behavior() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_behavior());
  }

  // bool isFailsafeEnabled = 15;
  if (this->_internal_isfailsafeenabled() != 0) {
    total_size += 1 + 1;
  }

  // bool areMotorsOn = 16;
  if (this->_internal_aremotorson() != 0) {
    total_size += 2 + 1;
  }

  // bool isHomeLocationSet = 17;
  if (this->_internal_ishomelocationset() != 0) {
    total_size += 2 + 1;
  }

  // bool isLandingConfirmationNeeded = 18;
  if (this->_internal_islandingconfirmationneeded() != 0) {
    total_size += 2 + 1;
  }

  // .DJIFRProto.Standard.FlightWind.Warning windWarning = 21;
  if (this->_internal_windwarning() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_windwarning());
  }

  // int32 countOfFlights = 22;
  if (this->_internal_countofflights() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_countofflights());
  }

  // bool hasReachedMaxFlightHeight = 19;
  if (this->_internal_hasreachedmaxflightheight() != 0) {
    total_size += 2 + 1;
  }

  // bool hasReachedMaxFlightRadius = 20;
  if (this->_internal_hasreachedmaxflightradius() != 0) {
    total_size += 2 + 1;
  }

  // bool isFlying = 24;
  if (this->_internal_isflying() != 0) {
    total_size += 2 + 1;
  }

  // bool isGPSBeingUsed = 27;
  if (this->_internal_isgpsbeingused() != 0) {
    total_size += 2 + 1;
  }

  // int32 flightLogIndex = 23;
  if (this->_internal_flightlogindex() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_flightlogindex());
  }

  // int32 smartRTHCountdown = 25;
  if (this->_internal_smartrthcountdown() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_smartrthcountdown());
  }

  // double flightTimeInSeconds = 28;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_flighttimeinseconds = this->_internal_flighttimeinseconds();
  uint64_t raw_flighttimeinseconds;
  memcpy(&raw_flighttimeinseconds, &tmp_flighttimeinseconds, sizeof(tmp_flighttimeinseconds));
  if (raw_flighttimeinseconds != 0) {
    total_size += 2 + 8;
  }

  // double cumulativeFlightDistance = 29;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cumulativeflightdistance = this->_internal_cumulativeflightdistance();
  uint64_t raw_cumulativeflightdistance;
  memcpy(&raw_cumulativeflightdistance, &tmp_cumulativeflightdistance, sizeof(tmp_cumulativeflightdistance));
  if (raw_cumulativeflightdistance != 0) {
    total_size += 2 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlightControllerState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FlightControllerState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlightControllerState::GetClassData() const { return &_class_data_; }


void FlightControllerState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FlightControllerState*>(&to_msg);
  auto& from = static_cast<const FlightControllerState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DJIFRProto.Standard.FlightControllerState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_attitude()) {
    _this->_internal_mutable_attitude()->::DJIFRProto::Standard::Attitude::MergeFrom(
        from._internal_attitude());
  }
  if (from._internal_has_homelocationcoordinate()) {
    _this->_internal_mutable_homelocationcoordinate()->::DJIFRProto::Standard::LocationCoordinate2D::MergeFrom(
        from._internal_homelocationcoordinate());
  }
  if (from._internal_has_aircraftlocation()) {
    _this->_internal_mutable_aircraftlocation()->::DJIFRProto::Standard::LocationCoordinate2D::MergeFrom(
        from._internal_aircraftlocation());
  }
  if (from._internal_has_virtualcontroldata()) {
    _this->_internal_mutable_virtualcontroldata()->::DJIFRProto::Standard::VirtualStickFlightControlData::MergeFrom(
        from._internal_virtualcontroldata());
  }
  if (from._internal_has_velocity()) {
    _this->_internal_mutable_velocity()->::DJIFRProto::Standard::Velocity::MergeFrom(
        from._internal_velocity());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_takeofflocationaltitude = from._internal_takeofflocationaltitude();
  uint32_t raw_takeofflocationaltitude;
  memcpy(&raw_takeofflocationaltitude, &tmp_takeofflocationaltitude, sizeof(tmp_takeofflocationaltitude));
  if (raw_takeofflocationaltitude != 0) {
    _this->_internal_set_takeofflocationaltitude(from._internal_takeofflocationaltitude());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_altitude = from._internal_altitude();
  uint32_t raw_altitude;
  memcpy(&raw_altitude, &tmp_altitude, sizeof(tmp_altitude));
  if (raw_altitude != 0) {
    _this->_internal_set_altitude(from._internal_altitude());
  }
  if (from._internal_flightmode() != 0) {
    _this->_internal_set_flightmode(from._internal_flightmode());
  }
  if (from._internal_gpssignallevel() != 0) {
    _this->_internal_set_gpssignallevel(from._internal_gpssignallevel());
  }
  if (from._internal_satellitecount() != 0) {
    _this->_internal_set_satellitecount(from._internal_satellitecount());
  }
  if (from._internal_remainingflighttime() != 0) {
    _this->_internal_set_remainingflighttime(from._internal_remainingflighttime());
  }
  if (from._internal_batterypercentageneededtolandfromcurrentheight() != 0) {
    _this->_internal_set_batterypercentageneededtolandfromcurrentheight(from._internal_batterypercentageneededtolandfromcurrentheight());
  }
  if (from._internal_batterypercentageneededtogohome() != 0) {
    _this->_internal_set_batterypercentageneededtogohome(from._internal_batterypercentageneededtogohome());
  }
  if (from._internal_smartrthstate() != 0) {
    _this->_internal_set_smartrthstate(from._internal_smartrthstate());
  }
  if (from._internal_behavior() != 0) {
    _this->_internal_set_behavior(from._internal_behavior());
  }
  if (from._internal_isfailsafeenabled() != 0) {
    _this->_internal_set_isfailsafeenabled(from._internal_isfailsafeenabled());
  }
  if (from._internal_aremotorson() != 0) {
    _this->_internal_set_aremotorson(from._internal_aremotorson());
  }
  if (from._internal_ishomelocationset() != 0) {
    _this->_internal_set_ishomelocationset(from._internal_ishomelocationset());
  }
  if (from._internal_islandingconfirmationneeded() != 0) {
    _this->_internal_set_islandingconfirmationneeded(from._internal_islandingconfirmationneeded());
  }
  if (from._internal_windwarning() != 0) {
    _this->_internal_set_windwarning(from._internal_windwarning());
  }
  if (from._internal_countofflights() != 0) {
    _this->_internal_set_countofflights(from._internal_countofflights());
  }
  if (from._internal_hasreachedmaxflightheight() != 0) {
    _this->_internal_set_hasreachedmaxflightheight(from._internal_hasreachedmaxflightheight());
  }
  if (from._internal_hasreachedmaxflightradius() != 0) {
    _this->_internal_set_hasreachedmaxflightradius(from._internal_hasreachedmaxflightradius());
  }
  if (from._internal_isflying() != 0) {
    _this->_internal_set_isflying(from._internal_isflying());
  }
  if (from._internal_isgpsbeingused() != 0) {
    _this->_internal_set_isgpsbeingused(from._internal_isgpsbeingused());
  }
  if (from._internal_flightlogindex() != 0) {
    _this->_internal_set_flightlogindex(from._internal_flightlogindex());
  }
  if (from._internal_smartrthcountdown() != 0) {
    _this->_internal_set_smartrthcountdown(from._internal_smartrthcountdown());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_flighttimeinseconds = from._internal_flighttimeinseconds();
  uint64_t raw_flighttimeinseconds;
  memcpy(&raw_flighttimeinseconds, &tmp_flighttimeinseconds, sizeof(tmp_flighttimeinseconds));
  if (raw_flighttimeinseconds != 0) {
    _this->_internal_set_flighttimeinseconds(from._internal_flighttimeinseconds());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cumulativeflightdistance = from._internal_cumulativeflightdistance();
  uint64_t raw_cumulativeflightdistance;
  memcpy(&raw_cumulativeflightdistance, &tmp_cumulativeflightdistance, sizeof(tmp_cumulativeflightdistance));
  if (raw_cumulativeflightdistance != 0) {
    _this->_internal_set_cumulativeflightdistance(from._internal_cumulativeflightdistance());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlightControllerState::CopyFrom(const FlightControllerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DJIFRProto.Standard.FlightControllerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlightControllerState::IsInitialized() const {
  return true;
}

void FlightControllerState::InternalSwap(FlightControllerState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlightControllerState, _impl_.cumulativeflightdistance_)
      + sizeof(FlightControllerState::_impl_.cumulativeflightdistance_)
      - PROTOBUF_FIELD_OFFSET(FlightControllerState, _impl_.attitude_)>(
          reinterpret_cast<char*>(&_impl_.attitude_),
          reinterpret_cast<char*>(&other->_impl_.attitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FlightControllerState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FRFlightControllerModelProto_2eproto_getter, &descriptor_table_FRFlightControllerModelProto_2eproto_once,
      file_level_metadata_FRFlightControllerModelProto_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Standard
}  // namespace DJIFRProto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DJIFRProto::Standard::FlightWind*
Arena::CreateMaybeMessage< ::DJIFRProto::Standard::FlightWind >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DJIFRProto::Standard::FlightWind >(arena);
}
template<> PROTOBUF_NOINLINE ::DJIFRProto::Standard::Connection*
Arena::CreateMaybeMessage< ::DJIFRProto::Standard::Connection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DJIFRProto::Standard::Connection >(arena);
}
template<> PROTOBUF_NOINLINE ::DJIFRProto::Standard::SmartRTH*
Arena::CreateMaybeMessage< ::DJIFRProto::Standard::SmartRTH >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DJIFRProto::Standard::SmartRTH >(arena);
}
template<> PROTOBUF_NOINLINE ::DJIFRProto::Standard::VirtualStickVerticalControl*
Arena::CreateMaybeMessage< ::DJIFRProto::Standard::VirtualStickVerticalControl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DJIFRProto::Standard::VirtualStickVerticalControl >(arena);
}
template<> PROTOBUF_NOINLINE ::DJIFRProto::Standard::VirtualStickRollPitchControl*
Arena::CreateMaybeMessage< ::DJIFRProto::Standard::VirtualStickRollPitchControl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DJIFRProto::Standard::VirtualStickRollPitchControl >(arena);
}
template<> PROTOBUF_NOINLINE ::DJIFRProto::Standard::VirtualStickYawControl*
Arena::CreateMaybeMessage< ::DJIFRProto::Standard::VirtualStickYawControl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DJIFRProto::Standard::VirtualStickYawControl >(arena);
}
template<> PROTOBUF_NOINLINE ::DJIFRProto::Standard::VirtualStickFlightCoordinate*
Arena::CreateMaybeMessage< ::DJIFRProto::Standard::VirtualStickFlightCoordinate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DJIFRProto::Standard::VirtualStickFlightCoordinate >(arena);
}
template<> PROTOBUF_NOINLINE ::DJIFRProto::Standard::VirtualStickFlightControlData*
Arena::CreateMaybeMessage< ::DJIFRProto::Standard::VirtualStickFlightControlData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DJIFRProto::Standard::VirtualStickFlightControlData >(arena);
}
template<> PROTOBUF_NOINLINE ::DJIFRProto::Standard::FlightControllerState*
Arena::CreateMaybeMessage< ::DJIFRProto::Standard::FlightControllerState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DJIFRProto::Standard::FlightControllerState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
