// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FRFrameTimeModelProto.proto

#include "FRFrameTimeModelProto.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace DJIFRProto {
namespace Standard {
PROTOBUF_CONSTEXPR FrameTimeState_GimbalsStateEntry_DoNotUse::FrameTimeState_GimbalsStateEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct FrameTimeState_GimbalsStateEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameTimeState_GimbalsStateEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameTimeState_GimbalsStateEntry_DoNotUseDefaultTypeInternal() {}
  union {
    FrameTimeState_GimbalsStateEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameTimeState_GimbalsStateEntry_DoNotUseDefaultTypeInternal _FrameTimeState_GimbalsStateEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR FrameTimeState_CamerasStateEntry_DoNotUse::FrameTimeState_CamerasStateEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct FrameTimeState_CamerasStateEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameTimeState_CamerasStateEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameTimeState_CamerasStateEntry_DoNotUseDefaultTypeInternal() {}
  union {
    FrameTimeState_CamerasStateEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameTimeState_CamerasStateEntry_DoNotUseDefaultTypeInternal _FrameTimeState_CamerasStateEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR FrameTimeState_BatteriesStateEntry_DoNotUse::FrameTimeState_BatteriesStateEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct FrameTimeState_BatteriesStateEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameTimeState_BatteriesStateEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameTimeState_BatteriesStateEntry_DoNotUseDefaultTypeInternal() {}
  union {
    FrameTimeState_BatteriesStateEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameTimeState_BatteriesStateEntry_DoNotUseDefaultTypeInternal _FrameTimeState_BatteriesStateEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR FrameTimeState::FrameTimeState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gimbalsstate_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.camerasstate_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.batteriesstate_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.flightcontrollerstate_)*/nullptr
  , /*decltype(_impl_.camerastate_)*/nullptr
  , /*decltype(_impl_.gimbalstate_)*/nullptr
  , /*decltype(_impl_.rchardwarestate_)*/nullptr
  , /*decltype(_impl_.batterystate_)*/nullptr
  , /*decltype(_impl_.mobileremotecontroller_)*/nullptr
  , /*decltype(_impl_.airlinkstate_)*/nullptr
  , /*decltype(_impl_.gobusinessdata_)*/nullptr
  , /*decltype(_impl_.mobiledevicestate_)*/nullptr
  , /*decltype(_impl_.visionstate_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FrameTimeStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameTimeStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameTimeStateDefaultTypeInternal() {}
  union {
    FrameTimeState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameTimeStateDefaultTypeInternal _FrameTimeState_default_instance_;
PROTOBUF_CONSTEXPR FrameTimeStates::FrameTimeStates(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.frametimestates_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FrameTimeStatesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameTimeStatesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameTimeStatesDefaultTypeInternal() {}
  union {
    FrameTimeStates _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameTimeStatesDefaultTypeInternal _FrameTimeStates_default_instance_;
}  // namespace Standard
}  // namespace DJIFRProto
static ::_pb::Metadata file_level_metadata_FRFrameTimeModelProto_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_FRFrameTimeModelProto_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_FRFrameTimeModelProto_2eproto = nullptr;

const uint32_t TableStruct_FRFrameTimeModelProto_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState_GimbalsStateEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState_GimbalsStateEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState_GimbalsStateEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState_GimbalsStateEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState_CamerasStateEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState_CamerasStateEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState_CamerasStateEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState_CamerasStateEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState_BatteriesStateEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState_BatteriesStateEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState_BatteriesStateEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState_BatteriesStateEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState, _impl_.flightcontrollerstate_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState, _impl_.camerastate_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState, _impl_.gimbalstate_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState, _impl_.rchardwarestate_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState, _impl_.batterystate_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState, _impl_.mobileremotecontroller_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState, _impl_.airlinkstate_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState, _impl_.gobusinessdata_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState, _impl_.mobiledevicestate_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState, _impl_.visionstate_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState, _impl_.gimbalsstate_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState, _impl_.camerasstate_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeState, _impl_.batteriesstate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeStates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::FrameTimeStates, _impl_.frametimestates_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::DJIFRProto::Standard::FrameTimeState_GimbalsStateEntry_DoNotUse)},
  { 10, 18, -1, sizeof(::DJIFRProto::Standard::FrameTimeState_CamerasStateEntry_DoNotUse)},
  { 20, 28, -1, sizeof(::DJIFRProto::Standard::FrameTimeState_BatteriesStateEntry_DoNotUse)},
  { 30, -1, -1, sizeof(::DJIFRProto::Standard::FrameTimeState)},
  { 49, -1, -1, sizeof(::DJIFRProto::Standard::FrameTimeStates)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::DJIFRProto::Standard::_FrameTimeState_GimbalsStateEntry_DoNotUse_default_instance_._instance,
  &::DJIFRProto::Standard::_FrameTimeState_CamerasStateEntry_DoNotUse_default_instance_._instance,
  &::DJIFRProto::Standard::_FrameTimeState_BatteriesStateEntry_DoNotUse_default_instance_._instance,
  &::DJIFRProto::Standard::_FrameTimeState_default_instance_._instance,
  &::DJIFRProto::Standard::_FrameTimeStates_default_instance_._instance,
};

const char descriptor_table_protodef_FRFrameTimeModelProto_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033FRFrameTimeModelProto.proto\022\023DJIFRProt"
  "o.Standard\032\030FRCameraStateProto.proto\032\"FR"
  "FlightControllerModelProto.proto\032\030FRGimb"
  "alModelProto.proto\032\032FRMobileRCModelProto"
  ".proto\032\024FRRCModelProto.proto\032\031FRBatteryS"
  "tateProto.proto\032\rAirLink.proto\032\024GOBusine"
  "ssData.proto\032\027MobileDeviceState.proto\032\030F"
  "RVisionModelProto.proto\"\366\010\n\016FrameTimeSta"
  "te\022I\n\025flightControllerState\030\001 \001(\0132*.DJIF"
  "RProto.Standard.FlightControllerState\0225\n"
  "\013cameraState\030\002 \001(\0132 .DJIFRProto.Standard"
  ".CameraState\0225\n\013gimbalState\030\003 \001(\0132 .DJIF"
  "RProto.Standard.GimbalState\022=\n\017rcHardwar"
  "eState\030\004 \001(\0132$.DJIFRProto.Standard.RCHar"
  "dwareState\0227\n\014batteryState\030\005 \001(\0132!.DJIFR"
  "Proto.Standard.BatteryState\022P\n\026mobileRem"
  "oteController\030\006 \001(\01320.DJIFRProto.Standar"
  "d.MobileRemoteControllerState\0227\n\014airLink"
  "State\030\010 \001(\0132!.DJIFRProto.Standard.AirLin"
  "kState\022;\n\016goBusinessData\030\t \001(\0132#.DJIFRPr"
  "oto.Standard.GOBusinessData\022A\n\021mobileDev"
  "iceState\030\n \001(\0132&.DJIFRProto.Standard.Mob"
  "ileDeviceState\0225\n\013visionState\030\013 \001(\0132 .DJ"
  "IFRProto.Standard.VisionState\022K\n\014gimbals"
  "State\030\014 \003(\01325.DJIFRProto.Standard.FrameT"
  "imeState.GimbalsStateEntry\022K\n\014camerasSta"
  "te\030\r \003(\01325.DJIFRProto.Standard.FrameTime"
  "State.CamerasStateEntry\022O\n\016batteriesStat"
  "e\030\016 \003(\01327.DJIFRProto.Standard.FrameTimeS"
  "tate.BatteriesStateEntry\032U\n\021GimbalsState"
  "Entry\022\013\n\003key\030\001 \001(\005\022/\n\005value\030\002 \001(\0132 .DJIF"
  "RProto.Standard.GimbalState:\0028\001\032U\n\021Camer"
  "asStateEntry\022\013\n\003key\030\001 \001(\005\022/\n\005value\030\002 \001(\013"
  "2 .DJIFRProto.Standard.CameraState:\0028\001\032X"
  "\n\023BatteriesStateEntry\022\013\n\003key\030\001 \001(\005\0220\n\005va"
  "lue\030\002 \001(\0132!.DJIFRProto.Standard.BatteryS"
  "tate:\0028\001\"O\n\017FrameTimeStates\022<\n\017frameTime"
  "States\030\001 \003(\0132#.DJIFRProto.Standard.Frame"
  "TimeStateB\r\242\002\nDJIFRProtob\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_FRFrameTimeModelProto_2eproto_deps[10] = {
  &::descriptor_table_AirLink_2eproto,
  &::descriptor_table_FRBatteryStateProto_2eproto,
  &::descriptor_table_FRCameraStateProto_2eproto,
  &::descriptor_table_FRFlightControllerModelProto_2eproto,
  &::descriptor_table_FRGimbalModelProto_2eproto,
  &::descriptor_table_FRMobileRCModelProto_2eproto,
  &::descriptor_table_FRRCModelProto_2eproto,
  &::descriptor_table_FRVisionModelProto_2eproto,
  &::descriptor_table_GOBusinessData_2eproto,
  &::descriptor_table_MobileDeviceState_2eproto,
};
static ::_pbi::once_flag descriptor_table_FRFrameTimeModelProto_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_FRFrameTimeModelProto_2eproto = {
    false, false, 1552, descriptor_table_protodef_FRFrameTimeModelProto_2eproto,
    "FRFrameTimeModelProto.proto",
    &descriptor_table_FRFrameTimeModelProto_2eproto_once, descriptor_table_FRFrameTimeModelProto_2eproto_deps, 10, 5,
    schemas, file_default_instances, TableStruct_FRFrameTimeModelProto_2eproto::offsets,
    file_level_metadata_FRFrameTimeModelProto_2eproto, file_level_enum_descriptors_FRFrameTimeModelProto_2eproto,
    file_level_service_descriptors_FRFrameTimeModelProto_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_FRFrameTimeModelProto_2eproto_getter() {
  return &descriptor_table_FRFrameTimeModelProto_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_FRFrameTimeModelProto_2eproto(&descriptor_table_FRFrameTimeModelProto_2eproto);
namespace DJIFRProto {
namespace Standard {

// ===================================================================

FrameTimeState_GimbalsStateEntry_DoNotUse::FrameTimeState_GimbalsStateEntry_DoNotUse() {}
FrameTimeState_GimbalsStateEntry_DoNotUse::FrameTimeState_GimbalsStateEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FrameTimeState_GimbalsStateEntry_DoNotUse::MergeFrom(const FrameTimeState_GimbalsStateEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata FrameTimeState_GimbalsStateEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FRFrameTimeModelProto_2eproto_getter, &descriptor_table_FRFrameTimeModelProto_2eproto_once,
      file_level_metadata_FRFrameTimeModelProto_2eproto[0]);
}

// ===================================================================

FrameTimeState_CamerasStateEntry_DoNotUse::FrameTimeState_CamerasStateEntry_DoNotUse() {}
FrameTimeState_CamerasStateEntry_DoNotUse::FrameTimeState_CamerasStateEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FrameTimeState_CamerasStateEntry_DoNotUse::MergeFrom(const FrameTimeState_CamerasStateEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata FrameTimeState_CamerasStateEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FRFrameTimeModelProto_2eproto_getter, &descriptor_table_FRFrameTimeModelProto_2eproto_once,
      file_level_metadata_FRFrameTimeModelProto_2eproto[1]);
}

// ===================================================================

FrameTimeState_BatteriesStateEntry_DoNotUse::FrameTimeState_BatteriesStateEntry_DoNotUse() {}
FrameTimeState_BatteriesStateEntry_DoNotUse::FrameTimeState_BatteriesStateEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FrameTimeState_BatteriesStateEntry_DoNotUse::MergeFrom(const FrameTimeState_BatteriesStateEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata FrameTimeState_BatteriesStateEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FRFrameTimeModelProto_2eproto_getter, &descriptor_table_FRFrameTimeModelProto_2eproto_once,
      file_level_metadata_FRFrameTimeModelProto_2eproto[2]);
}

// ===================================================================

class FrameTimeState::_Internal {
 public:
  static const ::DJIFRProto::Standard::FlightControllerState& flightcontrollerstate(const FrameTimeState* msg);
  static const ::DJIFRProto::Standard::CameraState& camerastate(const FrameTimeState* msg);
  static const ::DJIFRProto::Standard::GimbalState& gimbalstate(const FrameTimeState* msg);
  static const ::DJIFRProto::Standard::RCHardwareState& rchardwarestate(const FrameTimeState* msg);
  static const ::DJIFRProto::Standard::BatteryState& batterystate(const FrameTimeState* msg);
  static const ::DJIFRProto::Standard::MobileRemoteControllerState& mobileremotecontroller(const FrameTimeState* msg);
  static const ::DJIFRProto::Standard::AirLinkState& airlinkstate(const FrameTimeState* msg);
  static const ::DJIFRProto::Standard::GOBusinessData& gobusinessdata(const FrameTimeState* msg);
  static const ::DJIFRProto::Standard::MobileDeviceState& mobiledevicestate(const FrameTimeState* msg);
  static const ::DJIFRProto::Standard::VisionState& visionstate(const FrameTimeState* msg);
};

const ::DJIFRProto::Standard::FlightControllerState&
FrameTimeState::_Internal::flightcontrollerstate(const FrameTimeState* msg) {
  return *msg->_impl_.flightcontrollerstate_;
}
const ::DJIFRProto::Standard::CameraState&
FrameTimeState::_Internal::camerastate(const FrameTimeState* msg) {
  return *msg->_impl_.camerastate_;
}
const ::DJIFRProto::Standard::GimbalState&
FrameTimeState::_Internal::gimbalstate(const FrameTimeState* msg) {
  return *msg->_impl_.gimbalstate_;
}
const ::DJIFRProto::Standard::RCHardwareState&
FrameTimeState::_Internal::rchardwarestate(const FrameTimeState* msg) {
  return *msg->_impl_.rchardwarestate_;
}
const ::DJIFRProto::Standard::BatteryState&
FrameTimeState::_Internal::batterystate(const FrameTimeState* msg) {
  return *msg->_impl_.batterystate_;
}
const ::DJIFRProto::Standard::MobileRemoteControllerState&
FrameTimeState::_Internal::mobileremotecontroller(const FrameTimeState* msg) {
  return *msg->_impl_.mobileremotecontroller_;
}
const ::DJIFRProto::Standard::AirLinkState&
FrameTimeState::_Internal::airlinkstate(const FrameTimeState* msg) {
  return *msg->_impl_.airlinkstate_;
}
const ::DJIFRProto::Standard::GOBusinessData&
FrameTimeState::_Internal::gobusinessdata(const FrameTimeState* msg) {
  return *msg->_impl_.gobusinessdata_;
}
const ::DJIFRProto::Standard::MobileDeviceState&
FrameTimeState::_Internal::mobiledevicestate(const FrameTimeState* msg) {
  return *msg->_impl_.mobiledevicestate_;
}
const ::DJIFRProto::Standard::VisionState&
FrameTimeState::_Internal::visionstate(const FrameTimeState* msg) {
  return *msg->_impl_.visionstate_;
}
void FrameTimeState::clear_flightcontrollerstate() {
  if (GetArenaForAllocation() == nullptr && _impl_.flightcontrollerstate_ != nullptr) {
    delete _impl_.flightcontrollerstate_;
  }
  _impl_.flightcontrollerstate_ = nullptr;
}
void FrameTimeState::clear_camerastate() {
  if (GetArenaForAllocation() == nullptr && _impl_.camerastate_ != nullptr) {
    delete _impl_.camerastate_;
  }
  _impl_.camerastate_ = nullptr;
}
void FrameTimeState::clear_gimbalstate() {
  if (GetArenaForAllocation() == nullptr && _impl_.gimbalstate_ != nullptr) {
    delete _impl_.gimbalstate_;
  }
  _impl_.gimbalstate_ = nullptr;
}
void FrameTimeState::clear_rchardwarestate() {
  if (GetArenaForAllocation() == nullptr && _impl_.rchardwarestate_ != nullptr) {
    delete _impl_.rchardwarestate_;
  }
  _impl_.rchardwarestate_ = nullptr;
}
void FrameTimeState::clear_batterystate() {
  if (GetArenaForAllocation() == nullptr && _impl_.batterystate_ != nullptr) {
    delete _impl_.batterystate_;
  }
  _impl_.batterystate_ = nullptr;
}
void FrameTimeState::clear_mobileremotecontroller() {
  if (GetArenaForAllocation() == nullptr && _impl_.mobileremotecontroller_ != nullptr) {
    delete _impl_.mobileremotecontroller_;
  }
  _impl_.mobileremotecontroller_ = nullptr;
}
void FrameTimeState::clear_airlinkstate() {
  if (GetArenaForAllocation() == nullptr && _impl_.airlinkstate_ != nullptr) {
    delete _impl_.airlinkstate_;
  }
  _impl_.airlinkstate_ = nullptr;
}
void FrameTimeState::clear_gobusinessdata() {
  if (GetArenaForAllocation() == nullptr && _impl_.gobusinessdata_ != nullptr) {
    delete _impl_.gobusinessdata_;
  }
  _impl_.gobusinessdata_ = nullptr;
}
void FrameTimeState::clear_mobiledevicestate() {
  if (GetArenaForAllocation() == nullptr && _impl_.mobiledevicestate_ != nullptr) {
    delete _impl_.mobiledevicestate_;
  }
  _impl_.mobiledevicestate_ = nullptr;
}
void FrameTimeState::clear_visionstate() {
  if (GetArenaForAllocation() == nullptr && _impl_.visionstate_ != nullptr) {
    delete _impl_.visionstate_;
  }
  _impl_.visionstate_ = nullptr;
}
void FrameTimeState::clear_gimbalsstate() {
  _impl_.gimbalsstate_.Clear();
}
void FrameTimeState::clear_camerasstate() {
  _impl_.camerasstate_.Clear();
}
void FrameTimeState::clear_batteriesstate() {
  _impl_.batteriesstate_.Clear();
}
FrameTimeState::FrameTimeState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &FrameTimeState::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:DJIFRProto.Standard.FrameTimeState)
}
FrameTimeState::FrameTimeState(const FrameTimeState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FrameTimeState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.gimbalsstate_)*/{}
    , /*decltype(_impl_.camerasstate_)*/{}
    , /*decltype(_impl_.batteriesstate_)*/{}
    , decltype(_impl_.flightcontrollerstate_){nullptr}
    , decltype(_impl_.camerastate_){nullptr}
    , decltype(_impl_.gimbalstate_){nullptr}
    , decltype(_impl_.rchardwarestate_){nullptr}
    , decltype(_impl_.batterystate_){nullptr}
    , decltype(_impl_.mobileremotecontroller_){nullptr}
    , decltype(_impl_.airlinkstate_){nullptr}
    , decltype(_impl_.gobusinessdata_){nullptr}
    , decltype(_impl_.mobiledevicestate_){nullptr}
    , decltype(_impl_.visionstate_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.gimbalsstate_.MergeFrom(from._impl_.gimbalsstate_);
  _this->_impl_.camerasstate_.MergeFrom(from._impl_.camerasstate_);
  _this->_impl_.batteriesstate_.MergeFrom(from._impl_.batteriesstate_);
  if (from._internal_has_flightcontrollerstate()) {
    _this->_impl_.flightcontrollerstate_ = new ::DJIFRProto::Standard::FlightControllerState(*from._impl_.flightcontrollerstate_);
  }
  if (from._internal_has_camerastate()) {
    _this->_impl_.camerastate_ = new ::DJIFRProto::Standard::CameraState(*from._impl_.camerastate_);
  }
  if (from._internal_has_gimbalstate()) {
    _this->_impl_.gimbalstate_ = new ::DJIFRProto::Standard::GimbalState(*from._impl_.gimbalstate_);
  }
  if (from._internal_has_rchardwarestate()) {
    _this->_impl_.rchardwarestate_ = new ::DJIFRProto::Standard::RCHardwareState(*from._impl_.rchardwarestate_);
  }
  if (from._internal_has_batterystate()) {
    _this->_impl_.batterystate_ = new ::DJIFRProto::Standard::BatteryState(*from._impl_.batterystate_);
  }
  if (from._internal_has_mobileremotecontroller()) {
    _this->_impl_.mobileremotecontroller_ = new ::DJIFRProto::Standard::MobileRemoteControllerState(*from._impl_.mobileremotecontroller_);
  }
  if (from._internal_has_airlinkstate()) {
    _this->_impl_.airlinkstate_ = new ::DJIFRProto::Standard::AirLinkState(*from._impl_.airlinkstate_);
  }
  if (from._internal_has_gobusinessdata()) {
    _this->_impl_.gobusinessdata_ = new ::DJIFRProto::Standard::GOBusinessData(*from._impl_.gobusinessdata_);
  }
  if (from._internal_has_mobiledevicestate()) {
    _this->_impl_.mobiledevicestate_ = new ::DJIFRProto::Standard::MobileDeviceState(*from._impl_.mobiledevicestate_);
  }
  if (from._internal_has_visionstate()) {
    _this->_impl_.visionstate_ = new ::DJIFRProto::Standard::VisionState(*from._impl_.visionstate_);
  }
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.FrameTimeState)
}

inline void FrameTimeState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.gimbalsstate_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.camerasstate_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.batteriesstate_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.flightcontrollerstate_){nullptr}
    , decltype(_impl_.camerastate_){nullptr}
    , decltype(_impl_.gimbalstate_){nullptr}
    , decltype(_impl_.rchardwarestate_){nullptr}
    , decltype(_impl_.batterystate_){nullptr}
    , decltype(_impl_.mobileremotecontroller_){nullptr}
    , decltype(_impl_.airlinkstate_){nullptr}
    , decltype(_impl_.gobusinessdata_){nullptr}
    , decltype(_impl_.mobiledevicestate_){nullptr}
    , decltype(_impl_.visionstate_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FrameTimeState::~FrameTimeState() {
  // @@protoc_insertion_point(destructor:DJIFRProto.Standard.FrameTimeState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void FrameTimeState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.gimbalsstate_.Destruct();
  _impl_.gimbalsstate_.~MapField();
  _impl_.camerasstate_.Destruct();
  _impl_.camerasstate_.~MapField();
  _impl_.batteriesstate_.Destruct();
  _impl_.batteriesstate_.~MapField();
  if (this != internal_default_instance()) delete _impl_.flightcontrollerstate_;
  if (this != internal_default_instance()) delete _impl_.camerastate_;
  if (this != internal_default_instance()) delete _impl_.gimbalstate_;
  if (this != internal_default_instance()) delete _impl_.rchardwarestate_;
  if (this != internal_default_instance()) delete _impl_.batterystate_;
  if (this != internal_default_instance()) delete _impl_.mobileremotecontroller_;
  if (this != internal_default_instance()) delete _impl_.airlinkstate_;
  if (this != internal_default_instance()) delete _impl_.gobusinessdata_;
  if (this != internal_default_instance()) delete _impl_.mobiledevicestate_;
  if (this != internal_default_instance()) delete _impl_.visionstate_;
}

void FrameTimeState::ArenaDtor(void* object) {
  FrameTimeState* _this = reinterpret_cast< FrameTimeState* >(object);
  _this->_impl_.gimbalsstate_.Destruct();
  _this->_impl_.camerasstate_.Destruct();
  _this->_impl_.batteriesstate_.Destruct();
}
void FrameTimeState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FrameTimeState::Clear() {
// @@protoc_insertion_point(message_clear_start:DJIFRProto.Standard.FrameTimeState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gimbalsstate_.Clear();
  _impl_.camerasstate_.Clear();
  _impl_.batteriesstate_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.flightcontrollerstate_ != nullptr) {
    delete _impl_.flightcontrollerstate_;
  }
  _impl_.flightcontrollerstate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.camerastate_ != nullptr) {
    delete _impl_.camerastate_;
  }
  _impl_.camerastate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.gimbalstate_ != nullptr) {
    delete _impl_.gimbalstate_;
  }
  _impl_.gimbalstate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rchardwarestate_ != nullptr) {
    delete _impl_.rchardwarestate_;
  }
  _impl_.rchardwarestate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.batterystate_ != nullptr) {
    delete _impl_.batterystate_;
  }
  _impl_.batterystate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mobileremotecontroller_ != nullptr) {
    delete _impl_.mobileremotecontroller_;
  }
  _impl_.mobileremotecontroller_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.airlinkstate_ != nullptr) {
    delete _impl_.airlinkstate_;
  }
  _impl_.airlinkstate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.gobusinessdata_ != nullptr) {
    delete _impl_.gobusinessdata_;
  }
  _impl_.gobusinessdata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mobiledevicestate_ != nullptr) {
    delete _impl_.mobiledevicestate_;
  }
  _impl_.mobiledevicestate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.visionstate_ != nullptr) {
    delete _impl_.visionstate_;
  }
  _impl_.visionstate_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrameTimeState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DJIFRProto.Standard.FlightControllerState flightControllerState = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_flightcontrollerstate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DJIFRProto.Standard.CameraState cameraState = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_camerastate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DJIFRProto.Standard.GimbalState gimbalState = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_gimbalstate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DJIFRProto.Standard.RCHardwareState rcHardwareState = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rchardwarestate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DJIFRProto.Standard.BatteryState batteryState = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_batterystate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DJIFRProto.Standard.MobileRemoteControllerState mobileRemoteController = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_mobileremotecontroller(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DJIFRProto.Standard.AirLinkState airLinkState = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_airlinkstate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DJIFRProto.Standard.GOBusinessData goBusinessData = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_gobusinessdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DJIFRProto.Standard.MobileDeviceState mobileDeviceState = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_mobiledevicestate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DJIFRProto.Standard.VisionState visionState = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_visionstate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<int32, .DJIFRProto.Standard.GimbalState> gimbalsState = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.gimbalsstate_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int32, .DJIFRProto.Standard.CameraState> camerasState = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.camerasstate_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int32, .DJIFRProto.Standard.BatteryState> batteriesState = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.batteriesstate_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FrameTimeState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DJIFRProto.Standard.FrameTimeState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DJIFRProto.Standard.FlightControllerState flightControllerState = 1;
  if (this->_internal_has_flightcontrollerstate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::flightcontrollerstate(this),
        _Internal::flightcontrollerstate(this).GetCachedSize(), target, stream);
  }

  // .DJIFRProto.Standard.CameraState cameraState = 2;
  if (this->_internal_has_camerastate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::camerastate(this),
        _Internal::camerastate(this).GetCachedSize(), target, stream);
  }

  // .DJIFRProto.Standard.GimbalState gimbalState = 3;
  if (this->_internal_has_gimbalstate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::gimbalstate(this),
        _Internal::gimbalstate(this).GetCachedSize(), target, stream);
  }

  // .DJIFRProto.Standard.RCHardwareState rcHardwareState = 4;
  if (this->_internal_has_rchardwarestate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::rchardwarestate(this),
        _Internal::rchardwarestate(this).GetCachedSize(), target, stream);
  }

  // .DJIFRProto.Standard.BatteryState batteryState = 5;
  if (this->_internal_has_batterystate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::batterystate(this),
        _Internal::batterystate(this).GetCachedSize(), target, stream);
  }

  // .DJIFRProto.Standard.MobileRemoteControllerState mobileRemoteController = 6;
  if (this->_internal_has_mobileremotecontroller()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::mobileremotecontroller(this),
        _Internal::mobileremotecontroller(this).GetCachedSize(), target, stream);
  }

  // .DJIFRProto.Standard.AirLinkState airLinkState = 8;
  if (this->_internal_has_airlinkstate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::airlinkstate(this),
        _Internal::airlinkstate(this).GetCachedSize(), target, stream);
  }

  // .DJIFRProto.Standard.GOBusinessData goBusinessData = 9;
  if (this->_internal_has_gobusinessdata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::gobusinessdata(this),
        _Internal::gobusinessdata(this).GetCachedSize(), target, stream);
  }

  // .DJIFRProto.Standard.MobileDeviceState mobileDeviceState = 10;
  if (this->_internal_has_mobiledevicestate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::mobiledevicestate(this),
        _Internal::mobiledevicestate(this).GetCachedSize(), target, stream);
  }

  // .DJIFRProto.Standard.VisionState visionState = 11;
  if (this->_internal_has_visionstate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::visionstate(this),
        _Internal::visionstate(this).GetCachedSize(), target, stream);
  }

  // map<int32, .DJIFRProto.Standard.GimbalState> gimbalsState = 12;
  if (!this->_internal_gimbalsstate().empty()) {
    using MapType = ::_pb::Map<int32_t, ::DJIFRProto::Standard::GimbalState>;
    using WireHelper = FrameTimeState_GimbalsStateEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_gimbalsstate();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(12, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(12, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<int32, .DJIFRProto.Standard.CameraState> camerasState = 13;
  if (!this->_internal_camerasstate().empty()) {
    using MapType = ::_pb::Map<int32_t, ::DJIFRProto::Standard::CameraState>;
    using WireHelper = FrameTimeState_CamerasStateEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_camerasstate();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(13, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(13, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<int32, .DJIFRProto.Standard.BatteryState> batteriesState = 14;
  if (!this->_internal_batteriesstate().empty()) {
    using MapType = ::_pb::Map<int32_t, ::DJIFRProto::Standard::BatteryState>;
    using WireHelper = FrameTimeState_BatteriesStateEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_batteriesstate();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(14, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(14, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DJIFRProto.Standard.FrameTimeState)
  return target;
}

size_t FrameTimeState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DJIFRProto.Standard.FrameTimeState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .DJIFRProto.Standard.GimbalState> gimbalsState = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_gimbalsstate_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::GimbalState >::const_iterator
      it = this->_internal_gimbalsstate().begin();
      it != this->_internal_gimbalsstate().end(); ++it) {
    total_size += FrameTimeState_GimbalsStateEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, .DJIFRProto.Standard.CameraState> camerasState = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_camerasstate_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::CameraState >::const_iterator
      it = this->_internal_camerasstate().begin();
      it != this->_internal_camerasstate().end(); ++it) {
    total_size += FrameTimeState_CamerasStateEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, .DJIFRProto.Standard.BatteryState> batteriesState = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_batteriesstate_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::BatteryState >::const_iterator
      it = this->_internal_batteriesstate().begin();
      it != this->_internal_batteriesstate().end(); ++it) {
    total_size += FrameTimeState_BatteriesStateEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .DJIFRProto.Standard.FlightControllerState flightControllerState = 1;
  if (this->_internal_has_flightcontrollerstate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.flightcontrollerstate_);
  }

  // .DJIFRProto.Standard.CameraState cameraState = 2;
  if (this->_internal_has_camerastate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.camerastate_);
  }

  // .DJIFRProto.Standard.GimbalState gimbalState = 3;
  if (this->_internal_has_gimbalstate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gimbalstate_);
  }

  // .DJIFRProto.Standard.RCHardwareState rcHardwareState = 4;
  if (this->_internal_has_rchardwarestate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rchardwarestate_);
  }

  // .DJIFRProto.Standard.BatteryState batteryState = 5;
  if (this->_internal_has_batterystate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.batterystate_);
  }

  // .DJIFRProto.Standard.MobileRemoteControllerState mobileRemoteController = 6;
  if (this->_internal_has_mobileremotecontroller()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mobileremotecontroller_);
  }

  // .DJIFRProto.Standard.AirLinkState airLinkState = 8;
  if (this->_internal_has_airlinkstate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.airlinkstate_);
  }

  // .DJIFRProto.Standard.GOBusinessData goBusinessData = 9;
  if (this->_internal_has_gobusinessdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gobusinessdata_);
  }

  // .DJIFRProto.Standard.MobileDeviceState mobileDeviceState = 10;
  if (this->_internal_has_mobiledevicestate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mobiledevicestate_);
  }

  // .DJIFRProto.Standard.VisionState visionState = 11;
  if (this->_internal_has_visionstate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.visionstate_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FrameTimeState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FrameTimeState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FrameTimeState::GetClassData() const { return &_class_data_; }


void FrameTimeState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FrameTimeState*>(&to_msg);
  auto& from = static_cast<const FrameTimeState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DJIFRProto.Standard.FrameTimeState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.gimbalsstate_.MergeFrom(from._impl_.gimbalsstate_);
  _this->_impl_.camerasstate_.MergeFrom(from._impl_.camerasstate_);
  _this->_impl_.batteriesstate_.MergeFrom(from._impl_.batteriesstate_);
  if (from._internal_has_flightcontrollerstate()) {
    _this->_internal_mutable_flightcontrollerstate()->::DJIFRProto::Standard::FlightControllerState::MergeFrom(
        from._internal_flightcontrollerstate());
  }
  if (from._internal_has_camerastate()) {
    _this->_internal_mutable_camerastate()->::DJIFRProto::Standard::CameraState::MergeFrom(
        from._internal_camerastate());
  }
  if (from._internal_has_gimbalstate()) {
    _this->_internal_mutable_gimbalstate()->::DJIFRProto::Standard::GimbalState::MergeFrom(
        from._internal_gimbalstate());
  }
  if (from._internal_has_rchardwarestate()) {
    _this->_internal_mutable_rchardwarestate()->::DJIFRProto::Standard::RCHardwareState::MergeFrom(
        from._internal_rchardwarestate());
  }
  if (from._internal_has_batterystate()) {
    _this->_internal_mutable_batterystate()->::DJIFRProto::Standard::BatteryState::MergeFrom(
        from._internal_batterystate());
  }
  if (from._internal_has_mobileremotecontroller()) {
    _this->_internal_mutable_mobileremotecontroller()->::DJIFRProto::Standard::MobileRemoteControllerState::MergeFrom(
        from._internal_mobileremotecontroller());
  }
  if (from._internal_has_airlinkstate()) {
    _this->_internal_mutable_airlinkstate()->::DJIFRProto::Standard::AirLinkState::MergeFrom(
        from._internal_airlinkstate());
  }
  if (from._internal_has_gobusinessdata()) {
    _this->_internal_mutable_gobusinessdata()->::DJIFRProto::Standard::GOBusinessData::MergeFrom(
        from._internal_gobusinessdata());
  }
  if (from._internal_has_mobiledevicestate()) {
    _this->_internal_mutable_mobiledevicestate()->::DJIFRProto::Standard::MobileDeviceState::MergeFrom(
        from._internal_mobiledevicestate());
  }
  if (from._internal_has_visionstate()) {
    _this->_internal_mutable_visionstate()->::DJIFRProto::Standard::VisionState::MergeFrom(
        from._internal_visionstate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FrameTimeState::CopyFrom(const FrameTimeState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DJIFRProto.Standard.FrameTimeState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameTimeState::IsInitialized() const {
  return true;
}

void FrameTimeState::InternalSwap(FrameTimeState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.gimbalsstate_.InternalSwap(&other->_impl_.gimbalsstate_);
  _impl_.camerasstate_.InternalSwap(&other->_impl_.camerasstate_);
  _impl_.batteriesstate_.InternalSwap(&other->_impl_.batteriesstate_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrameTimeState, _impl_.visionstate_)
      + sizeof(FrameTimeState::_impl_.visionstate_)
      - PROTOBUF_FIELD_OFFSET(FrameTimeState, _impl_.flightcontrollerstate_)>(
          reinterpret_cast<char*>(&_impl_.flightcontrollerstate_),
          reinterpret_cast<char*>(&other->_impl_.flightcontrollerstate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameTimeState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FRFrameTimeModelProto_2eproto_getter, &descriptor_table_FRFrameTimeModelProto_2eproto_once,
      file_level_metadata_FRFrameTimeModelProto_2eproto[3]);
}

// ===================================================================

class FrameTimeStates::_Internal {
 public:
};

FrameTimeStates::FrameTimeStates(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DJIFRProto.Standard.FrameTimeStates)
}
FrameTimeStates::FrameTimeStates(const FrameTimeStates& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FrameTimeStates* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.frametimestates_){from._impl_.frametimestates_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.FrameTimeStates)
}

inline void FrameTimeStates::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.frametimestates_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FrameTimeStates::~FrameTimeStates() {
  // @@protoc_insertion_point(destructor:DJIFRProto.Standard.FrameTimeStates)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FrameTimeStates::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.frametimestates_.~RepeatedPtrField();
}

void FrameTimeStates::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FrameTimeStates::Clear() {
// @@protoc_insertion_point(message_clear_start:DJIFRProto.Standard.FrameTimeStates)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.frametimestates_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrameTimeStates::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .DJIFRProto.Standard.FrameTimeState frameTimeStates = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_frametimestates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FrameTimeStates::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DJIFRProto.Standard.FrameTimeStates)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DJIFRProto.Standard.FrameTimeState frameTimeStates = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_frametimestates_size()); i < n; i++) {
    const auto& repfield = this->_internal_frametimestates(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DJIFRProto.Standard.FrameTimeStates)
  return target;
}

size_t FrameTimeStates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DJIFRProto.Standard.FrameTimeStates)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DJIFRProto.Standard.FrameTimeState frameTimeStates = 1;
  total_size += 1UL * this->_internal_frametimestates_size();
  for (const auto& msg : this->_impl_.frametimestates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FrameTimeStates::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FrameTimeStates::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FrameTimeStates::GetClassData() const { return &_class_data_; }


void FrameTimeStates::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FrameTimeStates*>(&to_msg);
  auto& from = static_cast<const FrameTimeStates&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DJIFRProto.Standard.FrameTimeStates)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.frametimestates_.MergeFrom(from._impl_.frametimestates_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FrameTimeStates::CopyFrom(const FrameTimeStates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DJIFRProto.Standard.FrameTimeStates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameTimeStates::IsInitialized() const {
  return true;
}

void FrameTimeStates::InternalSwap(FrameTimeStates* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.frametimestates_.InternalSwap(&other->_impl_.frametimestates_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameTimeStates::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FRFrameTimeModelProto_2eproto_getter, &descriptor_table_FRFrameTimeModelProto_2eproto_once,
      file_level_metadata_FRFrameTimeModelProto_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Standard
}  // namespace DJIFRProto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DJIFRProto::Standard::FrameTimeState_GimbalsStateEntry_DoNotUse*
Arena::CreateMaybeMessage< ::DJIFRProto::Standard::FrameTimeState_GimbalsStateEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DJIFRProto::Standard::FrameTimeState_GimbalsStateEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::DJIFRProto::Standard::FrameTimeState_CamerasStateEntry_DoNotUse*
Arena::CreateMaybeMessage< ::DJIFRProto::Standard::FrameTimeState_CamerasStateEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DJIFRProto::Standard::FrameTimeState_CamerasStateEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::DJIFRProto::Standard::FrameTimeState_BatteriesStateEntry_DoNotUse*
Arena::CreateMaybeMessage< ::DJIFRProto::Standard::FrameTimeState_BatteriesStateEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DJIFRProto::Standard::FrameTimeState_BatteriesStateEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::DJIFRProto::Standard::FrameTimeState*
Arena::CreateMaybeMessage< ::DJIFRProto::Standard::FrameTimeState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DJIFRProto::Standard::FrameTimeState >(arena);
}
template<> PROTOBUF_NOINLINE ::DJIFRProto::Standard::FrameTimeStates*
Arena::CreateMaybeMessage< ::DJIFRProto::Standard::FrameTimeStates >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DJIFRProto::Standard::FrameTimeStates >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
