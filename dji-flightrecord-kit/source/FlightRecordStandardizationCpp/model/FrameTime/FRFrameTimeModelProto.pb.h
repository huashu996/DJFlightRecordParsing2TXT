// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FRFrameTimeModelProto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_FRFrameTimeModelProto_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_FRFrameTimeModelProto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "FRCameraStateProto.pb.h"
#include "FRFlightControllerModelProto.pb.h"
#include "FRGimbalModelProto.pb.h"
#include "FRMobileRCModelProto.pb.h"
#include "FRRCModelProto.pb.h"
#include "FRBatteryStateProto.pb.h"
#include "AirLink.pb.h"
#include "GOBusinessData.pb.h"
#include "MobileDeviceState.pb.h"
#include "FRVisionModelProto.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_FRFrameTimeModelProto_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_FRFrameTimeModelProto_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_FRFrameTimeModelProto_2eproto;
namespace DJIFRProto {
namespace Standard {
class FrameTimeState;
struct FrameTimeStateDefaultTypeInternal;
extern FrameTimeStateDefaultTypeInternal _FrameTimeState_default_instance_;
class FrameTimeState_BatteriesStateEntry_DoNotUse;
struct FrameTimeState_BatteriesStateEntry_DoNotUseDefaultTypeInternal;
extern FrameTimeState_BatteriesStateEntry_DoNotUseDefaultTypeInternal _FrameTimeState_BatteriesStateEntry_DoNotUse_default_instance_;
class FrameTimeState_CamerasStateEntry_DoNotUse;
struct FrameTimeState_CamerasStateEntry_DoNotUseDefaultTypeInternal;
extern FrameTimeState_CamerasStateEntry_DoNotUseDefaultTypeInternal _FrameTimeState_CamerasStateEntry_DoNotUse_default_instance_;
class FrameTimeState_GimbalsStateEntry_DoNotUse;
struct FrameTimeState_GimbalsStateEntry_DoNotUseDefaultTypeInternal;
extern FrameTimeState_GimbalsStateEntry_DoNotUseDefaultTypeInternal _FrameTimeState_GimbalsStateEntry_DoNotUse_default_instance_;
class FrameTimeStates;
struct FrameTimeStatesDefaultTypeInternal;
extern FrameTimeStatesDefaultTypeInternal _FrameTimeStates_default_instance_;
}  // namespace Standard
}  // namespace DJIFRProto
PROTOBUF_NAMESPACE_OPEN
template<> ::DJIFRProto::Standard::FrameTimeState* Arena::CreateMaybeMessage<::DJIFRProto::Standard::FrameTimeState>(Arena*);
template<> ::DJIFRProto::Standard::FrameTimeState_BatteriesStateEntry_DoNotUse* Arena::CreateMaybeMessage<::DJIFRProto::Standard::FrameTimeState_BatteriesStateEntry_DoNotUse>(Arena*);
template<> ::DJIFRProto::Standard::FrameTimeState_CamerasStateEntry_DoNotUse* Arena::CreateMaybeMessage<::DJIFRProto::Standard::FrameTimeState_CamerasStateEntry_DoNotUse>(Arena*);
template<> ::DJIFRProto::Standard::FrameTimeState_GimbalsStateEntry_DoNotUse* Arena::CreateMaybeMessage<::DJIFRProto::Standard::FrameTimeState_GimbalsStateEntry_DoNotUse>(Arena*);
template<> ::DJIFRProto::Standard::FrameTimeStates* Arena::CreateMaybeMessage<::DJIFRProto::Standard::FrameTimeStates>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace DJIFRProto {
namespace Standard {

// ===================================================================

class FrameTimeState_GimbalsStateEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FrameTimeState_GimbalsStateEntry_DoNotUse, 
    int32_t, ::DJIFRProto::Standard::GimbalState,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FrameTimeState_GimbalsStateEntry_DoNotUse, 
    int32_t, ::DJIFRProto::Standard::GimbalState,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  FrameTimeState_GimbalsStateEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR FrameTimeState_GimbalsStateEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit FrameTimeState_GimbalsStateEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const FrameTimeState_GimbalsStateEntry_DoNotUse& other);
  static const FrameTimeState_GimbalsStateEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FrameTimeState_GimbalsStateEntry_DoNotUse*>(&_FrameTimeState_GimbalsStateEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_FRFrameTimeModelProto_2eproto;
};

// -------------------------------------------------------------------

class FrameTimeState_CamerasStateEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FrameTimeState_CamerasStateEntry_DoNotUse, 
    int32_t, ::DJIFRProto::Standard::CameraState,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FrameTimeState_CamerasStateEntry_DoNotUse, 
    int32_t, ::DJIFRProto::Standard::CameraState,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  FrameTimeState_CamerasStateEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR FrameTimeState_CamerasStateEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit FrameTimeState_CamerasStateEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const FrameTimeState_CamerasStateEntry_DoNotUse& other);
  static const FrameTimeState_CamerasStateEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FrameTimeState_CamerasStateEntry_DoNotUse*>(&_FrameTimeState_CamerasStateEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_FRFrameTimeModelProto_2eproto;
};

// -------------------------------------------------------------------

class FrameTimeState_BatteriesStateEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FrameTimeState_BatteriesStateEntry_DoNotUse, 
    int32_t, ::DJIFRProto::Standard::BatteryState,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FrameTimeState_BatteriesStateEntry_DoNotUse, 
    int32_t, ::DJIFRProto::Standard::BatteryState,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  FrameTimeState_BatteriesStateEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR FrameTimeState_BatteriesStateEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit FrameTimeState_BatteriesStateEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const FrameTimeState_BatteriesStateEntry_DoNotUse& other);
  static const FrameTimeState_BatteriesStateEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FrameTimeState_BatteriesStateEntry_DoNotUse*>(&_FrameTimeState_BatteriesStateEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_FRFrameTimeModelProto_2eproto;
};

// -------------------------------------------------------------------

class FrameTimeState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.FrameTimeState) */ {
 public:
  inline FrameTimeState() : FrameTimeState(nullptr) {}
  ~FrameTimeState() override;
  explicit PROTOBUF_CONSTEXPR FrameTimeState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrameTimeState(const FrameTimeState& from);
  FrameTimeState(FrameTimeState&& from) noexcept
    : FrameTimeState() {
    *this = ::std::move(from);
  }

  inline FrameTimeState& operator=(const FrameTimeState& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameTimeState& operator=(FrameTimeState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FrameTimeState& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrameTimeState* internal_default_instance() {
    return reinterpret_cast<const FrameTimeState*>(
               &_FrameTimeState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FrameTimeState& a, FrameTimeState& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameTimeState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameTimeState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FrameTimeState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FrameTimeState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FrameTimeState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FrameTimeState& from) {
    FrameTimeState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameTimeState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DJIFRProto.Standard.FrameTimeState";
  }
  protected:
  explicit FrameTimeState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kGimbalsStateFieldNumber = 12,
    kCamerasStateFieldNumber = 13,
    kBatteriesStateFieldNumber = 14,
    kFlightControllerStateFieldNumber = 1,
    kCameraStateFieldNumber = 2,
    kGimbalStateFieldNumber = 3,
    kRcHardwareStateFieldNumber = 4,
    kBatteryStateFieldNumber = 5,
    kMobileRemoteControllerFieldNumber = 6,
    kAirLinkStateFieldNumber = 8,
    kGoBusinessDataFieldNumber = 9,
    kMobileDeviceStateFieldNumber = 10,
    kVisionStateFieldNumber = 11,
  };
  // map<int32, .DJIFRProto.Standard.GimbalState> gimbalsState = 12;
  int gimbalsstate_size() const;
  private:
  int _internal_gimbalsstate_size() const;
  public:
  void clear_gimbalsstate();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::GimbalState >&
      _internal_gimbalsstate() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::GimbalState >*
      _internal_mutable_gimbalsstate();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::GimbalState >&
      gimbalsstate() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::GimbalState >*
      mutable_gimbalsstate();

  // map<int32, .DJIFRProto.Standard.CameraState> camerasState = 13;
  int camerasstate_size() const;
  private:
  int _internal_camerasstate_size() const;
  public:
  void clear_camerasstate();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::CameraState >&
      _internal_camerasstate() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::CameraState >*
      _internal_mutable_camerasstate();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::CameraState >&
      camerasstate() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::CameraState >*
      mutable_camerasstate();

  // map<int32, .DJIFRProto.Standard.BatteryState> batteriesState = 14;
  int batteriesstate_size() const;
  private:
  int _internal_batteriesstate_size() const;
  public:
  void clear_batteriesstate();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::BatteryState >&
      _internal_batteriesstate() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::BatteryState >*
      _internal_mutable_batteriesstate();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::BatteryState >&
      batteriesstate() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::BatteryState >*
      mutable_batteriesstate();

  // .DJIFRProto.Standard.FlightControllerState flightControllerState = 1;
  bool has_flightcontrollerstate() const;
  private:
  bool _internal_has_flightcontrollerstate() const;
  public:
  void clear_flightcontrollerstate();
  const ::DJIFRProto::Standard::FlightControllerState& flightcontrollerstate() const;
  PROTOBUF_NODISCARD ::DJIFRProto::Standard::FlightControllerState* release_flightcontrollerstate();
  ::DJIFRProto::Standard::FlightControllerState* mutable_flightcontrollerstate();
  void set_allocated_flightcontrollerstate(::DJIFRProto::Standard::FlightControllerState* flightcontrollerstate);
  private:
  const ::DJIFRProto::Standard::FlightControllerState& _internal_flightcontrollerstate() const;
  ::DJIFRProto::Standard::FlightControllerState* _internal_mutable_flightcontrollerstate();
  public:
  void unsafe_arena_set_allocated_flightcontrollerstate(
      ::DJIFRProto::Standard::FlightControllerState* flightcontrollerstate);
  ::DJIFRProto::Standard::FlightControllerState* unsafe_arena_release_flightcontrollerstate();

  // .DJIFRProto.Standard.CameraState cameraState = 2;
  bool has_camerastate() const;
  private:
  bool _internal_has_camerastate() const;
  public:
  void clear_camerastate();
  const ::DJIFRProto::Standard::CameraState& camerastate() const;
  PROTOBUF_NODISCARD ::DJIFRProto::Standard::CameraState* release_camerastate();
  ::DJIFRProto::Standard::CameraState* mutable_camerastate();
  void set_allocated_camerastate(::DJIFRProto::Standard::CameraState* camerastate);
  private:
  const ::DJIFRProto::Standard::CameraState& _internal_camerastate() const;
  ::DJIFRProto::Standard::CameraState* _internal_mutable_camerastate();
  public:
  void unsafe_arena_set_allocated_camerastate(
      ::DJIFRProto::Standard::CameraState* camerastate);
  ::DJIFRProto::Standard::CameraState* unsafe_arena_release_camerastate();

  // .DJIFRProto.Standard.GimbalState gimbalState = 3;
  bool has_gimbalstate() const;
  private:
  bool _internal_has_gimbalstate() const;
  public:
  void clear_gimbalstate();
  const ::DJIFRProto::Standard::GimbalState& gimbalstate() const;
  PROTOBUF_NODISCARD ::DJIFRProto::Standard::GimbalState* release_gimbalstate();
  ::DJIFRProto::Standard::GimbalState* mutable_gimbalstate();
  void set_allocated_gimbalstate(::DJIFRProto::Standard::GimbalState* gimbalstate);
  private:
  const ::DJIFRProto::Standard::GimbalState& _internal_gimbalstate() const;
  ::DJIFRProto::Standard::GimbalState* _internal_mutable_gimbalstate();
  public:
  void unsafe_arena_set_allocated_gimbalstate(
      ::DJIFRProto::Standard::GimbalState* gimbalstate);
  ::DJIFRProto::Standard::GimbalState* unsafe_arena_release_gimbalstate();

  // .DJIFRProto.Standard.RCHardwareState rcHardwareState = 4;
  bool has_rchardwarestate() const;
  private:
  bool _internal_has_rchardwarestate() const;
  public:
  void clear_rchardwarestate();
  const ::DJIFRProto::Standard::RCHardwareState& rchardwarestate() const;
  PROTOBUF_NODISCARD ::DJIFRProto::Standard::RCHardwareState* release_rchardwarestate();
  ::DJIFRProto::Standard::RCHardwareState* mutable_rchardwarestate();
  void set_allocated_rchardwarestate(::DJIFRProto::Standard::RCHardwareState* rchardwarestate);
  private:
  const ::DJIFRProto::Standard::RCHardwareState& _internal_rchardwarestate() const;
  ::DJIFRProto::Standard::RCHardwareState* _internal_mutable_rchardwarestate();
  public:
  void unsafe_arena_set_allocated_rchardwarestate(
      ::DJIFRProto::Standard::RCHardwareState* rchardwarestate);
  ::DJIFRProto::Standard::RCHardwareState* unsafe_arena_release_rchardwarestate();

  // .DJIFRProto.Standard.BatteryState batteryState = 5;
  bool has_batterystate() const;
  private:
  bool _internal_has_batterystate() const;
  public:
  void clear_batterystate();
  const ::DJIFRProto::Standard::BatteryState& batterystate() const;
  PROTOBUF_NODISCARD ::DJIFRProto::Standard::BatteryState* release_batterystate();
  ::DJIFRProto::Standard::BatteryState* mutable_batterystate();
  void set_allocated_batterystate(::DJIFRProto::Standard::BatteryState* batterystate);
  private:
  const ::DJIFRProto::Standard::BatteryState& _internal_batterystate() const;
  ::DJIFRProto::Standard::BatteryState* _internal_mutable_batterystate();
  public:
  void unsafe_arena_set_allocated_batterystate(
      ::DJIFRProto::Standard::BatteryState* batterystate);
  ::DJIFRProto::Standard::BatteryState* unsafe_arena_release_batterystate();

  // .DJIFRProto.Standard.MobileRemoteControllerState mobileRemoteController = 6;
  bool has_mobileremotecontroller() const;
  private:
  bool _internal_has_mobileremotecontroller() const;
  public:
  void clear_mobileremotecontroller();
  const ::DJIFRProto::Standard::MobileRemoteControllerState& mobileremotecontroller() const;
  PROTOBUF_NODISCARD ::DJIFRProto::Standard::MobileRemoteControllerState* release_mobileremotecontroller();
  ::DJIFRProto::Standard::MobileRemoteControllerState* mutable_mobileremotecontroller();
  void set_allocated_mobileremotecontroller(::DJIFRProto::Standard::MobileRemoteControllerState* mobileremotecontroller);
  private:
  const ::DJIFRProto::Standard::MobileRemoteControllerState& _internal_mobileremotecontroller() const;
  ::DJIFRProto::Standard::MobileRemoteControllerState* _internal_mutable_mobileremotecontroller();
  public:
  void unsafe_arena_set_allocated_mobileremotecontroller(
      ::DJIFRProto::Standard::MobileRemoteControllerState* mobileremotecontroller);
  ::DJIFRProto::Standard::MobileRemoteControllerState* unsafe_arena_release_mobileremotecontroller();

  // .DJIFRProto.Standard.AirLinkState airLinkState = 8;
  bool has_airlinkstate() const;
  private:
  bool _internal_has_airlinkstate() const;
  public:
  void clear_airlinkstate();
  const ::DJIFRProto::Standard::AirLinkState& airlinkstate() const;
  PROTOBUF_NODISCARD ::DJIFRProto::Standard::AirLinkState* release_airlinkstate();
  ::DJIFRProto::Standard::AirLinkState* mutable_airlinkstate();
  void set_allocated_airlinkstate(::DJIFRProto::Standard::AirLinkState* airlinkstate);
  private:
  const ::DJIFRProto::Standard::AirLinkState& _internal_airlinkstate() const;
  ::DJIFRProto::Standard::AirLinkState* _internal_mutable_airlinkstate();
  public:
  void unsafe_arena_set_allocated_airlinkstate(
      ::DJIFRProto::Standard::AirLinkState* airlinkstate);
  ::DJIFRProto::Standard::AirLinkState* unsafe_arena_release_airlinkstate();

  // .DJIFRProto.Standard.GOBusinessData goBusinessData = 9;
  bool has_gobusinessdata() const;
  private:
  bool _internal_has_gobusinessdata() const;
  public:
  void clear_gobusinessdata();
  const ::DJIFRProto::Standard::GOBusinessData& gobusinessdata() const;
  PROTOBUF_NODISCARD ::DJIFRProto::Standard::GOBusinessData* release_gobusinessdata();
  ::DJIFRProto::Standard::GOBusinessData* mutable_gobusinessdata();
  void set_allocated_gobusinessdata(::DJIFRProto::Standard::GOBusinessData* gobusinessdata);
  private:
  const ::DJIFRProto::Standard::GOBusinessData& _internal_gobusinessdata() const;
  ::DJIFRProto::Standard::GOBusinessData* _internal_mutable_gobusinessdata();
  public:
  void unsafe_arena_set_allocated_gobusinessdata(
      ::DJIFRProto::Standard::GOBusinessData* gobusinessdata);
  ::DJIFRProto::Standard::GOBusinessData* unsafe_arena_release_gobusinessdata();

  // .DJIFRProto.Standard.MobileDeviceState mobileDeviceState = 10;
  bool has_mobiledevicestate() const;
  private:
  bool _internal_has_mobiledevicestate() const;
  public:
  void clear_mobiledevicestate();
  const ::DJIFRProto::Standard::MobileDeviceState& mobiledevicestate() const;
  PROTOBUF_NODISCARD ::DJIFRProto::Standard::MobileDeviceState* release_mobiledevicestate();
  ::DJIFRProto::Standard::MobileDeviceState* mutable_mobiledevicestate();
  void set_allocated_mobiledevicestate(::DJIFRProto::Standard::MobileDeviceState* mobiledevicestate);
  private:
  const ::DJIFRProto::Standard::MobileDeviceState& _internal_mobiledevicestate() const;
  ::DJIFRProto::Standard::MobileDeviceState* _internal_mutable_mobiledevicestate();
  public:
  void unsafe_arena_set_allocated_mobiledevicestate(
      ::DJIFRProto::Standard::MobileDeviceState* mobiledevicestate);
  ::DJIFRProto::Standard::MobileDeviceState* unsafe_arena_release_mobiledevicestate();

  // .DJIFRProto.Standard.VisionState visionState = 11;
  bool has_visionstate() const;
  private:
  bool _internal_has_visionstate() const;
  public:
  void clear_visionstate();
  const ::DJIFRProto::Standard::VisionState& visionstate() const;
  PROTOBUF_NODISCARD ::DJIFRProto::Standard::VisionState* release_visionstate();
  ::DJIFRProto::Standard::VisionState* mutable_visionstate();
  void set_allocated_visionstate(::DJIFRProto::Standard::VisionState* visionstate);
  private:
  const ::DJIFRProto::Standard::VisionState& _internal_visionstate() const;
  ::DJIFRProto::Standard::VisionState* _internal_mutable_visionstate();
  public:
  void unsafe_arena_set_allocated_visionstate(
      ::DJIFRProto::Standard::VisionState* visionstate);
  ::DJIFRProto::Standard::VisionState* unsafe_arena_release_visionstate();

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.FrameTimeState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        FrameTimeState_GimbalsStateEntry_DoNotUse,
        int32_t, ::DJIFRProto::Standard::GimbalState,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> gimbalsstate_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        FrameTimeState_CamerasStateEntry_DoNotUse,
        int32_t, ::DJIFRProto::Standard::CameraState,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> camerasstate_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        FrameTimeState_BatteriesStateEntry_DoNotUse,
        int32_t, ::DJIFRProto::Standard::BatteryState,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> batteriesstate_;
    ::DJIFRProto::Standard::FlightControllerState* flightcontrollerstate_;
    ::DJIFRProto::Standard::CameraState* camerastate_;
    ::DJIFRProto::Standard::GimbalState* gimbalstate_;
    ::DJIFRProto::Standard::RCHardwareState* rchardwarestate_;
    ::DJIFRProto::Standard::BatteryState* batterystate_;
    ::DJIFRProto::Standard::MobileRemoteControllerState* mobileremotecontroller_;
    ::DJIFRProto::Standard::AirLinkState* airlinkstate_;
    ::DJIFRProto::Standard::GOBusinessData* gobusinessdata_;
    ::DJIFRProto::Standard::MobileDeviceState* mobiledevicestate_;
    ::DJIFRProto::Standard::VisionState* visionstate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FRFrameTimeModelProto_2eproto;
};
// -------------------------------------------------------------------

class FrameTimeStates final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.FrameTimeStates) */ {
 public:
  inline FrameTimeStates() : FrameTimeStates(nullptr) {}
  ~FrameTimeStates() override;
  explicit PROTOBUF_CONSTEXPR FrameTimeStates(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrameTimeStates(const FrameTimeStates& from);
  FrameTimeStates(FrameTimeStates&& from) noexcept
    : FrameTimeStates() {
    *this = ::std::move(from);
  }

  inline FrameTimeStates& operator=(const FrameTimeStates& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameTimeStates& operator=(FrameTimeStates&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FrameTimeStates& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrameTimeStates* internal_default_instance() {
    return reinterpret_cast<const FrameTimeStates*>(
               &_FrameTimeStates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FrameTimeStates& a, FrameTimeStates& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameTimeStates* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameTimeStates* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FrameTimeStates* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FrameTimeStates>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FrameTimeStates& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FrameTimeStates& from) {
    FrameTimeStates::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameTimeStates* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DJIFRProto.Standard.FrameTimeStates";
  }
  protected:
  explicit FrameTimeStates(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameTimeStatesFieldNumber = 1,
  };
  // repeated .DJIFRProto.Standard.FrameTimeState frameTimeStates = 1;
  int frametimestates_size() const;
  private:
  int _internal_frametimestates_size() const;
  public:
  void clear_frametimestates();
  ::DJIFRProto::Standard::FrameTimeState* mutable_frametimestates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DJIFRProto::Standard::FrameTimeState >*
      mutable_frametimestates();
  private:
  const ::DJIFRProto::Standard::FrameTimeState& _internal_frametimestates(int index) const;
  ::DJIFRProto::Standard::FrameTimeState* _internal_add_frametimestates();
  public:
  const ::DJIFRProto::Standard::FrameTimeState& frametimestates(int index) const;
  ::DJIFRProto::Standard::FrameTimeState* add_frametimestates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DJIFRProto::Standard::FrameTimeState >&
      frametimestates() const;

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.FrameTimeStates)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DJIFRProto::Standard::FrameTimeState > frametimestates_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FRFrameTimeModelProto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// FrameTimeState

// .DJIFRProto.Standard.FlightControllerState flightControllerState = 1;
inline bool FrameTimeState::_internal_has_flightcontrollerstate() const {
  return this != internal_default_instance() && _impl_.flightcontrollerstate_ != nullptr;
}
inline bool FrameTimeState::has_flightcontrollerstate() const {
  return _internal_has_flightcontrollerstate();
}
inline const ::DJIFRProto::Standard::FlightControllerState& FrameTimeState::_internal_flightcontrollerstate() const {
  const ::DJIFRProto::Standard::FlightControllerState* p = _impl_.flightcontrollerstate_;
  return p != nullptr ? *p : reinterpret_cast<const ::DJIFRProto::Standard::FlightControllerState&>(
      ::DJIFRProto::Standard::_FlightControllerState_default_instance_);
}
inline const ::DJIFRProto::Standard::FlightControllerState& FrameTimeState::flightcontrollerstate() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FrameTimeState.flightControllerState)
  return _internal_flightcontrollerstate();
}
inline void FrameTimeState::unsafe_arena_set_allocated_flightcontrollerstate(
    ::DJIFRProto::Standard::FlightControllerState* flightcontrollerstate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.flightcontrollerstate_);
  }
  _impl_.flightcontrollerstate_ = flightcontrollerstate;
  if (flightcontrollerstate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DJIFRProto.Standard.FrameTimeState.flightControllerState)
}
inline ::DJIFRProto::Standard::FlightControllerState* FrameTimeState::release_flightcontrollerstate() {
  
  ::DJIFRProto::Standard::FlightControllerState* temp = _impl_.flightcontrollerstate_;
  _impl_.flightcontrollerstate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DJIFRProto::Standard::FlightControllerState* FrameTimeState::unsafe_arena_release_flightcontrollerstate() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.FrameTimeState.flightControllerState)
  
  ::DJIFRProto::Standard::FlightControllerState* temp = _impl_.flightcontrollerstate_;
  _impl_.flightcontrollerstate_ = nullptr;
  return temp;
}
inline ::DJIFRProto::Standard::FlightControllerState* FrameTimeState::_internal_mutable_flightcontrollerstate() {
  
  if (_impl_.flightcontrollerstate_ == nullptr) {
    auto* p = CreateMaybeMessage<::DJIFRProto::Standard::FlightControllerState>(GetArenaForAllocation());
    _impl_.flightcontrollerstate_ = p;
  }
  return _impl_.flightcontrollerstate_;
}
inline ::DJIFRProto::Standard::FlightControllerState* FrameTimeState::mutable_flightcontrollerstate() {
  ::DJIFRProto::Standard::FlightControllerState* _msg = _internal_mutable_flightcontrollerstate();
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.FrameTimeState.flightControllerState)
  return _msg;
}
inline void FrameTimeState::set_allocated_flightcontrollerstate(::DJIFRProto::Standard::FlightControllerState* flightcontrollerstate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.flightcontrollerstate_);
  }
  if (flightcontrollerstate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flightcontrollerstate));
    if (message_arena != submessage_arena) {
      flightcontrollerstate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flightcontrollerstate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.flightcontrollerstate_ = flightcontrollerstate;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.FrameTimeState.flightControllerState)
}

// .DJIFRProto.Standard.CameraState cameraState = 2;
inline bool FrameTimeState::_internal_has_camerastate() const {
  return this != internal_default_instance() && _impl_.camerastate_ != nullptr;
}
inline bool FrameTimeState::has_camerastate() const {
  return _internal_has_camerastate();
}
inline const ::DJIFRProto::Standard::CameraState& FrameTimeState::_internal_camerastate() const {
  const ::DJIFRProto::Standard::CameraState* p = _impl_.camerastate_;
  return p != nullptr ? *p : reinterpret_cast<const ::DJIFRProto::Standard::CameraState&>(
      ::DJIFRProto::Standard::_CameraState_default_instance_);
}
inline const ::DJIFRProto::Standard::CameraState& FrameTimeState::camerastate() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FrameTimeState.cameraState)
  return _internal_camerastate();
}
inline void FrameTimeState::unsafe_arena_set_allocated_camerastate(
    ::DJIFRProto::Standard::CameraState* camerastate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.camerastate_);
  }
  _impl_.camerastate_ = camerastate;
  if (camerastate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DJIFRProto.Standard.FrameTimeState.cameraState)
}
inline ::DJIFRProto::Standard::CameraState* FrameTimeState::release_camerastate() {
  
  ::DJIFRProto::Standard::CameraState* temp = _impl_.camerastate_;
  _impl_.camerastate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DJIFRProto::Standard::CameraState* FrameTimeState::unsafe_arena_release_camerastate() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.FrameTimeState.cameraState)
  
  ::DJIFRProto::Standard::CameraState* temp = _impl_.camerastate_;
  _impl_.camerastate_ = nullptr;
  return temp;
}
inline ::DJIFRProto::Standard::CameraState* FrameTimeState::_internal_mutable_camerastate() {
  
  if (_impl_.camerastate_ == nullptr) {
    auto* p = CreateMaybeMessage<::DJIFRProto::Standard::CameraState>(GetArenaForAllocation());
    _impl_.camerastate_ = p;
  }
  return _impl_.camerastate_;
}
inline ::DJIFRProto::Standard::CameraState* FrameTimeState::mutable_camerastate() {
  ::DJIFRProto::Standard::CameraState* _msg = _internal_mutable_camerastate();
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.FrameTimeState.cameraState)
  return _msg;
}
inline void FrameTimeState::set_allocated_camerastate(::DJIFRProto::Standard::CameraState* camerastate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.camerastate_);
  }
  if (camerastate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(camerastate));
    if (message_arena != submessage_arena) {
      camerastate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camerastate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.camerastate_ = camerastate;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.FrameTimeState.cameraState)
}

// .DJIFRProto.Standard.GimbalState gimbalState = 3;
inline bool FrameTimeState::_internal_has_gimbalstate() const {
  return this != internal_default_instance() && _impl_.gimbalstate_ != nullptr;
}
inline bool FrameTimeState::has_gimbalstate() const {
  return _internal_has_gimbalstate();
}
inline const ::DJIFRProto::Standard::GimbalState& FrameTimeState::_internal_gimbalstate() const {
  const ::DJIFRProto::Standard::GimbalState* p = _impl_.gimbalstate_;
  return p != nullptr ? *p : reinterpret_cast<const ::DJIFRProto::Standard::GimbalState&>(
      ::DJIFRProto::Standard::_GimbalState_default_instance_);
}
inline const ::DJIFRProto::Standard::GimbalState& FrameTimeState::gimbalstate() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FrameTimeState.gimbalState)
  return _internal_gimbalstate();
}
inline void FrameTimeState::unsafe_arena_set_allocated_gimbalstate(
    ::DJIFRProto::Standard::GimbalState* gimbalstate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gimbalstate_);
  }
  _impl_.gimbalstate_ = gimbalstate;
  if (gimbalstate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DJIFRProto.Standard.FrameTimeState.gimbalState)
}
inline ::DJIFRProto::Standard::GimbalState* FrameTimeState::release_gimbalstate() {
  
  ::DJIFRProto::Standard::GimbalState* temp = _impl_.gimbalstate_;
  _impl_.gimbalstate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DJIFRProto::Standard::GimbalState* FrameTimeState::unsafe_arena_release_gimbalstate() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.FrameTimeState.gimbalState)
  
  ::DJIFRProto::Standard::GimbalState* temp = _impl_.gimbalstate_;
  _impl_.gimbalstate_ = nullptr;
  return temp;
}
inline ::DJIFRProto::Standard::GimbalState* FrameTimeState::_internal_mutable_gimbalstate() {
  
  if (_impl_.gimbalstate_ == nullptr) {
    auto* p = CreateMaybeMessage<::DJIFRProto::Standard::GimbalState>(GetArenaForAllocation());
    _impl_.gimbalstate_ = p;
  }
  return _impl_.gimbalstate_;
}
inline ::DJIFRProto::Standard::GimbalState* FrameTimeState::mutable_gimbalstate() {
  ::DJIFRProto::Standard::GimbalState* _msg = _internal_mutable_gimbalstate();
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.FrameTimeState.gimbalState)
  return _msg;
}
inline void FrameTimeState::set_allocated_gimbalstate(::DJIFRProto::Standard::GimbalState* gimbalstate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gimbalstate_);
  }
  if (gimbalstate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gimbalstate));
    if (message_arena != submessage_arena) {
      gimbalstate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gimbalstate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gimbalstate_ = gimbalstate;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.FrameTimeState.gimbalState)
}

// .DJIFRProto.Standard.RCHardwareState rcHardwareState = 4;
inline bool FrameTimeState::_internal_has_rchardwarestate() const {
  return this != internal_default_instance() && _impl_.rchardwarestate_ != nullptr;
}
inline bool FrameTimeState::has_rchardwarestate() const {
  return _internal_has_rchardwarestate();
}
inline const ::DJIFRProto::Standard::RCHardwareState& FrameTimeState::_internal_rchardwarestate() const {
  const ::DJIFRProto::Standard::RCHardwareState* p = _impl_.rchardwarestate_;
  return p != nullptr ? *p : reinterpret_cast<const ::DJIFRProto::Standard::RCHardwareState&>(
      ::DJIFRProto::Standard::_RCHardwareState_default_instance_);
}
inline const ::DJIFRProto::Standard::RCHardwareState& FrameTimeState::rchardwarestate() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FrameTimeState.rcHardwareState)
  return _internal_rchardwarestate();
}
inline void FrameTimeState::unsafe_arena_set_allocated_rchardwarestate(
    ::DJIFRProto::Standard::RCHardwareState* rchardwarestate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rchardwarestate_);
  }
  _impl_.rchardwarestate_ = rchardwarestate;
  if (rchardwarestate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DJIFRProto.Standard.FrameTimeState.rcHardwareState)
}
inline ::DJIFRProto::Standard::RCHardwareState* FrameTimeState::release_rchardwarestate() {
  
  ::DJIFRProto::Standard::RCHardwareState* temp = _impl_.rchardwarestate_;
  _impl_.rchardwarestate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DJIFRProto::Standard::RCHardwareState* FrameTimeState::unsafe_arena_release_rchardwarestate() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.FrameTimeState.rcHardwareState)
  
  ::DJIFRProto::Standard::RCHardwareState* temp = _impl_.rchardwarestate_;
  _impl_.rchardwarestate_ = nullptr;
  return temp;
}
inline ::DJIFRProto::Standard::RCHardwareState* FrameTimeState::_internal_mutable_rchardwarestate() {
  
  if (_impl_.rchardwarestate_ == nullptr) {
    auto* p = CreateMaybeMessage<::DJIFRProto::Standard::RCHardwareState>(GetArenaForAllocation());
    _impl_.rchardwarestate_ = p;
  }
  return _impl_.rchardwarestate_;
}
inline ::DJIFRProto::Standard::RCHardwareState* FrameTimeState::mutable_rchardwarestate() {
  ::DJIFRProto::Standard::RCHardwareState* _msg = _internal_mutable_rchardwarestate();
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.FrameTimeState.rcHardwareState)
  return _msg;
}
inline void FrameTimeState::set_allocated_rchardwarestate(::DJIFRProto::Standard::RCHardwareState* rchardwarestate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rchardwarestate_);
  }
  if (rchardwarestate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rchardwarestate));
    if (message_arena != submessage_arena) {
      rchardwarestate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rchardwarestate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rchardwarestate_ = rchardwarestate;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.FrameTimeState.rcHardwareState)
}

// .DJIFRProto.Standard.BatteryState batteryState = 5;
inline bool FrameTimeState::_internal_has_batterystate() const {
  return this != internal_default_instance() && _impl_.batterystate_ != nullptr;
}
inline bool FrameTimeState::has_batterystate() const {
  return _internal_has_batterystate();
}
inline const ::DJIFRProto::Standard::BatteryState& FrameTimeState::_internal_batterystate() const {
  const ::DJIFRProto::Standard::BatteryState* p = _impl_.batterystate_;
  return p != nullptr ? *p : reinterpret_cast<const ::DJIFRProto::Standard::BatteryState&>(
      ::DJIFRProto::Standard::_BatteryState_default_instance_);
}
inline const ::DJIFRProto::Standard::BatteryState& FrameTimeState::batterystate() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FrameTimeState.batteryState)
  return _internal_batterystate();
}
inline void FrameTimeState::unsafe_arena_set_allocated_batterystate(
    ::DJIFRProto::Standard::BatteryState* batterystate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.batterystate_);
  }
  _impl_.batterystate_ = batterystate;
  if (batterystate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DJIFRProto.Standard.FrameTimeState.batteryState)
}
inline ::DJIFRProto::Standard::BatteryState* FrameTimeState::release_batterystate() {
  
  ::DJIFRProto::Standard::BatteryState* temp = _impl_.batterystate_;
  _impl_.batterystate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DJIFRProto::Standard::BatteryState* FrameTimeState::unsafe_arena_release_batterystate() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.FrameTimeState.batteryState)
  
  ::DJIFRProto::Standard::BatteryState* temp = _impl_.batterystate_;
  _impl_.batterystate_ = nullptr;
  return temp;
}
inline ::DJIFRProto::Standard::BatteryState* FrameTimeState::_internal_mutable_batterystate() {
  
  if (_impl_.batterystate_ == nullptr) {
    auto* p = CreateMaybeMessage<::DJIFRProto::Standard::BatteryState>(GetArenaForAllocation());
    _impl_.batterystate_ = p;
  }
  return _impl_.batterystate_;
}
inline ::DJIFRProto::Standard::BatteryState* FrameTimeState::mutable_batterystate() {
  ::DJIFRProto::Standard::BatteryState* _msg = _internal_mutable_batterystate();
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.FrameTimeState.batteryState)
  return _msg;
}
inline void FrameTimeState::set_allocated_batterystate(::DJIFRProto::Standard::BatteryState* batterystate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.batterystate_);
  }
  if (batterystate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(batterystate));
    if (message_arena != submessage_arena) {
      batterystate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, batterystate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.batterystate_ = batterystate;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.FrameTimeState.batteryState)
}

// .DJIFRProto.Standard.MobileRemoteControllerState mobileRemoteController = 6;
inline bool FrameTimeState::_internal_has_mobileremotecontroller() const {
  return this != internal_default_instance() && _impl_.mobileremotecontroller_ != nullptr;
}
inline bool FrameTimeState::has_mobileremotecontroller() const {
  return _internal_has_mobileremotecontroller();
}
inline const ::DJIFRProto::Standard::MobileRemoteControllerState& FrameTimeState::_internal_mobileremotecontroller() const {
  const ::DJIFRProto::Standard::MobileRemoteControllerState* p = _impl_.mobileremotecontroller_;
  return p != nullptr ? *p : reinterpret_cast<const ::DJIFRProto::Standard::MobileRemoteControllerState&>(
      ::DJIFRProto::Standard::_MobileRemoteControllerState_default_instance_);
}
inline const ::DJIFRProto::Standard::MobileRemoteControllerState& FrameTimeState::mobileremotecontroller() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FrameTimeState.mobileRemoteController)
  return _internal_mobileremotecontroller();
}
inline void FrameTimeState::unsafe_arena_set_allocated_mobileremotecontroller(
    ::DJIFRProto::Standard::MobileRemoteControllerState* mobileremotecontroller) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mobileremotecontroller_);
  }
  _impl_.mobileremotecontroller_ = mobileremotecontroller;
  if (mobileremotecontroller) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DJIFRProto.Standard.FrameTimeState.mobileRemoteController)
}
inline ::DJIFRProto::Standard::MobileRemoteControllerState* FrameTimeState::release_mobileremotecontroller() {
  
  ::DJIFRProto::Standard::MobileRemoteControllerState* temp = _impl_.mobileremotecontroller_;
  _impl_.mobileremotecontroller_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DJIFRProto::Standard::MobileRemoteControllerState* FrameTimeState::unsafe_arena_release_mobileremotecontroller() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.FrameTimeState.mobileRemoteController)
  
  ::DJIFRProto::Standard::MobileRemoteControllerState* temp = _impl_.mobileremotecontroller_;
  _impl_.mobileremotecontroller_ = nullptr;
  return temp;
}
inline ::DJIFRProto::Standard::MobileRemoteControllerState* FrameTimeState::_internal_mutable_mobileremotecontroller() {
  
  if (_impl_.mobileremotecontroller_ == nullptr) {
    auto* p = CreateMaybeMessage<::DJIFRProto::Standard::MobileRemoteControllerState>(GetArenaForAllocation());
    _impl_.mobileremotecontroller_ = p;
  }
  return _impl_.mobileremotecontroller_;
}
inline ::DJIFRProto::Standard::MobileRemoteControllerState* FrameTimeState::mutable_mobileremotecontroller() {
  ::DJIFRProto::Standard::MobileRemoteControllerState* _msg = _internal_mutable_mobileremotecontroller();
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.FrameTimeState.mobileRemoteController)
  return _msg;
}
inline void FrameTimeState::set_allocated_mobileremotecontroller(::DJIFRProto::Standard::MobileRemoteControllerState* mobileremotecontroller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mobileremotecontroller_);
  }
  if (mobileremotecontroller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mobileremotecontroller));
    if (message_arena != submessage_arena) {
      mobileremotecontroller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mobileremotecontroller, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mobileremotecontroller_ = mobileremotecontroller;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.FrameTimeState.mobileRemoteController)
}

// .DJIFRProto.Standard.AirLinkState airLinkState = 8;
inline bool FrameTimeState::_internal_has_airlinkstate() const {
  return this != internal_default_instance() && _impl_.airlinkstate_ != nullptr;
}
inline bool FrameTimeState::has_airlinkstate() const {
  return _internal_has_airlinkstate();
}
inline const ::DJIFRProto::Standard::AirLinkState& FrameTimeState::_internal_airlinkstate() const {
  const ::DJIFRProto::Standard::AirLinkState* p = _impl_.airlinkstate_;
  return p != nullptr ? *p : reinterpret_cast<const ::DJIFRProto::Standard::AirLinkState&>(
      ::DJIFRProto::Standard::_AirLinkState_default_instance_);
}
inline const ::DJIFRProto::Standard::AirLinkState& FrameTimeState::airlinkstate() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FrameTimeState.airLinkState)
  return _internal_airlinkstate();
}
inline void FrameTimeState::unsafe_arena_set_allocated_airlinkstate(
    ::DJIFRProto::Standard::AirLinkState* airlinkstate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.airlinkstate_);
  }
  _impl_.airlinkstate_ = airlinkstate;
  if (airlinkstate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DJIFRProto.Standard.FrameTimeState.airLinkState)
}
inline ::DJIFRProto::Standard::AirLinkState* FrameTimeState::release_airlinkstate() {
  
  ::DJIFRProto::Standard::AirLinkState* temp = _impl_.airlinkstate_;
  _impl_.airlinkstate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DJIFRProto::Standard::AirLinkState* FrameTimeState::unsafe_arena_release_airlinkstate() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.FrameTimeState.airLinkState)
  
  ::DJIFRProto::Standard::AirLinkState* temp = _impl_.airlinkstate_;
  _impl_.airlinkstate_ = nullptr;
  return temp;
}
inline ::DJIFRProto::Standard::AirLinkState* FrameTimeState::_internal_mutable_airlinkstate() {
  
  if (_impl_.airlinkstate_ == nullptr) {
    auto* p = CreateMaybeMessage<::DJIFRProto::Standard::AirLinkState>(GetArenaForAllocation());
    _impl_.airlinkstate_ = p;
  }
  return _impl_.airlinkstate_;
}
inline ::DJIFRProto::Standard::AirLinkState* FrameTimeState::mutable_airlinkstate() {
  ::DJIFRProto::Standard::AirLinkState* _msg = _internal_mutable_airlinkstate();
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.FrameTimeState.airLinkState)
  return _msg;
}
inline void FrameTimeState::set_allocated_airlinkstate(::DJIFRProto::Standard::AirLinkState* airlinkstate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.airlinkstate_);
  }
  if (airlinkstate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(airlinkstate));
    if (message_arena != submessage_arena) {
      airlinkstate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, airlinkstate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.airlinkstate_ = airlinkstate;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.FrameTimeState.airLinkState)
}

// .DJIFRProto.Standard.GOBusinessData goBusinessData = 9;
inline bool FrameTimeState::_internal_has_gobusinessdata() const {
  return this != internal_default_instance() && _impl_.gobusinessdata_ != nullptr;
}
inline bool FrameTimeState::has_gobusinessdata() const {
  return _internal_has_gobusinessdata();
}
inline const ::DJIFRProto::Standard::GOBusinessData& FrameTimeState::_internal_gobusinessdata() const {
  const ::DJIFRProto::Standard::GOBusinessData* p = _impl_.gobusinessdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::DJIFRProto::Standard::GOBusinessData&>(
      ::DJIFRProto::Standard::_GOBusinessData_default_instance_);
}
inline const ::DJIFRProto::Standard::GOBusinessData& FrameTimeState::gobusinessdata() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FrameTimeState.goBusinessData)
  return _internal_gobusinessdata();
}
inline void FrameTimeState::unsafe_arena_set_allocated_gobusinessdata(
    ::DJIFRProto::Standard::GOBusinessData* gobusinessdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gobusinessdata_);
  }
  _impl_.gobusinessdata_ = gobusinessdata;
  if (gobusinessdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DJIFRProto.Standard.FrameTimeState.goBusinessData)
}
inline ::DJIFRProto::Standard::GOBusinessData* FrameTimeState::release_gobusinessdata() {
  
  ::DJIFRProto::Standard::GOBusinessData* temp = _impl_.gobusinessdata_;
  _impl_.gobusinessdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DJIFRProto::Standard::GOBusinessData* FrameTimeState::unsafe_arena_release_gobusinessdata() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.FrameTimeState.goBusinessData)
  
  ::DJIFRProto::Standard::GOBusinessData* temp = _impl_.gobusinessdata_;
  _impl_.gobusinessdata_ = nullptr;
  return temp;
}
inline ::DJIFRProto::Standard::GOBusinessData* FrameTimeState::_internal_mutable_gobusinessdata() {
  
  if (_impl_.gobusinessdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::DJIFRProto::Standard::GOBusinessData>(GetArenaForAllocation());
    _impl_.gobusinessdata_ = p;
  }
  return _impl_.gobusinessdata_;
}
inline ::DJIFRProto::Standard::GOBusinessData* FrameTimeState::mutable_gobusinessdata() {
  ::DJIFRProto::Standard::GOBusinessData* _msg = _internal_mutable_gobusinessdata();
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.FrameTimeState.goBusinessData)
  return _msg;
}
inline void FrameTimeState::set_allocated_gobusinessdata(::DJIFRProto::Standard::GOBusinessData* gobusinessdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gobusinessdata_);
  }
  if (gobusinessdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gobusinessdata));
    if (message_arena != submessage_arena) {
      gobusinessdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gobusinessdata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gobusinessdata_ = gobusinessdata;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.FrameTimeState.goBusinessData)
}

// .DJIFRProto.Standard.MobileDeviceState mobileDeviceState = 10;
inline bool FrameTimeState::_internal_has_mobiledevicestate() const {
  return this != internal_default_instance() && _impl_.mobiledevicestate_ != nullptr;
}
inline bool FrameTimeState::has_mobiledevicestate() const {
  return _internal_has_mobiledevicestate();
}
inline const ::DJIFRProto::Standard::MobileDeviceState& FrameTimeState::_internal_mobiledevicestate() const {
  const ::DJIFRProto::Standard::MobileDeviceState* p = _impl_.mobiledevicestate_;
  return p != nullptr ? *p : reinterpret_cast<const ::DJIFRProto::Standard::MobileDeviceState&>(
      ::DJIFRProto::Standard::_MobileDeviceState_default_instance_);
}
inline const ::DJIFRProto::Standard::MobileDeviceState& FrameTimeState::mobiledevicestate() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FrameTimeState.mobileDeviceState)
  return _internal_mobiledevicestate();
}
inline void FrameTimeState::unsafe_arena_set_allocated_mobiledevicestate(
    ::DJIFRProto::Standard::MobileDeviceState* mobiledevicestate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mobiledevicestate_);
  }
  _impl_.mobiledevicestate_ = mobiledevicestate;
  if (mobiledevicestate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DJIFRProto.Standard.FrameTimeState.mobileDeviceState)
}
inline ::DJIFRProto::Standard::MobileDeviceState* FrameTimeState::release_mobiledevicestate() {
  
  ::DJIFRProto::Standard::MobileDeviceState* temp = _impl_.mobiledevicestate_;
  _impl_.mobiledevicestate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DJIFRProto::Standard::MobileDeviceState* FrameTimeState::unsafe_arena_release_mobiledevicestate() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.FrameTimeState.mobileDeviceState)
  
  ::DJIFRProto::Standard::MobileDeviceState* temp = _impl_.mobiledevicestate_;
  _impl_.mobiledevicestate_ = nullptr;
  return temp;
}
inline ::DJIFRProto::Standard::MobileDeviceState* FrameTimeState::_internal_mutable_mobiledevicestate() {
  
  if (_impl_.mobiledevicestate_ == nullptr) {
    auto* p = CreateMaybeMessage<::DJIFRProto::Standard::MobileDeviceState>(GetArenaForAllocation());
    _impl_.mobiledevicestate_ = p;
  }
  return _impl_.mobiledevicestate_;
}
inline ::DJIFRProto::Standard::MobileDeviceState* FrameTimeState::mutable_mobiledevicestate() {
  ::DJIFRProto::Standard::MobileDeviceState* _msg = _internal_mutable_mobiledevicestate();
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.FrameTimeState.mobileDeviceState)
  return _msg;
}
inline void FrameTimeState::set_allocated_mobiledevicestate(::DJIFRProto::Standard::MobileDeviceState* mobiledevicestate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mobiledevicestate_);
  }
  if (mobiledevicestate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mobiledevicestate));
    if (message_arena != submessage_arena) {
      mobiledevicestate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mobiledevicestate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mobiledevicestate_ = mobiledevicestate;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.FrameTimeState.mobileDeviceState)
}

// .DJIFRProto.Standard.VisionState visionState = 11;
inline bool FrameTimeState::_internal_has_visionstate() const {
  return this != internal_default_instance() && _impl_.visionstate_ != nullptr;
}
inline bool FrameTimeState::has_visionstate() const {
  return _internal_has_visionstate();
}
inline const ::DJIFRProto::Standard::VisionState& FrameTimeState::_internal_visionstate() const {
  const ::DJIFRProto::Standard::VisionState* p = _impl_.visionstate_;
  return p != nullptr ? *p : reinterpret_cast<const ::DJIFRProto::Standard::VisionState&>(
      ::DJIFRProto::Standard::_VisionState_default_instance_);
}
inline const ::DJIFRProto::Standard::VisionState& FrameTimeState::visionstate() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FrameTimeState.visionState)
  return _internal_visionstate();
}
inline void FrameTimeState::unsafe_arena_set_allocated_visionstate(
    ::DJIFRProto::Standard::VisionState* visionstate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.visionstate_);
  }
  _impl_.visionstate_ = visionstate;
  if (visionstate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DJIFRProto.Standard.FrameTimeState.visionState)
}
inline ::DJIFRProto::Standard::VisionState* FrameTimeState::release_visionstate() {
  
  ::DJIFRProto::Standard::VisionState* temp = _impl_.visionstate_;
  _impl_.visionstate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DJIFRProto::Standard::VisionState* FrameTimeState::unsafe_arena_release_visionstate() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.FrameTimeState.visionState)
  
  ::DJIFRProto::Standard::VisionState* temp = _impl_.visionstate_;
  _impl_.visionstate_ = nullptr;
  return temp;
}
inline ::DJIFRProto::Standard::VisionState* FrameTimeState::_internal_mutable_visionstate() {
  
  if (_impl_.visionstate_ == nullptr) {
    auto* p = CreateMaybeMessage<::DJIFRProto::Standard::VisionState>(GetArenaForAllocation());
    _impl_.visionstate_ = p;
  }
  return _impl_.visionstate_;
}
inline ::DJIFRProto::Standard::VisionState* FrameTimeState::mutable_visionstate() {
  ::DJIFRProto::Standard::VisionState* _msg = _internal_mutable_visionstate();
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.FrameTimeState.visionState)
  return _msg;
}
inline void FrameTimeState::set_allocated_visionstate(::DJIFRProto::Standard::VisionState* visionstate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.visionstate_);
  }
  if (visionstate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(visionstate));
    if (message_arena != submessage_arena) {
      visionstate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, visionstate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.visionstate_ = visionstate;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.FrameTimeState.visionState)
}

// map<int32, .DJIFRProto.Standard.GimbalState> gimbalsState = 12;
inline int FrameTimeState::_internal_gimbalsstate_size() const {
  return _impl_.gimbalsstate_.size();
}
inline int FrameTimeState::gimbalsstate_size() const {
  return _internal_gimbalsstate_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::GimbalState >&
FrameTimeState::_internal_gimbalsstate() const {
  return _impl_.gimbalsstate_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::GimbalState >&
FrameTimeState::gimbalsstate() const {
  // @@protoc_insertion_point(field_map:DJIFRProto.Standard.FrameTimeState.gimbalsState)
  return _internal_gimbalsstate();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::GimbalState >*
FrameTimeState::_internal_mutable_gimbalsstate() {
  return _impl_.gimbalsstate_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::GimbalState >*
FrameTimeState::mutable_gimbalsstate() {
  // @@protoc_insertion_point(field_mutable_map:DJIFRProto.Standard.FrameTimeState.gimbalsState)
  return _internal_mutable_gimbalsstate();
}

// map<int32, .DJIFRProto.Standard.CameraState> camerasState = 13;
inline int FrameTimeState::_internal_camerasstate_size() const {
  return _impl_.camerasstate_.size();
}
inline int FrameTimeState::camerasstate_size() const {
  return _internal_camerasstate_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::CameraState >&
FrameTimeState::_internal_camerasstate() const {
  return _impl_.camerasstate_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::CameraState >&
FrameTimeState::camerasstate() const {
  // @@protoc_insertion_point(field_map:DJIFRProto.Standard.FrameTimeState.camerasState)
  return _internal_camerasstate();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::CameraState >*
FrameTimeState::_internal_mutable_camerasstate() {
  return _impl_.camerasstate_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::CameraState >*
FrameTimeState::mutable_camerasstate() {
  // @@protoc_insertion_point(field_mutable_map:DJIFRProto.Standard.FrameTimeState.camerasState)
  return _internal_mutable_camerasstate();
}

// map<int32, .DJIFRProto.Standard.BatteryState> batteriesState = 14;
inline int FrameTimeState::_internal_batteriesstate_size() const {
  return _impl_.batteriesstate_.size();
}
inline int FrameTimeState::batteriesstate_size() const {
  return _internal_batteriesstate_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::BatteryState >&
FrameTimeState::_internal_batteriesstate() const {
  return _impl_.batteriesstate_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::BatteryState >&
FrameTimeState::batteriesstate() const {
  // @@protoc_insertion_point(field_map:DJIFRProto.Standard.FrameTimeState.batteriesState)
  return _internal_batteriesstate();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::BatteryState >*
FrameTimeState::_internal_mutable_batteriesstate() {
  return _impl_.batteriesstate_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::BatteryState >*
FrameTimeState::mutable_batteriesstate() {
  // @@protoc_insertion_point(field_mutable_map:DJIFRProto.Standard.FrameTimeState.batteriesState)
  return _internal_mutable_batteriesstate();
}

// -------------------------------------------------------------------

// FrameTimeStates

// repeated .DJIFRProto.Standard.FrameTimeState frameTimeStates = 1;
inline int FrameTimeStates::_internal_frametimestates_size() const {
  return _impl_.frametimestates_.size();
}
inline int FrameTimeStates::frametimestates_size() const {
  return _internal_frametimestates_size();
}
inline void FrameTimeStates::clear_frametimestates() {
  _impl_.frametimestates_.Clear();
}
inline ::DJIFRProto::Standard::FrameTimeState* FrameTimeStates::mutable_frametimestates(int index) {
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.FrameTimeStates.frameTimeStates)
  return _impl_.frametimestates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DJIFRProto::Standard::FrameTimeState >*
FrameTimeStates::mutable_frametimestates() {
  // @@protoc_insertion_point(field_mutable_list:DJIFRProto.Standard.FrameTimeStates.frameTimeStates)
  return &_impl_.frametimestates_;
}
inline const ::DJIFRProto::Standard::FrameTimeState& FrameTimeStates::_internal_frametimestates(int index) const {
  return _impl_.frametimestates_.Get(index);
}
inline const ::DJIFRProto::Standard::FrameTimeState& FrameTimeStates::frametimestates(int index) const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.FrameTimeStates.frameTimeStates)
  return _internal_frametimestates(index);
}
inline ::DJIFRProto::Standard::FrameTimeState* FrameTimeStates::_internal_add_frametimestates() {
  return _impl_.frametimestates_.Add();
}
inline ::DJIFRProto::Standard::FrameTimeState* FrameTimeStates::add_frametimestates() {
  ::DJIFRProto::Standard::FrameTimeState* _add = _internal_add_frametimestates();
  // @@protoc_insertion_point(field_add:DJIFRProto.Standard.FrameTimeStates.frameTimeStates)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DJIFRProto::Standard::FrameTimeState >&
FrameTimeStates::frametimestates() const {
  // @@protoc_insertion_point(field_list:DJIFRProto.Standard.FrameTimeStates.frameTimeStates)
  return _impl_.frametimestates_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Standard
}  // namespace DJIFRProto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_FRFrameTimeModelProto_2eproto
