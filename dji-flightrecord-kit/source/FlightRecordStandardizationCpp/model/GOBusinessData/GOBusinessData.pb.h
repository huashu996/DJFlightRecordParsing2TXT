// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GOBusinessData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_GOBusinessData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_GOBusinessData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GOBusinessData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_GOBusinessData_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GOBusinessData_2eproto;
namespace DJIFRProto {
namespace Standard {
class GOBusinessData;
struct GOBusinessDataDefaultTypeInternal;
extern GOBusinessDataDefaultTypeInternal _GOBusinessData_default_instance_;
}  // namespace Standard
}  // namespace DJIFRProto
PROTOBUF_NAMESPACE_OPEN
template<> ::DJIFRProto::Standard::GOBusinessData* Arena::CreateMaybeMessage<::DJIFRProto::Standard::GOBusinessData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace DJIFRProto {
namespace Standard {

// ===================================================================

class GOBusinessData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.GOBusinessData) */ {
 public:
  inline GOBusinessData() : GOBusinessData(nullptr) {}
  ~GOBusinessData() override;
  explicit PROTOBUF_CONSTEXPR GOBusinessData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GOBusinessData(const GOBusinessData& from);
  GOBusinessData(GOBusinessData&& from) noexcept
    : GOBusinessData() {
    *this = ::std::move(from);
  }

  inline GOBusinessData& operator=(const GOBusinessData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GOBusinessData& operator=(GOBusinessData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GOBusinessData& default_instance() {
    return *internal_default_instance();
  }
  static inline const GOBusinessData* internal_default_instance() {
    return reinterpret_cast<const GOBusinessData*>(
               &_GOBusinessData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GOBusinessData& a, GOBusinessData& b) {
    a.Swap(&b);
  }
  inline void Swap(GOBusinessData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GOBusinessData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GOBusinessData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GOBusinessData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GOBusinessData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GOBusinessData& from) {
    GOBusinessData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GOBusinessData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DJIFRProto.Standard.GOBusinessData";
  }
  protected:
  explicit GOBusinessData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTipsFieldNumber = 2,
    kWarningFieldNumber = 3,
    kSeriousWarningFieldNumber = 4,
    kGoBusinessDataFieldNumber = 5,
    kVersionFieldNumber = 1,
  };
  // string tips = 2;
  void clear_tips();
  const std::string& tips() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tips(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tips();
  PROTOBUF_NODISCARD std::string* release_tips();
  void set_allocated_tips(std::string* tips);
  private:
  const std::string& _internal_tips() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tips(const std::string& value);
  std::string* _internal_mutable_tips();
  public:

  // string warning = 3;
  void clear_warning();
  const std::string& warning() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_warning(ArgT0&& arg0, ArgT... args);
  std::string* mutable_warning();
  PROTOBUF_NODISCARD std::string* release_warning();
  void set_allocated_warning(std::string* warning);
  private:
  const std::string& _internal_warning() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_warning(const std::string& value);
  std::string* _internal_mutable_warning();
  public:

  // string seriousWarning = 4;
  void clear_seriouswarning();
  const std::string& seriouswarning() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_seriouswarning(ArgT0&& arg0, ArgT... args);
  std::string* mutable_seriouswarning();
  PROTOBUF_NODISCARD std::string* release_seriouswarning();
  void set_allocated_seriouswarning(std::string* seriouswarning);
  private:
  const std::string& _internal_seriouswarning() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_seriouswarning(const std::string& value);
  std::string* _internal_mutable_seriouswarning();
  public:

  // bytes goBusinessData = 5;
  void clear_gobusinessdata();
  const std::string& gobusinessdata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gobusinessdata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gobusinessdata();
  PROTOBUF_NODISCARD std::string* release_gobusinessdata();
  void set_allocated_gobusinessdata(std::string* gobusinessdata);
  private:
  const std::string& _internal_gobusinessdata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gobusinessdata(const std::string& value);
  std::string* _internal_mutable_gobusinessdata();
  public:

  // uint32 version = 1;
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.GOBusinessData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tips_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr warning_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr seriouswarning_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gobusinessdata_;
    uint32_t version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GOBusinessData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GOBusinessData

// uint32 version = 1;
inline void GOBusinessData::clear_version() {
  _impl_.version_ = 0u;
}
inline uint32_t GOBusinessData::_internal_version() const {
  return _impl_.version_;
}
inline uint32_t GOBusinessData::version() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.GOBusinessData.version)
  return _internal_version();
}
inline void GOBusinessData::_internal_set_version(uint32_t value) {
  
  _impl_.version_ = value;
}
inline void GOBusinessData::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.GOBusinessData.version)
}

// string tips = 2;
inline void GOBusinessData::clear_tips() {
  _impl_.tips_.ClearToEmpty();
}
inline const std::string& GOBusinessData::tips() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.GOBusinessData.tips)
  return _internal_tips();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GOBusinessData::set_tips(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tips_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.GOBusinessData.tips)
}
inline std::string* GOBusinessData::mutable_tips() {
  std::string* _s = _internal_mutable_tips();
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.GOBusinessData.tips)
  return _s;
}
inline const std::string& GOBusinessData::_internal_tips() const {
  return _impl_.tips_.Get();
}
inline void GOBusinessData::_internal_set_tips(const std::string& value) {
  
  _impl_.tips_.Set(value, GetArenaForAllocation());
}
inline std::string* GOBusinessData::_internal_mutable_tips() {
  
  return _impl_.tips_.Mutable(GetArenaForAllocation());
}
inline std::string* GOBusinessData::release_tips() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.GOBusinessData.tips)
  return _impl_.tips_.Release();
}
inline void GOBusinessData::set_allocated_tips(std::string* tips) {
  if (tips != nullptr) {
    
  } else {
    
  }
  _impl_.tips_.SetAllocated(tips, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tips_.IsDefault()) {
    _impl_.tips_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.GOBusinessData.tips)
}

// string warning = 3;
inline void GOBusinessData::clear_warning() {
  _impl_.warning_.ClearToEmpty();
}
inline const std::string& GOBusinessData::warning() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.GOBusinessData.warning)
  return _internal_warning();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GOBusinessData::set_warning(ArgT0&& arg0, ArgT... args) {
 
 _impl_.warning_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.GOBusinessData.warning)
}
inline std::string* GOBusinessData::mutable_warning() {
  std::string* _s = _internal_mutable_warning();
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.GOBusinessData.warning)
  return _s;
}
inline const std::string& GOBusinessData::_internal_warning() const {
  return _impl_.warning_.Get();
}
inline void GOBusinessData::_internal_set_warning(const std::string& value) {
  
  _impl_.warning_.Set(value, GetArenaForAllocation());
}
inline std::string* GOBusinessData::_internal_mutable_warning() {
  
  return _impl_.warning_.Mutable(GetArenaForAllocation());
}
inline std::string* GOBusinessData::release_warning() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.GOBusinessData.warning)
  return _impl_.warning_.Release();
}
inline void GOBusinessData::set_allocated_warning(std::string* warning) {
  if (warning != nullptr) {
    
  } else {
    
  }
  _impl_.warning_.SetAllocated(warning, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.warning_.IsDefault()) {
    _impl_.warning_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.GOBusinessData.warning)
}

// string seriousWarning = 4;
inline void GOBusinessData::clear_seriouswarning() {
  _impl_.seriouswarning_.ClearToEmpty();
}
inline const std::string& GOBusinessData::seriouswarning() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.GOBusinessData.seriousWarning)
  return _internal_seriouswarning();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GOBusinessData::set_seriouswarning(ArgT0&& arg0, ArgT... args) {
 
 _impl_.seriouswarning_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.GOBusinessData.seriousWarning)
}
inline std::string* GOBusinessData::mutable_seriouswarning() {
  std::string* _s = _internal_mutable_seriouswarning();
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.GOBusinessData.seriousWarning)
  return _s;
}
inline const std::string& GOBusinessData::_internal_seriouswarning() const {
  return _impl_.seriouswarning_.Get();
}
inline void GOBusinessData::_internal_set_seriouswarning(const std::string& value) {
  
  _impl_.seriouswarning_.Set(value, GetArenaForAllocation());
}
inline std::string* GOBusinessData::_internal_mutable_seriouswarning() {
  
  return _impl_.seriouswarning_.Mutable(GetArenaForAllocation());
}
inline std::string* GOBusinessData::release_seriouswarning() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.GOBusinessData.seriousWarning)
  return _impl_.seriouswarning_.Release();
}
inline void GOBusinessData::set_allocated_seriouswarning(std::string* seriouswarning) {
  if (seriouswarning != nullptr) {
    
  } else {
    
  }
  _impl_.seriouswarning_.SetAllocated(seriouswarning, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.seriouswarning_.IsDefault()) {
    _impl_.seriouswarning_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.GOBusinessData.seriousWarning)
}

// bytes goBusinessData = 5;
inline void GOBusinessData::clear_gobusinessdata() {
  _impl_.gobusinessdata_.ClearToEmpty();
}
inline const std::string& GOBusinessData::gobusinessdata() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.GOBusinessData.goBusinessData)
  return _internal_gobusinessdata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GOBusinessData::set_gobusinessdata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.gobusinessdata_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.GOBusinessData.goBusinessData)
}
inline std::string* GOBusinessData::mutable_gobusinessdata() {
  std::string* _s = _internal_mutable_gobusinessdata();
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.GOBusinessData.goBusinessData)
  return _s;
}
inline const std::string& GOBusinessData::_internal_gobusinessdata() const {
  return _impl_.gobusinessdata_.Get();
}
inline void GOBusinessData::_internal_set_gobusinessdata(const std::string& value) {
  
  _impl_.gobusinessdata_.Set(value, GetArenaForAllocation());
}
inline std::string* GOBusinessData::_internal_mutable_gobusinessdata() {
  
  return _impl_.gobusinessdata_.Mutable(GetArenaForAllocation());
}
inline std::string* GOBusinessData::release_gobusinessdata() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.GOBusinessData.goBusinessData)
  return _impl_.gobusinessdata_.Release();
}
inline void GOBusinessData::set_allocated_gobusinessdata(std::string* gobusinessdata) {
  if (gobusinessdata != nullptr) {
    
  } else {
    
  }
  _impl_.gobusinessdata_.SetAllocated(gobusinessdata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.gobusinessdata_.IsDefault()) {
    _impl_.gobusinessdata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.GOBusinessData.goBusinessData)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Standard
}  // namespace DJIFRProto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_GOBusinessData_2eproto
