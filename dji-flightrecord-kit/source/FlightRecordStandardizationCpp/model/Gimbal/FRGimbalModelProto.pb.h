// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FRGimbalModelProto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_FRGimbalModelProto_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_FRGimbalModelProto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "FRCommonModelProto.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_FRGimbalModelProto_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_FRGimbalModelProto_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_FRGimbalModelProto_2eproto;
namespace DJIFRProto {
namespace Standard {
class GimbalState;
struct GimbalStateDefaultTypeInternal;
extern GimbalStateDefaultTypeInternal _GimbalState_default_instance_;
}  // namespace Standard
}  // namespace DJIFRProto
PROTOBUF_NAMESPACE_OPEN
template<> ::DJIFRProto::Standard::GimbalState* Arena::CreateMaybeMessage<::DJIFRProto::Standard::GimbalState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace DJIFRProto {
namespace Standard {

enum GimbalMode : int {
  Free = 0,
  FPV = 1,
  YawFollow = 2,
  GimbalMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  GimbalMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool GimbalMode_IsValid(int value);
constexpr GimbalMode GimbalMode_MIN = Free;
constexpr GimbalMode GimbalMode_MAX = YawFollow;
constexpr int GimbalMode_ARRAYSIZE = GimbalMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GimbalMode_descriptor();
template<typename T>
inline const std::string& GimbalMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GimbalMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GimbalMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GimbalMode_descriptor(), enum_t_value);
}
inline bool GimbalMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GimbalMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GimbalMode>(
    GimbalMode_descriptor(), name, value);
}
// ===================================================================

class GimbalState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.GimbalState) */ {
 public:
  inline GimbalState() : GimbalState(nullptr) {}
  ~GimbalState() override;
  explicit PROTOBUF_CONSTEXPR GimbalState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GimbalState(const GimbalState& from);
  GimbalState(GimbalState&& from) noexcept
    : GimbalState() {
    *this = ::std::move(from);
  }

  inline GimbalState& operator=(const GimbalState& from) {
    CopyFrom(from);
    return *this;
  }
  inline GimbalState& operator=(GimbalState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GimbalState& default_instance() {
    return *internal_default_instance();
  }
  static inline const GimbalState* internal_default_instance() {
    return reinterpret_cast<const GimbalState*>(
               &_GimbalState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GimbalState& a, GimbalState& b) {
    a.Swap(&b);
  }
  inline void Swap(GimbalState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GimbalState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GimbalState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GimbalState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GimbalState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GimbalState& from) {
    GimbalState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GimbalState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DJIFRProto.Standard.GimbalState";
  }
  protected:
  explicit GimbalState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAtitudeFieldNumber = 1,
    kFineTunedRollFieldNumber = 2,
    kFineTunedPitchFieldNumber = 3,
    kFineTunedYawFieldNumber = 4,
    kIsRollAtStopFieldNumber = 5,
    kIsYawAtStopFieldNumber = 6,
    kIsPitchAtStopFieldNumber = 7,
    kYawRelativeToAircraftHeadingFieldNumber = 8,
    kModeFieldNumber = 9,
    kIndexFieldNumber = 10,
  };
  // .DJIFRProto.Standard.Attitude atitude = 1;
  bool has_atitude() const;
  private:
  bool _internal_has_atitude() const;
  public:
  void clear_atitude();
  const ::DJIFRProto::Standard::Attitude& atitude() const;
  PROTOBUF_NODISCARD ::DJIFRProto::Standard::Attitude* release_atitude();
  ::DJIFRProto::Standard::Attitude* mutable_atitude();
  void set_allocated_atitude(::DJIFRProto::Standard::Attitude* atitude);
  private:
  const ::DJIFRProto::Standard::Attitude& _internal_atitude() const;
  ::DJIFRProto::Standard::Attitude* _internal_mutable_atitude();
  public:
  void unsafe_arena_set_allocated_atitude(
      ::DJIFRProto::Standard::Attitude* atitude);
  ::DJIFRProto::Standard::Attitude* unsafe_arena_release_atitude();

  // float fineTunedRoll = 2;
  void clear_finetunedroll();
  float finetunedroll() const;
  void set_finetunedroll(float value);
  private:
  float _internal_finetunedroll() const;
  void _internal_set_finetunedroll(float value);
  public:

  // float fineTunedPitch = 3;
  void clear_finetunedpitch();
  float finetunedpitch() const;
  void set_finetunedpitch(float value);
  private:
  float _internal_finetunedpitch() const;
  void _internal_set_finetunedpitch(float value);
  public:

  // float fineTunedYaw = 4;
  void clear_finetunedyaw();
  float finetunedyaw() const;
  void set_finetunedyaw(float value);
  private:
  float _internal_finetunedyaw() const;
  void _internal_set_finetunedyaw(float value);
  public:

  // bool isRollAtStop = 5;
  void clear_isrollatstop();
  bool isrollatstop() const;
  void set_isrollatstop(bool value);
  private:
  bool _internal_isrollatstop() const;
  void _internal_set_isrollatstop(bool value);
  public:

  // bool isYawAtStop = 6;
  void clear_isyawatstop();
  bool isyawatstop() const;
  void set_isyawatstop(bool value);
  private:
  bool _internal_isyawatstop() const;
  void _internal_set_isyawatstop(bool value);
  public:

  // bool isPitchAtStop = 7;
  void clear_ispitchatstop();
  bool ispitchatstop() const;
  void set_ispitchatstop(bool value);
  private:
  bool _internal_ispitchatstop() const;
  void _internal_set_ispitchatstop(bool value);
  public:

  // double yawRelativeToAircraftHeading = 8;
  void clear_yawrelativetoaircraftheading();
  double yawrelativetoaircraftheading() const;
  void set_yawrelativetoaircraftheading(double value);
  private:
  double _internal_yawrelativetoaircraftheading() const;
  void _internal_set_yawrelativetoaircraftheading(double value);
  public:

  // .DJIFRProto.Standard.GimbalMode mode = 9;
  void clear_mode();
  ::DJIFRProto::Standard::GimbalMode mode() const;
  void set_mode(::DJIFRProto::Standard::GimbalMode value);
  private:
  ::DJIFRProto::Standard::GimbalMode _internal_mode() const;
  void _internal_set_mode(::DJIFRProto::Standard::GimbalMode value);
  public:

  // int32 index = 10;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.GimbalState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::DJIFRProto::Standard::Attitude* atitude_;
    float finetunedroll_;
    float finetunedpitch_;
    float finetunedyaw_;
    bool isrollatstop_;
    bool isyawatstop_;
    bool ispitchatstop_;
    double yawrelativetoaircraftheading_;
    int mode_;
    int32_t index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FRGimbalModelProto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GimbalState

// .DJIFRProto.Standard.Attitude atitude = 1;
inline bool GimbalState::_internal_has_atitude() const {
  return this != internal_default_instance() && _impl_.atitude_ != nullptr;
}
inline bool GimbalState::has_atitude() const {
  return _internal_has_atitude();
}
inline const ::DJIFRProto::Standard::Attitude& GimbalState::_internal_atitude() const {
  const ::DJIFRProto::Standard::Attitude* p = _impl_.atitude_;
  return p != nullptr ? *p : reinterpret_cast<const ::DJIFRProto::Standard::Attitude&>(
      ::DJIFRProto::Standard::_Attitude_default_instance_);
}
inline const ::DJIFRProto::Standard::Attitude& GimbalState::atitude() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.GimbalState.atitude)
  return _internal_atitude();
}
inline void GimbalState::unsafe_arena_set_allocated_atitude(
    ::DJIFRProto::Standard::Attitude* atitude) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.atitude_);
  }
  _impl_.atitude_ = atitude;
  if (atitude) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DJIFRProto.Standard.GimbalState.atitude)
}
inline ::DJIFRProto::Standard::Attitude* GimbalState::release_atitude() {
  
  ::DJIFRProto::Standard::Attitude* temp = _impl_.atitude_;
  _impl_.atitude_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DJIFRProto::Standard::Attitude* GimbalState::unsafe_arena_release_atitude() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.GimbalState.atitude)
  
  ::DJIFRProto::Standard::Attitude* temp = _impl_.atitude_;
  _impl_.atitude_ = nullptr;
  return temp;
}
inline ::DJIFRProto::Standard::Attitude* GimbalState::_internal_mutable_atitude() {
  
  if (_impl_.atitude_ == nullptr) {
    auto* p = CreateMaybeMessage<::DJIFRProto::Standard::Attitude>(GetArenaForAllocation());
    _impl_.atitude_ = p;
  }
  return _impl_.atitude_;
}
inline ::DJIFRProto::Standard::Attitude* GimbalState::mutable_atitude() {
  ::DJIFRProto::Standard::Attitude* _msg = _internal_mutable_atitude();
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.GimbalState.atitude)
  return _msg;
}
inline void GimbalState::set_allocated_atitude(::DJIFRProto::Standard::Attitude* atitude) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.atitude_);
  }
  if (atitude) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(atitude));
    if (message_arena != submessage_arena) {
      atitude = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, atitude, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.atitude_ = atitude;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.GimbalState.atitude)
}

// float fineTunedRoll = 2;
inline void GimbalState::clear_finetunedroll() {
  _impl_.finetunedroll_ = 0;
}
inline float GimbalState::_internal_finetunedroll() const {
  return _impl_.finetunedroll_;
}
inline float GimbalState::finetunedroll() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.GimbalState.fineTunedRoll)
  return _internal_finetunedroll();
}
inline void GimbalState::_internal_set_finetunedroll(float value) {
  
  _impl_.finetunedroll_ = value;
}
inline void GimbalState::set_finetunedroll(float value) {
  _internal_set_finetunedroll(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.GimbalState.fineTunedRoll)
}

// float fineTunedPitch = 3;
inline void GimbalState::clear_finetunedpitch() {
  _impl_.finetunedpitch_ = 0;
}
inline float GimbalState::_internal_finetunedpitch() const {
  return _impl_.finetunedpitch_;
}
inline float GimbalState::finetunedpitch() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.GimbalState.fineTunedPitch)
  return _internal_finetunedpitch();
}
inline void GimbalState::_internal_set_finetunedpitch(float value) {
  
  _impl_.finetunedpitch_ = value;
}
inline void GimbalState::set_finetunedpitch(float value) {
  _internal_set_finetunedpitch(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.GimbalState.fineTunedPitch)
}

// float fineTunedYaw = 4;
inline void GimbalState::clear_finetunedyaw() {
  _impl_.finetunedyaw_ = 0;
}
inline float GimbalState::_internal_finetunedyaw() const {
  return _impl_.finetunedyaw_;
}
inline float GimbalState::finetunedyaw() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.GimbalState.fineTunedYaw)
  return _internal_finetunedyaw();
}
inline void GimbalState::_internal_set_finetunedyaw(float value) {
  
  _impl_.finetunedyaw_ = value;
}
inline void GimbalState::set_finetunedyaw(float value) {
  _internal_set_finetunedyaw(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.GimbalState.fineTunedYaw)
}

// bool isRollAtStop = 5;
inline void GimbalState::clear_isrollatstop() {
  _impl_.isrollatstop_ = false;
}
inline bool GimbalState::_internal_isrollatstop() const {
  return _impl_.isrollatstop_;
}
inline bool GimbalState::isrollatstop() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.GimbalState.isRollAtStop)
  return _internal_isrollatstop();
}
inline void GimbalState::_internal_set_isrollatstop(bool value) {
  
  _impl_.isrollatstop_ = value;
}
inline void GimbalState::set_isrollatstop(bool value) {
  _internal_set_isrollatstop(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.GimbalState.isRollAtStop)
}

// bool isYawAtStop = 6;
inline void GimbalState::clear_isyawatstop() {
  _impl_.isyawatstop_ = false;
}
inline bool GimbalState::_internal_isyawatstop() const {
  return _impl_.isyawatstop_;
}
inline bool GimbalState::isyawatstop() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.GimbalState.isYawAtStop)
  return _internal_isyawatstop();
}
inline void GimbalState::_internal_set_isyawatstop(bool value) {
  
  _impl_.isyawatstop_ = value;
}
inline void GimbalState::set_isyawatstop(bool value) {
  _internal_set_isyawatstop(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.GimbalState.isYawAtStop)
}

// bool isPitchAtStop = 7;
inline void GimbalState::clear_ispitchatstop() {
  _impl_.ispitchatstop_ = false;
}
inline bool GimbalState::_internal_ispitchatstop() const {
  return _impl_.ispitchatstop_;
}
inline bool GimbalState::ispitchatstop() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.GimbalState.isPitchAtStop)
  return _internal_ispitchatstop();
}
inline void GimbalState::_internal_set_ispitchatstop(bool value) {
  
  _impl_.ispitchatstop_ = value;
}
inline void GimbalState::set_ispitchatstop(bool value) {
  _internal_set_ispitchatstop(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.GimbalState.isPitchAtStop)
}

// double yawRelativeToAircraftHeading = 8;
inline void GimbalState::clear_yawrelativetoaircraftheading() {
  _impl_.yawrelativetoaircraftheading_ = 0;
}
inline double GimbalState::_internal_yawrelativetoaircraftheading() const {
  return _impl_.yawrelativetoaircraftheading_;
}
inline double GimbalState::yawrelativetoaircraftheading() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.GimbalState.yawRelativeToAircraftHeading)
  return _internal_yawrelativetoaircraftheading();
}
inline void GimbalState::_internal_set_yawrelativetoaircraftheading(double value) {
  
  _impl_.yawrelativetoaircraftheading_ = value;
}
inline void GimbalState::set_yawrelativetoaircraftheading(double value) {
  _internal_set_yawrelativetoaircraftheading(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.GimbalState.yawRelativeToAircraftHeading)
}

// .DJIFRProto.Standard.GimbalMode mode = 9;
inline void GimbalState::clear_mode() {
  _impl_.mode_ = 0;
}
inline ::DJIFRProto::Standard::GimbalMode GimbalState::_internal_mode() const {
  return static_cast< ::DJIFRProto::Standard::GimbalMode >(_impl_.mode_);
}
inline ::DJIFRProto::Standard::GimbalMode GimbalState::mode() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.GimbalState.mode)
  return _internal_mode();
}
inline void GimbalState::_internal_set_mode(::DJIFRProto::Standard::GimbalMode value) {
  
  _impl_.mode_ = value;
}
inline void GimbalState::set_mode(::DJIFRProto::Standard::GimbalMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.GimbalState.mode)
}

// int32 index = 10;
inline void GimbalState::clear_index() {
  _impl_.index_ = 0;
}
inline int32_t GimbalState::_internal_index() const {
  return _impl_.index_;
}
inline int32_t GimbalState::index() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.GimbalState.index)
  return _internal_index();
}
inline void GimbalState::_internal_set_index(int32_t value) {
  
  _impl_.index_ = value;
}
inline void GimbalState::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.GimbalState.index)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Standard
}  // namespace DJIFRProto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::DJIFRProto::Standard::GimbalMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DJIFRProto::Standard::GimbalMode>() {
  return ::DJIFRProto::Standard::GimbalMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_FRGimbalModelProto_2eproto
