// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FRImageModelProto.proto

#include "FRImageModelProto.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace DJIFRProto {
namespace Standard {
PROTOBUF_CONSTEXPR ImageData::ImageData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.previewimage_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.thumbnail_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.coordinate_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ImageDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageDataDefaultTypeInternal() {}
  union {
    ImageData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageDataDefaultTypeInternal _ImageData_default_instance_;
PROTOBUF_CONSTEXPR ImageDatas::ImageDatas(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.images_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ImageDatasDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageDatasDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageDatasDefaultTypeInternal() {}
  union {
    ImageDatas _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageDatasDefaultTypeInternal _ImageDatas_default_instance_;
}  // namespace Standard
}  // namespace DJIFRProto
static ::_pb::Metadata file_level_metadata_FRImageModelProto_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_FRImageModelProto_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_FRImageModelProto_2eproto = nullptr;

const uint32_t TableStruct_FRImageModelProto_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::ImageData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::ImageData, _impl_.coordinate_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::ImageData, _impl_.previewimage_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::ImageData, _impl_.thumbnail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::ImageDatas, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::ImageDatas, _impl_.images_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::DJIFRProto::Standard::ImageData)},
  { 9, -1, -1, sizeof(::DJIFRProto::Standard::ImageDatas)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::DJIFRProto::Standard::_ImageData_default_instance_._instance,
  &::DJIFRProto::Standard::_ImageDatas_default_instance_._instance,
};

const char descriptor_table_protodef_FRImageModelProto_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027FRImageModelProto.proto\022\023DJIFRProto.St"
  "andard\032\030FRCommonModelProto.proto\"s\n\tImag"
  "eData\022=\n\ncoordinate\030\001 \001(\0132).DJIFRProto.S"
  "tandard.LocationCoordinate2D\022\024\n\014previewI"
  "mage\030\002 \001(\014\022\021\n\tthumbnail\030\003 \001(\014\"<\n\nImageDa"
  "tas\022.\n\006images\030\001 \003(\0132\036.DJIFRProto.Standar"
  "d.ImageDataB\r\242\002\nDJIFRProtob\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_FRImageModelProto_2eproto_deps[1] = {
  &::descriptor_table_FRCommonModelProto_2eproto,
};
static ::_pbi::once_flag descriptor_table_FRImageModelProto_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_FRImageModelProto_2eproto = {
    false, false, 274, descriptor_table_protodef_FRImageModelProto_2eproto,
    "FRImageModelProto.proto",
    &descriptor_table_FRImageModelProto_2eproto_once, descriptor_table_FRImageModelProto_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_FRImageModelProto_2eproto::offsets,
    file_level_metadata_FRImageModelProto_2eproto, file_level_enum_descriptors_FRImageModelProto_2eproto,
    file_level_service_descriptors_FRImageModelProto_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_FRImageModelProto_2eproto_getter() {
  return &descriptor_table_FRImageModelProto_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_FRImageModelProto_2eproto(&descriptor_table_FRImageModelProto_2eproto);
namespace DJIFRProto {
namespace Standard {

// ===================================================================

class ImageData::_Internal {
 public:
  static const ::DJIFRProto::Standard::LocationCoordinate2D& coordinate(const ImageData* msg);
};

const ::DJIFRProto::Standard::LocationCoordinate2D&
ImageData::_Internal::coordinate(const ImageData* msg) {
  return *msg->_impl_.coordinate_;
}
void ImageData::clear_coordinate() {
  if (GetArenaForAllocation() == nullptr && _impl_.coordinate_ != nullptr) {
    delete _impl_.coordinate_;
  }
  _impl_.coordinate_ = nullptr;
}
ImageData::ImageData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DJIFRProto.Standard.ImageData)
}
ImageData::ImageData(const ImageData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImageData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.previewimage_){}
    , decltype(_impl_.thumbnail_){}
    , decltype(_impl_.coordinate_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.previewimage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.previewimage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_previewimage().empty()) {
    _this->_impl_.previewimage_.Set(from._internal_previewimage(), 
      _this->GetArenaForAllocation());
  }
  _impl_.thumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_thumbnail().empty()) {
    _this->_impl_.thumbnail_.Set(from._internal_thumbnail(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_coordinate()) {
    _this->_impl_.coordinate_ = new ::DJIFRProto::Standard::LocationCoordinate2D(*from._impl_.coordinate_);
  }
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.ImageData)
}

inline void ImageData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.previewimage_){}
    , decltype(_impl_.thumbnail_){}
    , decltype(_impl_.coordinate_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.previewimage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.previewimage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.thumbnail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ImageData::~ImageData() {
  // @@protoc_insertion_point(destructor:DJIFRProto.Standard.ImageData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImageData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.previewimage_.Destroy();
  _impl_.thumbnail_.Destroy();
  if (this != internal_default_instance()) delete _impl_.coordinate_;
}

void ImageData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImageData::Clear() {
// @@protoc_insertion_point(message_clear_start:DJIFRProto.Standard.ImageData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.previewimage_.ClearToEmpty();
  _impl_.thumbnail_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.coordinate_ != nullptr) {
    delete _impl_.coordinate_;
  }
  _impl_.coordinate_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DJIFRProto.Standard.LocationCoordinate2D coordinate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_coordinate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes previewImage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_previewimage();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes thumbnail = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_thumbnail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImageData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DJIFRProto.Standard.ImageData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DJIFRProto.Standard.LocationCoordinate2D coordinate = 1;
  if (this->_internal_has_coordinate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::coordinate(this),
        _Internal::coordinate(this).GetCachedSize(), target, stream);
  }

  // bytes previewImage = 2;
  if (!this->_internal_previewimage().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_previewimage(), target);
  }

  // bytes thumbnail = 3;
  if (!this->_internal_thumbnail().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_thumbnail(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DJIFRProto.Standard.ImageData)
  return target;
}

size_t ImageData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DJIFRProto.Standard.ImageData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes previewImage = 2;
  if (!this->_internal_previewimage().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_previewimage());
  }

  // bytes thumbnail = 3;
  if (!this->_internal_thumbnail().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_thumbnail());
  }

  // .DJIFRProto.Standard.LocationCoordinate2D coordinate = 1;
  if (this->_internal_has_coordinate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.coordinate_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImageData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImageData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImageData::GetClassData() const { return &_class_data_; }


void ImageData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImageData*>(&to_msg);
  auto& from = static_cast<const ImageData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DJIFRProto.Standard.ImageData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_previewimage().empty()) {
    _this->_internal_set_previewimage(from._internal_previewimage());
  }
  if (!from._internal_thumbnail().empty()) {
    _this->_internal_set_thumbnail(from._internal_thumbnail());
  }
  if (from._internal_has_coordinate()) {
    _this->_internal_mutable_coordinate()->::DJIFRProto::Standard::LocationCoordinate2D::MergeFrom(
        from._internal_coordinate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImageData::CopyFrom(const ImageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DJIFRProto.Standard.ImageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageData::IsInitialized() const {
  return true;
}

void ImageData::InternalSwap(ImageData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.previewimage_, lhs_arena,
      &other->_impl_.previewimage_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.thumbnail_, lhs_arena,
      &other->_impl_.thumbnail_, rhs_arena
  );
  swap(_impl_.coordinate_, other->_impl_.coordinate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FRImageModelProto_2eproto_getter, &descriptor_table_FRImageModelProto_2eproto_once,
      file_level_metadata_FRImageModelProto_2eproto[0]);
}

// ===================================================================

class ImageDatas::_Internal {
 public:
};

ImageDatas::ImageDatas(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DJIFRProto.Standard.ImageDatas)
}
ImageDatas::ImageDatas(const ImageDatas& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImageDatas* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.images_){from._impl_.images_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.ImageDatas)
}

inline void ImageDatas::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.images_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ImageDatas::~ImageDatas() {
  // @@protoc_insertion_point(destructor:DJIFRProto.Standard.ImageDatas)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImageDatas::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.images_.~RepeatedPtrField();
}

void ImageDatas::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImageDatas::Clear() {
// @@protoc_insertion_point(message_clear_start:DJIFRProto.Standard.ImageDatas)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.images_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageDatas::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .DJIFRProto.Standard.ImageData images = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_images(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImageDatas::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DJIFRProto.Standard.ImageDatas)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DJIFRProto.Standard.ImageData images = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_images_size()); i < n; i++) {
    const auto& repfield = this->_internal_images(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DJIFRProto.Standard.ImageDatas)
  return target;
}

size_t ImageDatas::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DJIFRProto.Standard.ImageDatas)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DJIFRProto.Standard.ImageData images = 1;
  total_size += 1UL * this->_internal_images_size();
  for (const auto& msg : this->_impl_.images_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImageDatas::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImageDatas::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImageDatas::GetClassData() const { return &_class_data_; }


void ImageDatas::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImageDatas*>(&to_msg);
  auto& from = static_cast<const ImageDatas&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DJIFRProto.Standard.ImageDatas)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.images_.MergeFrom(from._impl_.images_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImageDatas::CopyFrom(const ImageDatas& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DJIFRProto.Standard.ImageDatas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageDatas::IsInitialized() const {
  return true;
}

void ImageDatas::InternalSwap(ImageDatas* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.images_.InternalSwap(&other->_impl_.images_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageDatas::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FRImageModelProto_2eproto_getter, &descriptor_table_FRImageModelProto_2eproto_once,
      file_level_metadata_FRImageModelProto_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Standard
}  // namespace DJIFRProto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DJIFRProto::Standard::ImageData*
Arena::CreateMaybeMessage< ::DJIFRProto::Standard::ImageData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DJIFRProto::Standard::ImageData >(arena);
}
template<> PROTOBUF_NOINLINE ::DJIFRProto::Standard::ImageDatas*
Arena::CreateMaybeMessage< ::DJIFRProto::Standard::ImageDatas >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DJIFRProto::Standard::ImageDatas >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
