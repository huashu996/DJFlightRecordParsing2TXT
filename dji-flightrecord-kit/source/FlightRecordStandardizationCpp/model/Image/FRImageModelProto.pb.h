// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FRImageModelProto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_FRImageModelProto_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_FRImageModelProto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "FRCommonModelProto.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_FRImageModelProto_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_FRImageModelProto_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_FRImageModelProto_2eproto;
namespace DJIFRProto {
namespace Standard {
class ImageData;
struct ImageDataDefaultTypeInternal;
extern ImageDataDefaultTypeInternal _ImageData_default_instance_;
class ImageDatas;
struct ImageDatasDefaultTypeInternal;
extern ImageDatasDefaultTypeInternal _ImageDatas_default_instance_;
}  // namespace Standard
}  // namespace DJIFRProto
PROTOBUF_NAMESPACE_OPEN
template<> ::DJIFRProto::Standard::ImageData* Arena::CreateMaybeMessage<::DJIFRProto::Standard::ImageData>(Arena*);
template<> ::DJIFRProto::Standard::ImageDatas* Arena::CreateMaybeMessage<::DJIFRProto::Standard::ImageDatas>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace DJIFRProto {
namespace Standard {

// ===================================================================

class ImageData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.ImageData) */ {
 public:
  inline ImageData() : ImageData(nullptr) {}
  ~ImageData() override;
  explicit PROTOBUF_CONSTEXPR ImageData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageData(const ImageData& from);
  ImageData(ImageData&& from) noexcept
    : ImageData() {
    *this = ::std::move(from);
  }

  inline ImageData& operator=(const ImageData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageData& operator=(ImageData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageData* internal_default_instance() {
    return reinterpret_cast<const ImageData*>(
               &_ImageData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ImageData& a, ImageData& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImageData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImageData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImageData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ImageData& from) {
    ImageData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DJIFRProto.Standard.ImageData";
  }
  protected:
  explicit ImageData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreviewImageFieldNumber = 2,
    kThumbnailFieldNumber = 3,
    kCoordinateFieldNumber = 1,
  };
  // bytes previewImage = 2;
  void clear_previewimage();
  const std::string& previewimage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_previewimage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_previewimage();
  PROTOBUF_NODISCARD std::string* release_previewimage();
  void set_allocated_previewimage(std::string* previewimage);
  private:
  const std::string& _internal_previewimage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_previewimage(const std::string& value);
  std::string* _internal_mutable_previewimage();
  public:

  // bytes thumbnail = 3;
  void clear_thumbnail();
  const std::string& thumbnail() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_thumbnail(ArgT0&& arg0, ArgT... args);
  std::string* mutable_thumbnail();
  PROTOBUF_NODISCARD std::string* release_thumbnail();
  void set_allocated_thumbnail(std::string* thumbnail);
  private:
  const std::string& _internal_thumbnail() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_thumbnail(const std::string& value);
  std::string* _internal_mutable_thumbnail();
  public:

  // .DJIFRProto.Standard.LocationCoordinate2D coordinate = 1;
  bool has_coordinate() const;
  private:
  bool _internal_has_coordinate() const;
  public:
  void clear_coordinate();
  const ::DJIFRProto::Standard::LocationCoordinate2D& coordinate() const;
  PROTOBUF_NODISCARD ::DJIFRProto::Standard::LocationCoordinate2D* release_coordinate();
  ::DJIFRProto::Standard::LocationCoordinate2D* mutable_coordinate();
  void set_allocated_coordinate(::DJIFRProto::Standard::LocationCoordinate2D* coordinate);
  private:
  const ::DJIFRProto::Standard::LocationCoordinate2D& _internal_coordinate() const;
  ::DJIFRProto::Standard::LocationCoordinate2D* _internal_mutable_coordinate();
  public:
  void unsafe_arena_set_allocated_coordinate(
      ::DJIFRProto::Standard::LocationCoordinate2D* coordinate);
  ::DJIFRProto::Standard::LocationCoordinate2D* unsafe_arena_release_coordinate();

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.ImageData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr previewimage_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr thumbnail_;
    ::DJIFRProto::Standard::LocationCoordinate2D* coordinate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FRImageModelProto_2eproto;
};
// -------------------------------------------------------------------

class ImageDatas final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.ImageDatas) */ {
 public:
  inline ImageDatas() : ImageDatas(nullptr) {}
  ~ImageDatas() override;
  explicit PROTOBUF_CONSTEXPR ImageDatas(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageDatas(const ImageDatas& from);
  ImageDatas(ImageDatas&& from) noexcept
    : ImageDatas() {
    *this = ::std::move(from);
  }

  inline ImageDatas& operator=(const ImageDatas& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageDatas& operator=(ImageDatas&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageDatas& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageDatas* internal_default_instance() {
    return reinterpret_cast<const ImageDatas*>(
               &_ImageDatas_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ImageDatas& a, ImageDatas& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageDatas* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageDatas* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImageDatas* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImageDatas>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImageDatas& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ImageDatas& from) {
    ImageDatas::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageDatas* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DJIFRProto.Standard.ImageDatas";
  }
  protected:
  explicit ImageDatas(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImagesFieldNumber = 1,
  };
  // repeated .DJIFRProto.Standard.ImageData images = 1;
  int images_size() const;
  private:
  int _internal_images_size() const;
  public:
  void clear_images();
  ::DJIFRProto::Standard::ImageData* mutable_images(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DJIFRProto::Standard::ImageData >*
      mutable_images();
  private:
  const ::DJIFRProto::Standard::ImageData& _internal_images(int index) const;
  ::DJIFRProto::Standard::ImageData* _internal_add_images();
  public:
  const ::DJIFRProto::Standard::ImageData& images(int index) const;
  ::DJIFRProto::Standard::ImageData* add_images();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DJIFRProto::Standard::ImageData >&
      images() const;

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.ImageDatas)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DJIFRProto::Standard::ImageData > images_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FRImageModelProto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ImageData

// .DJIFRProto.Standard.LocationCoordinate2D coordinate = 1;
inline bool ImageData::_internal_has_coordinate() const {
  return this != internal_default_instance() && _impl_.coordinate_ != nullptr;
}
inline bool ImageData::has_coordinate() const {
  return _internal_has_coordinate();
}
inline const ::DJIFRProto::Standard::LocationCoordinate2D& ImageData::_internal_coordinate() const {
  const ::DJIFRProto::Standard::LocationCoordinate2D* p = _impl_.coordinate_;
  return p != nullptr ? *p : reinterpret_cast<const ::DJIFRProto::Standard::LocationCoordinate2D&>(
      ::DJIFRProto::Standard::_LocationCoordinate2D_default_instance_);
}
inline const ::DJIFRProto::Standard::LocationCoordinate2D& ImageData::coordinate() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.ImageData.coordinate)
  return _internal_coordinate();
}
inline void ImageData::unsafe_arena_set_allocated_coordinate(
    ::DJIFRProto::Standard::LocationCoordinate2D* coordinate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.coordinate_);
  }
  _impl_.coordinate_ = coordinate;
  if (coordinate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DJIFRProto.Standard.ImageData.coordinate)
}
inline ::DJIFRProto::Standard::LocationCoordinate2D* ImageData::release_coordinate() {
  
  ::DJIFRProto::Standard::LocationCoordinate2D* temp = _impl_.coordinate_;
  _impl_.coordinate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DJIFRProto::Standard::LocationCoordinate2D* ImageData::unsafe_arena_release_coordinate() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.ImageData.coordinate)
  
  ::DJIFRProto::Standard::LocationCoordinate2D* temp = _impl_.coordinate_;
  _impl_.coordinate_ = nullptr;
  return temp;
}
inline ::DJIFRProto::Standard::LocationCoordinate2D* ImageData::_internal_mutable_coordinate() {
  
  if (_impl_.coordinate_ == nullptr) {
    auto* p = CreateMaybeMessage<::DJIFRProto::Standard::LocationCoordinate2D>(GetArenaForAllocation());
    _impl_.coordinate_ = p;
  }
  return _impl_.coordinate_;
}
inline ::DJIFRProto::Standard::LocationCoordinate2D* ImageData::mutable_coordinate() {
  ::DJIFRProto::Standard::LocationCoordinate2D* _msg = _internal_mutable_coordinate();
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.ImageData.coordinate)
  return _msg;
}
inline void ImageData::set_allocated_coordinate(::DJIFRProto::Standard::LocationCoordinate2D* coordinate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.coordinate_);
  }
  if (coordinate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coordinate));
    if (message_arena != submessage_arena) {
      coordinate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coordinate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.coordinate_ = coordinate;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.ImageData.coordinate)
}

// bytes previewImage = 2;
inline void ImageData::clear_previewimage() {
  _impl_.previewimage_.ClearToEmpty();
}
inline const std::string& ImageData::previewimage() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.ImageData.previewImage)
  return _internal_previewimage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImageData::set_previewimage(ArgT0&& arg0, ArgT... args) {
 
 _impl_.previewimage_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.ImageData.previewImage)
}
inline std::string* ImageData::mutable_previewimage() {
  std::string* _s = _internal_mutable_previewimage();
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.ImageData.previewImage)
  return _s;
}
inline const std::string& ImageData::_internal_previewimage() const {
  return _impl_.previewimage_.Get();
}
inline void ImageData::_internal_set_previewimage(const std::string& value) {
  
  _impl_.previewimage_.Set(value, GetArenaForAllocation());
}
inline std::string* ImageData::_internal_mutable_previewimage() {
  
  return _impl_.previewimage_.Mutable(GetArenaForAllocation());
}
inline std::string* ImageData::release_previewimage() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.ImageData.previewImage)
  return _impl_.previewimage_.Release();
}
inline void ImageData::set_allocated_previewimage(std::string* previewimage) {
  if (previewimage != nullptr) {
    
  } else {
    
  }
  _impl_.previewimage_.SetAllocated(previewimage, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.previewimage_.IsDefault()) {
    _impl_.previewimage_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.ImageData.previewImage)
}

// bytes thumbnail = 3;
inline void ImageData::clear_thumbnail() {
  _impl_.thumbnail_.ClearToEmpty();
}
inline const std::string& ImageData::thumbnail() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.ImageData.thumbnail)
  return _internal_thumbnail();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImageData::set_thumbnail(ArgT0&& arg0, ArgT... args) {
 
 _impl_.thumbnail_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.ImageData.thumbnail)
}
inline std::string* ImageData::mutable_thumbnail() {
  std::string* _s = _internal_mutable_thumbnail();
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.ImageData.thumbnail)
  return _s;
}
inline const std::string& ImageData::_internal_thumbnail() const {
  return _impl_.thumbnail_.Get();
}
inline void ImageData::_internal_set_thumbnail(const std::string& value) {
  
  _impl_.thumbnail_.Set(value, GetArenaForAllocation());
}
inline std::string* ImageData::_internal_mutable_thumbnail() {
  
  return _impl_.thumbnail_.Mutable(GetArenaForAllocation());
}
inline std::string* ImageData::release_thumbnail() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.ImageData.thumbnail)
  return _impl_.thumbnail_.Release();
}
inline void ImageData::set_allocated_thumbnail(std::string* thumbnail) {
  if (thumbnail != nullptr) {
    
  } else {
    
  }
  _impl_.thumbnail_.SetAllocated(thumbnail, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.thumbnail_.IsDefault()) {
    _impl_.thumbnail_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.ImageData.thumbnail)
}

// -------------------------------------------------------------------

// ImageDatas

// repeated .DJIFRProto.Standard.ImageData images = 1;
inline int ImageDatas::_internal_images_size() const {
  return _impl_.images_.size();
}
inline int ImageDatas::images_size() const {
  return _internal_images_size();
}
inline void ImageDatas::clear_images() {
  _impl_.images_.Clear();
}
inline ::DJIFRProto::Standard::ImageData* ImageDatas::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.ImageDatas.images)
  return _impl_.images_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DJIFRProto::Standard::ImageData >*
ImageDatas::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:DJIFRProto.Standard.ImageDatas.images)
  return &_impl_.images_;
}
inline const ::DJIFRProto::Standard::ImageData& ImageDatas::_internal_images(int index) const {
  return _impl_.images_.Get(index);
}
inline const ::DJIFRProto::Standard::ImageData& ImageDatas::images(int index) const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.ImageDatas.images)
  return _internal_images(index);
}
inline ::DJIFRProto::Standard::ImageData* ImageDatas::_internal_add_images() {
  return _impl_.images_.Add();
}
inline ::DJIFRProto::Standard::ImageData* ImageDatas::add_images() {
  ::DJIFRProto::Standard::ImageData* _add = _internal_add_images();
  // @@protoc_insertion_point(field_add:DJIFRProto.Standard.ImageDatas.images)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DJIFRProto::Standard::ImageData >&
ImageDatas::images() const {
  // @@protoc_insertion_point(field_list:DJIFRProto.Standard.ImageDatas.images)
  return _impl_.images_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Standard
}  // namespace DJIFRProto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_FRImageModelProto_2eproto
