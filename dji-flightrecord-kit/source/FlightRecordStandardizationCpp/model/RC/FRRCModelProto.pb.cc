// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FRRCModelProto.proto

#include "FRRCModelProto.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace DJIFRProto {
namespace Standard {
PROTOBUF_CONSTEXPR RCFlightModel::RCFlightModel(
    ::_pbi::ConstantInitialized) {}
struct RCFlightModelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RCFlightModelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RCFlightModelDefaultTypeInternal() {}
  union {
    RCFlightModel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RCFlightModelDefaultTypeInternal _RCFlightModel_default_instance_;
PROTOBUF_CONSTEXPR Stick::Stick(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.horizontalposition_)*/0
  , /*decltype(_impl_.verticalposition_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StickDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StickDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StickDefaultTypeInternal() {}
  union {
    Stick _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StickDefaultTypeInternal _Stick_default_instance_;
PROTOBUF_CONSTEXPR RCRightWheel::RCRightWheel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ispresent_)*/false
  , /*decltype(_impl_.isturned_)*/false
  , /*decltype(_impl_.isclicked_)*/false
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RCRightWheelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RCRightWheelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RCRightWheelDefaultTypeInternal() {}
  union {
    RCRightWheel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RCRightWheelDefaultTypeInternal _RCRightWheel_default_instance_;
PROTOBUF_CONSTEXPR RCButton::RCButton(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ispresent_)*/false
  , /*decltype(_impl_.isclicked_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RCButtonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RCButtonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RCButtonDefaultTypeInternal() {}
  union {
    RCButton _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RCButtonDefaultTypeInternal _RCButton_default_instance_;
PROTOBUF_CONSTEXPR RCAircraftMapping::RCAircraftMapping(
    ::_pbi::ConstantInitialized) {}
struct RCAircraftMappingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RCAircraftMappingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RCAircraftMappingDefaultTypeInternal() {}
  union {
    RCAircraftMapping _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RCAircraftMappingDefaultTypeInternal _RCAircraftMapping_default_instance_;
PROTOBUF_CONSTEXPR RCGPSTime::RCGPSTime(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hour_)*/0u
  , /*decltype(_impl_.minute_)*/0u
  , /*decltype(_impl_.second_)*/0u
  , /*decltype(_impl_.year_)*/0u
  , /*decltype(_impl_.month_)*/0u
  , /*decltype(_impl_.day_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RCGPSTimeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RCGPSTimeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RCGPSTimeDefaultTypeInternal() {}
  union {
    RCGPSTime _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RCGPSTimeDefaultTypeInternal _RCGPSTime_default_instance_;
PROTOBUF_CONSTEXPR RCGPSData::RCGPSData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.eastspeed_)*/0
  , /*decltype(_impl_.northspeed_)*/0
  , /*decltype(_impl_.satellitecount_)*/0
  , /*decltype(_impl_.accuracy_)*/0
  , /*decltype(_impl_.isvalid_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RCGPSDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RCGPSDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RCGPSDataDefaultTypeInternal() {}
  union {
    RCGPSData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RCGPSDataDefaultTypeInternal _RCGPSData_default_instance_;
PROTOBUF_CONSTEXPR RCHardwareState::RCHardwareState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.leftstick_)*/nullptr
  , /*decltype(_impl_.rightstick_)*/nullptr
  , /*decltype(_impl_.rightwheel_)*/nullptr
  , /*decltype(_impl_.gohomebutton_)*/nullptr
  , /*decltype(_impl_.recordbutton_)*/nullptr
  , /*decltype(_impl_.shutterbutton_)*/nullptr
  , /*decltype(_impl_.playbackbutton_)*/nullptr
  , /*decltype(_impl_.pausebutton_)*/nullptr
  , /*decltype(_impl_.gpsdata_)*/nullptr
  , /*decltype(_impl_.leftwheel_)*/0
  , /*decltype(_impl_.flightmodeswitch_)*/0
  , /*decltype(_impl_.style_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RCHardwareStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RCHardwareStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RCHardwareStateDefaultTypeInternal() {}
  union {
    RCHardwareState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RCHardwareStateDefaultTypeInternal _RCHardwareState_default_instance_;
}  // namespace Standard
}  // namespace DJIFRProto
static ::_pb::Metadata file_level_metadata_FRRCModelProto_2eproto[8];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_FRRCModelProto_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_FRRCModelProto_2eproto = nullptr;

const uint32_t TableStruct_FRRCModelProto_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::RCFlightModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::Stick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::Stick, _impl_.horizontalposition_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::Stick, _impl_.verticalposition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::RCRightWheel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::RCRightWheel, _impl_.ispresent_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::RCRightWheel, _impl_.isturned_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::RCRightWheel, _impl_.isclicked_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::RCRightWheel, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::RCButton, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::RCButton, _impl_.ispresent_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::RCButton, _impl_.isclicked_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::RCAircraftMapping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::RCGPSTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::RCGPSTime, _impl_.hour_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::RCGPSTime, _impl_.minute_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::RCGPSTime, _impl_.second_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::RCGPSTime, _impl_.year_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::RCGPSTime, _impl_.month_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::RCGPSTime, _impl_.day_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::RCGPSData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::RCGPSData, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::RCGPSData, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::RCGPSData, _impl_.eastspeed_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::RCGPSData, _impl_.northspeed_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::RCGPSData, _impl_.satellitecount_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::RCGPSData, _impl_.accuracy_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::RCGPSData, _impl_.isvalid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::RCHardwareState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::RCHardwareState, _impl_.leftstick_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::RCHardwareState, _impl_.rightstick_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::RCHardwareState, _impl_.leftwheel_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::RCHardwareState, _impl_.rightwheel_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::RCHardwareState, _impl_.flightmodeswitch_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::RCHardwareState, _impl_.gohomebutton_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::RCHardwareState, _impl_.recordbutton_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::RCHardwareState, _impl_.shutterbutton_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::RCHardwareState, _impl_.playbackbutton_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::RCHardwareState, _impl_.pausebutton_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::RCHardwareState, _impl_.style_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::RCHardwareState, _impl_.gpsdata_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::DJIFRProto::Standard::RCFlightModel)},
  { 6, -1, -1, sizeof(::DJIFRProto::Standard::Stick)},
  { 14, -1, -1, sizeof(::DJIFRProto::Standard::RCRightWheel)},
  { 24, -1, -1, sizeof(::DJIFRProto::Standard::RCButton)},
  { 32, -1, -1, sizeof(::DJIFRProto::Standard::RCAircraftMapping)},
  { 38, -1, -1, sizeof(::DJIFRProto::Standard::RCGPSTime)},
  { 50, -1, -1, sizeof(::DJIFRProto::Standard::RCGPSData)},
  { 63, -1, -1, sizeof(::DJIFRProto::Standard::RCHardwareState)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::DJIFRProto::Standard::_RCFlightModel_default_instance_._instance,
  &::DJIFRProto::Standard::_Stick_default_instance_._instance,
  &::DJIFRProto::Standard::_RCRightWheel_default_instance_._instance,
  &::DJIFRProto::Standard::_RCButton_default_instance_._instance,
  &::DJIFRProto::Standard::_RCAircraftMapping_default_instance_._instance,
  &::DJIFRProto::Standard::_RCGPSTime_default_instance_._instance,
  &::DJIFRProto::Standard::_RCGPSData_default_instance_._instance,
  &::DJIFRProto::Standard::_RCHardwareState_default_instance_._instance,
};

const char descriptor_table_protodef_FRRCModelProto_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024FRRCModelProto.proto\022\023DJIFRProto.Stand"
  "ard\032\030FRCommonModelProto.proto\"C\n\rRCFligh"
  "tModel\"2\n\006Switch\022\007\n\003One\020\000\022\007\n\003Two\020\001\022\t\n\005Th"
  "ree\020\002\022\013\n\007Unknown\020\003\"=\n\005Stick\022\032\n\022horizonta"
  "lPosition\030\001 \001(\005\022\030\n\020verticalPosition\030\002 \001("
  "\005\"U\n\014RCRightWheel\022\021\n\tisPresent\030\001 \001(\010\022\020\n\010"
  "isTurned\030\002 \001(\010\022\021\n\tisClicked\030\003 \001(\010\022\r\n\005val"
  "ue\030\004 \001(\005\"0\n\010RCButton\022\021\n\tisPresent\030\001 \001(\010\022"
  "\021\n\tisClicked\030\002 \001(\010\"^\n\021RCAircraftMapping\""
  "I\n\005Style\022\n\n\006Style1\020\000\022\n\n\006Style2\020\001\022\n\n\006Styl"
  "e3\020\002\022\017\n\013StyleCustom\020\003\022\013\n\007Unknown\020\004\"c\n\tRC"
  "GPSTime\022\014\n\004hour\030\001 \001(\r\022\016\n\006minute\030\002 \001(\r\022\016\n"
  "\006second\030\003 \001(\r\022\014\n\004year\030\004 \001(\r\022\r\n\005month\030\005 \001"
  "(\r\022\013\n\003day\030\006 \001(\r\"\330\001\n\tRCGPSData\022,\n\004time\030\001 "
  "\001(\0132\036.DJIFRProto.Standard.RCGPSTime\022;\n\010l"
  "ocation\030\002 \001(\0132).DJIFRProto.Standard.Loca"
  "tionCoordinate2D\022\021\n\teastSpeed\030\003 \001(\002\022\022\n\nn"
  "orthSpeed\030\004 \001(\002\022\026\n\016satelliteCount\030\005 \001(\005\022"
  "\020\n\010accuracy\030\006 \001(\002\022\017\n\007isValid\030\007 \001(\010\"\370\004\n\017R"
  "CHardwareState\022-\n\tleftStick\030\001 \001(\0132\032.DJIF"
  "RProto.Standard.Stick\022.\n\nrightStick\030\002 \001("
  "\0132\032.DJIFRProto.Standard.Stick\022\021\n\tleftWhe"
  "el\030\003 \001(\005\0225\n\nrightWheel\030\004 \001(\0132!.DJIFRProt"
  "o.Standard.RCRightWheel\022C\n\020flightModeSwi"
  "tch\030\005 \001(\0162).DJIFRProto.Standard.RCFlight"
  "Model.Switch\0223\n\014goHomeButton\030\006 \001(\0132\035.DJI"
  "FRProto.Standard.RCButton\0223\n\014recordButto"
  "n\030\007 \001(\0132\035.DJIFRProto.Standard.RCButton\0224"
  "\n\rshutterButton\030\010 \001(\0132\035.DJIFRProto.Stand"
  "ard.RCButton\0225\n\016playbackButton\030\t \001(\0132\035.D"
  "JIFRProto.Standard.RCButton\0222\n\013pauseButt"
  "on\030\n \001(\0132\035.DJIFRProto.Standard.RCButton\022"
  ";\n\005style\030\013 \001(\0162,.DJIFRProto.Standard.RCA"
  "ircraftMapping.Style\022/\n\007GPSData\030\014 \001(\0132\036."
  "DJIFRProto.Standard.RCGPSDataB\r\242\002\nDJIFRP"
  "rotob\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_FRRCModelProto_2eproto_deps[1] = {
  &::descriptor_table_FRCommonModelProto_2eproto,
};
static ::_pbi::once_flag descriptor_table_FRRCModelProto_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_FRRCModelProto_2eproto = {
    false, false, 1412, descriptor_table_protodef_FRRCModelProto_2eproto,
    "FRRCModelProto.proto",
    &descriptor_table_FRRCModelProto_2eproto_once, descriptor_table_FRRCModelProto_2eproto_deps, 1, 8,
    schemas, file_default_instances, TableStruct_FRRCModelProto_2eproto::offsets,
    file_level_metadata_FRRCModelProto_2eproto, file_level_enum_descriptors_FRRCModelProto_2eproto,
    file_level_service_descriptors_FRRCModelProto_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_FRRCModelProto_2eproto_getter() {
  return &descriptor_table_FRRCModelProto_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_FRRCModelProto_2eproto(&descriptor_table_FRRCModelProto_2eproto);
namespace DJIFRProto {
namespace Standard {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RCFlightModel_Switch_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_FRRCModelProto_2eproto);
  return file_level_enum_descriptors_FRRCModelProto_2eproto[0];
}
bool RCFlightModel_Switch_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RCFlightModel_Switch RCFlightModel::One;
constexpr RCFlightModel_Switch RCFlightModel::Two;
constexpr RCFlightModel_Switch RCFlightModel::Three;
constexpr RCFlightModel_Switch RCFlightModel::Unknown;
constexpr RCFlightModel_Switch RCFlightModel::Switch_MIN;
constexpr RCFlightModel_Switch RCFlightModel::Switch_MAX;
constexpr int RCFlightModel::Switch_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RCAircraftMapping_Style_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_FRRCModelProto_2eproto);
  return file_level_enum_descriptors_FRRCModelProto_2eproto[1];
}
bool RCAircraftMapping_Style_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RCAircraftMapping_Style RCAircraftMapping::Style1;
constexpr RCAircraftMapping_Style RCAircraftMapping::Style2;
constexpr RCAircraftMapping_Style RCAircraftMapping::Style3;
constexpr RCAircraftMapping_Style RCAircraftMapping::StyleCustom;
constexpr RCAircraftMapping_Style RCAircraftMapping::Unknown;
constexpr RCAircraftMapping_Style RCAircraftMapping::Style_MIN;
constexpr RCAircraftMapping_Style RCAircraftMapping::Style_MAX;
constexpr int RCAircraftMapping::Style_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class RCFlightModel::_Internal {
 public:
};

RCFlightModel::RCFlightModel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:DJIFRProto.Standard.RCFlightModel)
}
RCFlightModel::RCFlightModel(const RCFlightModel& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  RCFlightModel* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.RCFlightModel)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RCFlightModel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RCFlightModel::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RCFlightModel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FRRCModelProto_2eproto_getter, &descriptor_table_FRRCModelProto_2eproto_once,
      file_level_metadata_FRRCModelProto_2eproto[0]);
}

// ===================================================================

class Stick::_Internal {
 public:
};

Stick::Stick(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DJIFRProto.Standard.Stick)
}
Stick::Stick(const Stick& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Stick* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.horizontalposition_){}
    , decltype(_impl_.verticalposition_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.horizontalposition_, &from._impl_.horizontalposition_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.verticalposition_) -
    reinterpret_cast<char*>(&_impl_.horizontalposition_)) + sizeof(_impl_.verticalposition_));
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.Stick)
}

inline void Stick::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.horizontalposition_){0}
    , decltype(_impl_.verticalposition_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Stick::~Stick() {
  // @@protoc_insertion_point(destructor:DJIFRProto.Standard.Stick)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Stick::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Stick::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Stick::Clear() {
// @@protoc_insertion_point(message_clear_start:DJIFRProto.Standard.Stick)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.horizontalposition_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.verticalposition_) -
      reinterpret_cast<char*>(&_impl_.horizontalposition_)) + sizeof(_impl_.verticalposition_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Stick::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 horizontalPosition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.horizontalposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 verticalPosition = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.verticalposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Stick::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DJIFRProto.Standard.Stick)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 horizontalPosition = 1;
  if (this->_internal_horizontalposition() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_horizontalposition(), target);
  }

  // int32 verticalPosition = 2;
  if (this->_internal_verticalposition() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_verticalposition(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DJIFRProto.Standard.Stick)
  return target;
}

size_t Stick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DJIFRProto.Standard.Stick)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 horizontalPosition = 1;
  if (this->_internal_horizontalposition() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_horizontalposition());
  }

  // int32 verticalPosition = 2;
  if (this->_internal_verticalposition() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_verticalposition());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Stick::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Stick::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Stick::GetClassData() const { return &_class_data_; }


void Stick::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Stick*>(&to_msg);
  auto& from = static_cast<const Stick&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DJIFRProto.Standard.Stick)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_horizontalposition() != 0) {
    _this->_internal_set_horizontalposition(from._internal_horizontalposition());
  }
  if (from._internal_verticalposition() != 0) {
    _this->_internal_set_verticalposition(from._internal_verticalposition());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Stick::CopyFrom(const Stick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DJIFRProto.Standard.Stick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stick::IsInitialized() const {
  return true;
}

void Stick::InternalSwap(Stick* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Stick, _impl_.verticalposition_)
      + sizeof(Stick::_impl_.verticalposition_)
      - PROTOBUF_FIELD_OFFSET(Stick, _impl_.horizontalposition_)>(
          reinterpret_cast<char*>(&_impl_.horizontalposition_),
          reinterpret_cast<char*>(&other->_impl_.horizontalposition_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Stick::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FRRCModelProto_2eproto_getter, &descriptor_table_FRRCModelProto_2eproto_once,
      file_level_metadata_FRRCModelProto_2eproto[1]);
}

// ===================================================================

class RCRightWheel::_Internal {
 public:
};

RCRightWheel::RCRightWheel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DJIFRProto.Standard.RCRightWheel)
}
RCRightWheel::RCRightWheel(const RCRightWheel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RCRightWheel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ispresent_){}
    , decltype(_impl_.isturned_){}
    , decltype(_impl_.isclicked_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ispresent_, &from._impl_.ispresent_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.value_) -
    reinterpret_cast<char*>(&_impl_.ispresent_)) + sizeof(_impl_.value_));
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.RCRightWheel)
}

inline void RCRightWheel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ispresent_){false}
    , decltype(_impl_.isturned_){false}
    , decltype(_impl_.isclicked_){false}
    , decltype(_impl_.value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RCRightWheel::~RCRightWheel() {
  // @@protoc_insertion_point(destructor:DJIFRProto.Standard.RCRightWheel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RCRightWheel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RCRightWheel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RCRightWheel::Clear() {
// @@protoc_insertion_point(message_clear_start:DJIFRProto.Standard.RCRightWheel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.ispresent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.value_) -
      reinterpret_cast<char*>(&_impl_.ispresent_)) + sizeof(_impl_.value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RCRightWheel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool isPresent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ispresent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isTurned = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.isturned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isClicked = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.isclicked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RCRightWheel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DJIFRProto.Standard.RCRightWheel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isPresent = 1;
  if (this->_internal_ispresent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_ispresent(), target);
  }

  // bool isTurned = 2;
  if (this->_internal_isturned() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_isturned(), target);
  }

  // bool isClicked = 3;
  if (this->_internal_isclicked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_isclicked(), target);
  }

  // int32 value = 4;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DJIFRProto.Standard.RCRightWheel)
  return target;
}

size_t RCRightWheel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DJIFRProto.Standard.RCRightWheel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool isPresent = 1;
  if (this->_internal_ispresent() != 0) {
    total_size += 1 + 1;
  }

  // bool isTurned = 2;
  if (this->_internal_isturned() != 0) {
    total_size += 1 + 1;
  }

  // bool isClicked = 3;
  if (this->_internal_isclicked() != 0) {
    total_size += 1 + 1;
  }

  // int32 value = 4;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RCRightWheel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RCRightWheel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RCRightWheel::GetClassData() const { return &_class_data_; }


void RCRightWheel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RCRightWheel*>(&to_msg);
  auto& from = static_cast<const RCRightWheel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DJIFRProto.Standard.RCRightWheel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ispresent() != 0) {
    _this->_internal_set_ispresent(from._internal_ispresent());
  }
  if (from._internal_isturned() != 0) {
    _this->_internal_set_isturned(from._internal_isturned());
  }
  if (from._internal_isclicked() != 0) {
    _this->_internal_set_isclicked(from._internal_isclicked());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RCRightWheel::CopyFrom(const RCRightWheel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DJIFRProto.Standard.RCRightWheel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RCRightWheel::IsInitialized() const {
  return true;
}

void RCRightWheel::InternalSwap(RCRightWheel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RCRightWheel, _impl_.value_)
      + sizeof(RCRightWheel::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(RCRightWheel, _impl_.ispresent_)>(
          reinterpret_cast<char*>(&_impl_.ispresent_),
          reinterpret_cast<char*>(&other->_impl_.ispresent_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RCRightWheel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FRRCModelProto_2eproto_getter, &descriptor_table_FRRCModelProto_2eproto_once,
      file_level_metadata_FRRCModelProto_2eproto[2]);
}

// ===================================================================

class RCButton::_Internal {
 public:
};

RCButton::RCButton(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DJIFRProto.Standard.RCButton)
}
RCButton::RCButton(const RCButton& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RCButton* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ispresent_){}
    , decltype(_impl_.isclicked_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ispresent_, &from._impl_.ispresent_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.isclicked_) -
    reinterpret_cast<char*>(&_impl_.ispresent_)) + sizeof(_impl_.isclicked_));
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.RCButton)
}

inline void RCButton::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ispresent_){false}
    , decltype(_impl_.isclicked_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RCButton::~RCButton() {
  // @@protoc_insertion_point(destructor:DJIFRProto.Standard.RCButton)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RCButton::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RCButton::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RCButton::Clear() {
// @@protoc_insertion_point(message_clear_start:DJIFRProto.Standard.RCButton)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.ispresent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.isclicked_) -
      reinterpret_cast<char*>(&_impl_.ispresent_)) + sizeof(_impl_.isclicked_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RCButton::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool isPresent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ispresent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isClicked = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.isclicked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RCButton::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DJIFRProto.Standard.RCButton)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isPresent = 1;
  if (this->_internal_ispresent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_ispresent(), target);
  }

  // bool isClicked = 2;
  if (this->_internal_isclicked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_isclicked(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DJIFRProto.Standard.RCButton)
  return target;
}

size_t RCButton::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DJIFRProto.Standard.RCButton)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool isPresent = 1;
  if (this->_internal_ispresent() != 0) {
    total_size += 1 + 1;
  }

  // bool isClicked = 2;
  if (this->_internal_isclicked() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RCButton::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RCButton::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RCButton::GetClassData() const { return &_class_data_; }


void RCButton::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RCButton*>(&to_msg);
  auto& from = static_cast<const RCButton&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DJIFRProto.Standard.RCButton)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ispresent() != 0) {
    _this->_internal_set_ispresent(from._internal_ispresent());
  }
  if (from._internal_isclicked() != 0) {
    _this->_internal_set_isclicked(from._internal_isclicked());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RCButton::CopyFrom(const RCButton& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DJIFRProto.Standard.RCButton)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RCButton::IsInitialized() const {
  return true;
}

void RCButton::InternalSwap(RCButton* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RCButton, _impl_.isclicked_)
      + sizeof(RCButton::_impl_.isclicked_)
      - PROTOBUF_FIELD_OFFSET(RCButton, _impl_.ispresent_)>(
          reinterpret_cast<char*>(&_impl_.ispresent_),
          reinterpret_cast<char*>(&other->_impl_.ispresent_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RCButton::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FRRCModelProto_2eproto_getter, &descriptor_table_FRRCModelProto_2eproto_once,
      file_level_metadata_FRRCModelProto_2eproto[3]);
}

// ===================================================================

class RCAircraftMapping::_Internal {
 public:
};

RCAircraftMapping::RCAircraftMapping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:DJIFRProto.Standard.RCAircraftMapping)
}
RCAircraftMapping::RCAircraftMapping(const RCAircraftMapping& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  RCAircraftMapping* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.RCAircraftMapping)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RCAircraftMapping::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RCAircraftMapping::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RCAircraftMapping::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FRRCModelProto_2eproto_getter, &descriptor_table_FRRCModelProto_2eproto_once,
      file_level_metadata_FRRCModelProto_2eproto[4]);
}

// ===================================================================

class RCGPSTime::_Internal {
 public:
};

RCGPSTime::RCGPSTime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DJIFRProto.Standard.RCGPSTime)
}
RCGPSTime::RCGPSTime(const RCGPSTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RCGPSTime* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hour_){}
    , decltype(_impl_.minute_){}
    , decltype(_impl_.second_){}
    , decltype(_impl_.year_){}
    , decltype(_impl_.month_){}
    , decltype(_impl_.day_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.hour_, &from._impl_.hour_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.day_) -
    reinterpret_cast<char*>(&_impl_.hour_)) + sizeof(_impl_.day_));
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.RCGPSTime)
}

inline void RCGPSTime::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hour_){0u}
    , decltype(_impl_.minute_){0u}
    , decltype(_impl_.second_){0u}
    , decltype(_impl_.year_){0u}
    , decltype(_impl_.month_){0u}
    , decltype(_impl_.day_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RCGPSTime::~RCGPSTime() {
  // @@protoc_insertion_point(destructor:DJIFRProto.Standard.RCGPSTime)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RCGPSTime::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RCGPSTime::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RCGPSTime::Clear() {
// @@protoc_insertion_point(message_clear_start:DJIFRProto.Standard.RCGPSTime)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.hour_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.day_) -
      reinterpret_cast<char*>(&_impl_.hour_)) + sizeof(_impl_.day_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RCGPSTime::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 hour = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.hour_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 minute = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.minute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 second = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.second_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 year = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 month = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 day = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RCGPSTime::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DJIFRProto.Standard.RCGPSTime)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 hour = 1;
  if (this->_internal_hour() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hour(), target);
  }

  // uint32 minute = 2;
  if (this->_internal_minute() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_minute(), target);
  }

  // uint32 second = 3;
  if (this->_internal_second() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_second(), target);
  }

  // uint32 year = 4;
  if (this->_internal_year() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_year(), target);
  }

  // uint32 month = 5;
  if (this->_internal_month() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_month(), target);
  }

  // uint32 day = 6;
  if (this->_internal_day() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_day(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DJIFRProto.Standard.RCGPSTime)
  return target;
}

size_t RCGPSTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DJIFRProto.Standard.RCGPSTime)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 hour = 1;
  if (this->_internal_hour() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hour());
  }

  // uint32 minute = 2;
  if (this->_internal_minute() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_minute());
  }

  // uint32 second = 3;
  if (this->_internal_second() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_second());
  }

  // uint32 year = 4;
  if (this->_internal_year() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_year());
  }

  // uint32 month = 5;
  if (this->_internal_month() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_month());
  }

  // uint32 day = 6;
  if (this->_internal_day() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_day());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RCGPSTime::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RCGPSTime::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RCGPSTime::GetClassData() const { return &_class_data_; }


void RCGPSTime::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RCGPSTime*>(&to_msg);
  auto& from = static_cast<const RCGPSTime&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DJIFRProto.Standard.RCGPSTime)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_hour() != 0) {
    _this->_internal_set_hour(from._internal_hour());
  }
  if (from._internal_minute() != 0) {
    _this->_internal_set_minute(from._internal_minute());
  }
  if (from._internal_second() != 0) {
    _this->_internal_set_second(from._internal_second());
  }
  if (from._internal_year() != 0) {
    _this->_internal_set_year(from._internal_year());
  }
  if (from._internal_month() != 0) {
    _this->_internal_set_month(from._internal_month());
  }
  if (from._internal_day() != 0) {
    _this->_internal_set_day(from._internal_day());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RCGPSTime::CopyFrom(const RCGPSTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DJIFRProto.Standard.RCGPSTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RCGPSTime::IsInitialized() const {
  return true;
}

void RCGPSTime::InternalSwap(RCGPSTime* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RCGPSTime, _impl_.day_)
      + sizeof(RCGPSTime::_impl_.day_)
      - PROTOBUF_FIELD_OFFSET(RCGPSTime, _impl_.hour_)>(
          reinterpret_cast<char*>(&_impl_.hour_),
          reinterpret_cast<char*>(&other->_impl_.hour_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RCGPSTime::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FRRCModelProto_2eproto_getter, &descriptor_table_FRRCModelProto_2eproto_once,
      file_level_metadata_FRRCModelProto_2eproto[5]);
}

// ===================================================================

class RCGPSData::_Internal {
 public:
  static const ::DJIFRProto::Standard::RCGPSTime& time(const RCGPSData* msg);
  static const ::DJIFRProto::Standard::LocationCoordinate2D& location(const RCGPSData* msg);
};

const ::DJIFRProto::Standard::RCGPSTime&
RCGPSData::_Internal::time(const RCGPSData* msg) {
  return *msg->_impl_.time_;
}
const ::DJIFRProto::Standard::LocationCoordinate2D&
RCGPSData::_Internal::location(const RCGPSData* msg) {
  return *msg->_impl_.location_;
}
void RCGPSData::clear_location() {
  if (GetArenaForAllocation() == nullptr && _impl_.location_ != nullptr) {
    delete _impl_.location_;
  }
  _impl_.location_ = nullptr;
}
RCGPSData::RCGPSData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DJIFRProto.Standard.RCGPSData)
}
RCGPSData::RCGPSData(const RCGPSData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RCGPSData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.time_){nullptr}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.eastspeed_){}
    , decltype(_impl_.northspeed_){}
    , decltype(_impl_.satellitecount_){}
    , decltype(_impl_.accuracy_){}
    , decltype(_impl_.isvalid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_time()) {
    _this->_impl_.time_ = new ::DJIFRProto::Standard::RCGPSTime(*from._impl_.time_);
  }
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::DJIFRProto::Standard::LocationCoordinate2D(*from._impl_.location_);
  }
  ::memcpy(&_impl_.eastspeed_, &from._impl_.eastspeed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.isvalid_) -
    reinterpret_cast<char*>(&_impl_.eastspeed_)) + sizeof(_impl_.isvalid_));
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.RCGPSData)
}

inline void RCGPSData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.time_){nullptr}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.eastspeed_){0}
    , decltype(_impl_.northspeed_){0}
    , decltype(_impl_.satellitecount_){0}
    , decltype(_impl_.accuracy_){0}
    , decltype(_impl_.isvalid_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RCGPSData::~RCGPSData() {
  // @@protoc_insertion_point(destructor:DJIFRProto.Standard.RCGPSData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RCGPSData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.time_;
  if (this != internal_default_instance()) delete _impl_.location_;
}

void RCGPSData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RCGPSData::Clear() {
// @@protoc_insertion_point(message_clear_start:DJIFRProto.Standard.RCGPSData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.location_ != nullptr) {
    delete _impl_.location_;
  }
  _impl_.location_ = nullptr;
  ::memset(&_impl_.eastspeed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.isvalid_) -
      reinterpret_cast<char*>(&_impl_.eastspeed_)) + sizeof(_impl_.isvalid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RCGPSData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DJIFRProto.Standard.RCGPSTime time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DJIFRProto.Standard.LocationCoordinate2D location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float eastSpeed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.eastspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float northSpeed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.northspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 satelliteCount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.satellitecount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float accuracy = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.accuracy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool isValid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.isvalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RCGPSData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DJIFRProto.Standard.RCGPSData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DJIFRProto.Standard.RCGPSTime time = 1;
  if (this->_internal_has_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // .DJIFRProto.Standard.LocationCoordinate2D location = 2;
  if (this->_internal_has_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // float eastSpeed = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eastspeed = this->_internal_eastspeed();
  uint32_t raw_eastspeed;
  memcpy(&raw_eastspeed, &tmp_eastspeed, sizeof(tmp_eastspeed));
  if (raw_eastspeed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_eastspeed(), target);
  }

  // float northSpeed = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_northspeed = this->_internal_northspeed();
  uint32_t raw_northspeed;
  memcpy(&raw_northspeed, &tmp_northspeed, sizeof(tmp_northspeed));
  if (raw_northspeed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_northspeed(), target);
  }

  // int32 satelliteCount = 5;
  if (this->_internal_satellitecount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_satellitecount(), target);
  }

  // float accuracy = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_accuracy = this->_internal_accuracy();
  uint32_t raw_accuracy;
  memcpy(&raw_accuracy, &tmp_accuracy, sizeof(tmp_accuracy));
  if (raw_accuracy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_accuracy(), target);
  }

  // bool isValid = 7;
  if (this->_internal_isvalid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_isvalid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DJIFRProto.Standard.RCGPSData)
  return target;
}

size_t RCGPSData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DJIFRProto.Standard.RCGPSData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DJIFRProto.Standard.RCGPSTime time = 1;
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_);
  }

  // .DJIFRProto.Standard.LocationCoordinate2D location = 2;
  if (this->_internal_has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.location_);
  }

  // float eastSpeed = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eastspeed = this->_internal_eastspeed();
  uint32_t raw_eastspeed;
  memcpy(&raw_eastspeed, &tmp_eastspeed, sizeof(tmp_eastspeed));
  if (raw_eastspeed != 0) {
    total_size += 1 + 4;
  }

  // float northSpeed = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_northspeed = this->_internal_northspeed();
  uint32_t raw_northspeed;
  memcpy(&raw_northspeed, &tmp_northspeed, sizeof(tmp_northspeed));
  if (raw_northspeed != 0) {
    total_size += 1 + 4;
  }

  // int32 satelliteCount = 5;
  if (this->_internal_satellitecount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_satellitecount());
  }

  // float accuracy = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_accuracy = this->_internal_accuracy();
  uint32_t raw_accuracy;
  memcpy(&raw_accuracy, &tmp_accuracy, sizeof(tmp_accuracy));
  if (raw_accuracy != 0) {
    total_size += 1 + 4;
  }

  // bool isValid = 7;
  if (this->_internal_isvalid() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RCGPSData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RCGPSData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RCGPSData::GetClassData() const { return &_class_data_; }


void RCGPSData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RCGPSData*>(&to_msg);
  auto& from = static_cast<const RCGPSData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DJIFRProto.Standard.RCGPSData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_time()) {
    _this->_internal_mutable_time()->::DJIFRProto::Standard::RCGPSTime::MergeFrom(
        from._internal_time());
  }
  if (from._internal_has_location()) {
    _this->_internal_mutable_location()->::DJIFRProto::Standard::LocationCoordinate2D::MergeFrom(
        from._internal_location());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eastspeed = from._internal_eastspeed();
  uint32_t raw_eastspeed;
  memcpy(&raw_eastspeed, &tmp_eastspeed, sizeof(tmp_eastspeed));
  if (raw_eastspeed != 0) {
    _this->_internal_set_eastspeed(from._internal_eastspeed());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_northspeed = from._internal_northspeed();
  uint32_t raw_northspeed;
  memcpy(&raw_northspeed, &tmp_northspeed, sizeof(tmp_northspeed));
  if (raw_northspeed != 0) {
    _this->_internal_set_northspeed(from._internal_northspeed());
  }
  if (from._internal_satellitecount() != 0) {
    _this->_internal_set_satellitecount(from._internal_satellitecount());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_accuracy = from._internal_accuracy();
  uint32_t raw_accuracy;
  memcpy(&raw_accuracy, &tmp_accuracy, sizeof(tmp_accuracy));
  if (raw_accuracy != 0) {
    _this->_internal_set_accuracy(from._internal_accuracy());
  }
  if (from._internal_isvalid() != 0) {
    _this->_internal_set_isvalid(from._internal_isvalid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RCGPSData::CopyFrom(const RCGPSData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DJIFRProto.Standard.RCGPSData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RCGPSData::IsInitialized() const {
  return true;
}

void RCGPSData::InternalSwap(RCGPSData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RCGPSData, _impl_.isvalid_)
      + sizeof(RCGPSData::_impl_.isvalid_)
      - PROTOBUF_FIELD_OFFSET(RCGPSData, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RCGPSData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FRRCModelProto_2eproto_getter, &descriptor_table_FRRCModelProto_2eproto_once,
      file_level_metadata_FRRCModelProto_2eproto[6]);
}

// ===================================================================

class RCHardwareState::_Internal {
 public:
  static const ::DJIFRProto::Standard::Stick& leftstick(const RCHardwareState* msg);
  static const ::DJIFRProto::Standard::Stick& rightstick(const RCHardwareState* msg);
  static const ::DJIFRProto::Standard::RCRightWheel& rightwheel(const RCHardwareState* msg);
  static const ::DJIFRProto::Standard::RCButton& gohomebutton(const RCHardwareState* msg);
  static const ::DJIFRProto::Standard::RCButton& recordbutton(const RCHardwareState* msg);
  static const ::DJIFRProto::Standard::RCButton& shutterbutton(const RCHardwareState* msg);
  static const ::DJIFRProto::Standard::RCButton& playbackbutton(const RCHardwareState* msg);
  static const ::DJIFRProto::Standard::RCButton& pausebutton(const RCHardwareState* msg);
  static const ::DJIFRProto::Standard::RCGPSData& gpsdata(const RCHardwareState* msg);
};

const ::DJIFRProto::Standard::Stick&
RCHardwareState::_Internal::leftstick(const RCHardwareState* msg) {
  return *msg->_impl_.leftstick_;
}
const ::DJIFRProto::Standard::Stick&
RCHardwareState::_Internal::rightstick(const RCHardwareState* msg) {
  return *msg->_impl_.rightstick_;
}
const ::DJIFRProto::Standard::RCRightWheel&
RCHardwareState::_Internal::rightwheel(const RCHardwareState* msg) {
  return *msg->_impl_.rightwheel_;
}
const ::DJIFRProto::Standard::RCButton&
RCHardwareState::_Internal::gohomebutton(const RCHardwareState* msg) {
  return *msg->_impl_.gohomebutton_;
}
const ::DJIFRProto::Standard::RCButton&
RCHardwareState::_Internal::recordbutton(const RCHardwareState* msg) {
  return *msg->_impl_.recordbutton_;
}
const ::DJIFRProto::Standard::RCButton&
RCHardwareState::_Internal::shutterbutton(const RCHardwareState* msg) {
  return *msg->_impl_.shutterbutton_;
}
const ::DJIFRProto::Standard::RCButton&
RCHardwareState::_Internal::playbackbutton(const RCHardwareState* msg) {
  return *msg->_impl_.playbackbutton_;
}
const ::DJIFRProto::Standard::RCButton&
RCHardwareState::_Internal::pausebutton(const RCHardwareState* msg) {
  return *msg->_impl_.pausebutton_;
}
const ::DJIFRProto::Standard::RCGPSData&
RCHardwareState::_Internal::gpsdata(const RCHardwareState* msg) {
  return *msg->_impl_.gpsdata_;
}
RCHardwareState::RCHardwareState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DJIFRProto.Standard.RCHardwareState)
}
RCHardwareState::RCHardwareState(const RCHardwareState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RCHardwareState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.leftstick_){nullptr}
    , decltype(_impl_.rightstick_){nullptr}
    , decltype(_impl_.rightwheel_){nullptr}
    , decltype(_impl_.gohomebutton_){nullptr}
    , decltype(_impl_.recordbutton_){nullptr}
    , decltype(_impl_.shutterbutton_){nullptr}
    , decltype(_impl_.playbackbutton_){nullptr}
    , decltype(_impl_.pausebutton_){nullptr}
    , decltype(_impl_.gpsdata_){nullptr}
    , decltype(_impl_.leftwheel_){}
    , decltype(_impl_.flightmodeswitch_){}
    , decltype(_impl_.style_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_leftstick()) {
    _this->_impl_.leftstick_ = new ::DJIFRProto::Standard::Stick(*from._impl_.leftstick_);
  }
  if (from._internal_has_rightstick()) {
    _this->_impl_.rightstick_ = new ::DJIFRProto::Standard::Stick(*from._impl_.rightstick_);
  }
  if (from._internal_has_rightwheel()) {
    _this->_impl_.rightwheel_ = new ::DJIFRProto::Standard::RCRightWheel(*from._impl_.rightwheel_);
  }
  if (from._internal_has_gohomebutton()) {
    _this->_impl_.gohomebutton_ = new ::DJIFRProto::Standard::RCButton(*from._impl_.gohomebutton_);
  }
  if (from._internal_has_recordbutton()) {
    _this->_impl_.recordbutton_ = new ::DJIFRProto::Standard::RCButton(*from._impl_.recordbutton_);
  }
  if (from._internal_has_shutterbutton()) {
    _this->_impl_.shutterbutton_ = new ::DJIFRProto::Standard::RCButton(*from._impl_.shutterbutton_);
  }
  if (from._internal_has_playbackbutton()) {
    _this->_impl_.playbackbutton_ = new ::DJIFRProto::Standard::RCButton(*from._impl_.playbackbutton_);
  }
  if (from._internal_has_pausebutton()) {
    _this->_impl_.pausebutton_ = new ::DJIFRProto::Standard::RCButton(*from._impl_.pausebutton_);
  }
  if (from._internal_has_gpsdata()) {
    _this->_impl_.gpsdata_ = new ::DJIFRProto::Standard::RCGPSData(*from._impl_.gpsdata_);
  }
  ::memcpy(&_impl_.leftwheel_, &from._impl_.leftwheel_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.style_) -
    reinterpret_cast<char*>(&_impl_.leftwheel_)) + sizeof(_impl_.style_));
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.RCHardwareState)
}

inline void RCHardwareState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.leftstick_){nullptr}
    , decltype(_impl_.rightstick_){nullptr}
    , decltype(_impl_.rightwheel_){nullptr}
    , decltype(_impl_.gohomebutton_){nullptr}
    , decltype(_impl_.recordbutton_){nullptr}
    , decltype(_impl_.shutterbutton_){nullptr}
    , decltype(_impl_.playbackbutton_){nullptr}
    , decltype(_impl_.pausebutton_){nullptr}
    , decltype(_impl_.gpsdata_){nullptr}
    , decltype(_impl_.leftwheel_){0}
    , decltype(_impl_.flightmodeswitch_){0}
    , decltype(_impl_.style_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RCHardwareState::~RCHardwareState() {
  // @@protoc_insertion_point(destructor:DJIFRProto.Standard.RCHardwareState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RCHardwareState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.leftstick_;
  if (this != internal_default_instance()) delete _impl_.rightstick_;
  if (this != internal_default_instance()) delete _impl_.rightwheel_;
  if (this != internal_default_instance()) delete _impl_.gohomebutton_;
  if (this != internal_default_instance()) delete _impl_.recordbutton_;
  if (this != internal_default_instance()) delete _impl_.shutterbutton_;
  if (this != internal_default_instance()) delete _impl_.playbackbutton_;
  if (this != internal_default_instance()) delete _impl_.pausebutton_;
  if (this != internal_default_instance()) delete _impl_.gpsdata_;
}

void RCHardwareState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RCHardwareState::Clear() {
// @@protoc_insertion_point(message_clear_start:DJIFRProto.Standard.RCHardwareState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.leftstick_ != nullptr) {
    delete _impl_.leftstick_;
  }
  _impl_.leftstick_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rightstick_ != nullptr) {
    delete _impl_.rightstick_;
  }
  _impl_.rightstick_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rightwheel_ != nullptr) {
    delete _impl_.rightwheel_;
  }
  _impl_.rightwheel_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.gohomebutton_ != nullptr) {
    delete _impl_.gohomebutton_;
  }
  _impl_.gohomebutton_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.recordbutton_ != nullptr) {
    delete _impl_.recordbutton_;
  }
  _impl_.recordbutton_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.shutterbutton_ != nullptr) {
    delete _impl_.shutterbutton_;
  }
  _impl_.shutterbutton_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.playbackbutton_ != nullptr) {
    delete _impl_.playbackbutton_;
  }
  _impl_.playbackbutton_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pausebutton_ != nullptr) {
    delete _impl_.pausebutton_;
  }
  _impl_.pausebutton_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.gpsdata_ != nullptr) {
    delete _impl_.gpsdata_;
  }
  _impl_.gpsdata_ = nullptr;
  ::memset(&_impl_.leftwheel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.style_) -
      reinterpret_cast<char*>(&_impl_.leftwheel_)) + sizeof(_impl_.style_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RCHardwareState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DJIFRProto.Standard.Stick leftStick = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_leftstick(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DJIFRProto.Standard.Stick rightStick = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rightstick(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 leftWheel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.leftwheel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DJIFRProto.Standard.RCRightWheel rightWheel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rightwheel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DJIFRProto.Standard.RCFlightModel.Switch flightModeSwitch = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_flightmodeswitch(static_cast<::DJIFRProto::Standard::RCFlightModel_Switch>(val));
        } else
          goto handle_unusual;
        continue;
      // .DJIFRProto.Standard.RCButton goHomeButton = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_gohomebutton(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DJIFRProto.Standard.RCButton recordButton = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_recordbutton(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DJIFRProto.Standard.RCButton shutterButton = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_shutterbutton(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DJIFRProto.Standard.RCButton playbackButton = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_playbackbutton(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DJIFRProto.Standard.RCButton pauseButton = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_pausebutton(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DJIFRProto.Standard.RCAircraftMapping.Style style = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_style(static_cast<::DJIFRProto::Standard::RCAircraftMapping_Style>(val));
        } else
          goto handle_unusual;
        continue;
      // .DJIFRProto.Standard.RCGPSData GPSData = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_gpsdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RCHardwareState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DJIFRProto.Standard.RCHardwareState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DJIFRProto.Standard.Stick leftStick = 1;
  if (this->_internal_has_leftstick()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::leftstick(this),
        _Internal::leftstick(this).GetCachedSize(), target, stream);
  }

  // .DJIFRProto.Standard.Stick rightStick = 2;
  if (this->_internal_has_rightstick()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rightstick(this),
        _Internal::rightstick(this).GetCachedSize(), target, stream);
  }

  // int32 leftWheel = 3;
  if (this->_internal_leftwheel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_leftwheel(), target);
  }

  // .DJIFRProto.Standard.RCRightWheel rightWheel = 4;
  if (this->_internal_has_rightwheel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::rightwheel(this),
        _Internal::rightwheel(this).GetCachedSize(), target, stream);
  }

  // .DJIFRProto.Standard.RCFlightModel.Switch flightModeSwitch = 5;
  if (this->_internal_flightmodeswitch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_flightmodeswitch(), target);
  }

  // .DJIFRProto.Standard.RCButton goHomeButton = 6;
  if (this->_internal_has_gohomebutton()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::gohomebutton(this),
        _Internal::gohomebutton(this).GetCachedSize(), target, stream);
  }

  // .DJIFRProto.Standard.RCButton recordButton = 7;
  if (this->_internal_has_recordbutton()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::recordbutton(this),
        _Internal::recordbutton(this).GetCachedSize(), target, stream);
  }

  // .DJIFRProto.Standard.RCButton shutterButton = 8;
  if (this->_internal_has_shutterbutton()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::shutterbutton(this),
        _Internal::shutterbutton(this).GetCachedSize(), target, stream);
  }

  // .DJIFRProto.Standard.RCButton playbackButton = 9;
  if (this->_internal_has_playbackbutton()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::playbackbutton(this),
        _Internal::playbackbutton(this).GetCachedSize(), target, stream);
  }

  // .DJIFRProto.Standard.RCButton pauseButton = 10;
  if (this->_internal_has_pausebutton()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::pausebutton(this),
        _Internal::pausebutton(this).GetCachedSize(), target, stream);
  }

  // .DJIFRProto.Standard.RCAircraftMapping.Style style = 11;
  if (this->_internal_style() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      11, this->_internal_style(), target);
  }

  // .DJIFRProto.Standard.RCGPSData GPSData = 12;
  if (this->_internal_has_gpsdata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::gpsdata(this),
        _Internal::gpsdata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DJIFRProto.Standard.RCHardwareState)
  return target;
}

size_t RCHardwareState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DJIFRProto.Standard.RCHardwareState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DJIFRProto.Standard.Stick leftStick = 1;
  if (this->_internal_has_leftstick()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.leftstick_);
  }

  // .DJIFRProto.Standard.Stick rightStick = 2;
  if (this->_internal_has_rightstick()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rightstick_);
  }

  // .DJIFRProto.Standard.RCRightWheel rightWheel = 4;
  if (this->_internal_has_rightwheel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rightwheel_);
  }

  // .DJIFRProto.Standard.RCButton goHomeButton = 6;
  if (this->_internal_has_gohomebutton()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gohomebutton_);
  }

  // .DJIFRProto.Standard.RCButton recordButton = 7;
  if (this->_internal_has_recordbutton()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.recordbutton_);
  }

  // .DJIFRProto.Standard.RCButton shutterButton = 8;
  if (this->_internal_has_shutterbutton()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.shutterbutton_);
  }

  // .DJIFRProto.Standard.RCButton playbackButton = 9;
  if (this->_internal_has_playbackbutton()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.playbackbutton_);
  }

  // .DJIFRProto.Standard.RCButton pauseButton = 10;
  if (this->_internal_has_pausebutton()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pausebutton_);
  }

  // .DJIFRProto.Standard.RCGPSData GPSData = 12;
  if (this->_internal_has_gpsdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gpsdata_);
  }

  // int32 leftWheel = 3;
  if (this->_internal_leftwheel() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_leftwheel());
  }

  // .DJIFRProto.Standard.RCFlightModel.Switch flightModeSwitch = 5;
  if (this->_internal_flightmodeswitch() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_flightmodeswitch());
  }

  // .DJIFRProto.Standard.RCAircraftMapping.Style style = 11;
  if (this->_internal_style() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_style());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RCHardwareState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RCHardwareState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RCHardwareState::GetClassData() const { return &_class_data_; }


void RCHardwareState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RCHardwareState*>(&to_msg);
  auto& from = static_cast<const RCHardwareState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DJIFRProto.Standard.RCHardwareState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_leftstick()) {
    _this->_internal_mutable_leftstick()->::DJIFRProto::Standard::Stick::MergeFrom(
        from._internal_leftstick());
  }
  if (from._internal_has_rightstick()) {
    _this->_internal_mutable_rightstick()->::DJIFRProto::Standard::Stick::MergeFrom(
        from._internal_rightstick());
  }
  if (from._internal_has_rightwheel()) {
    _this->_internal_mutable_rightwheel()->::DJIFRProto::Standard::RCRightWheel::MergeFrom(
        from._internal_rightwheel());
  }
  if (from._internal_has_gohomebutton()) {
    _this->_internal_mutable_gohomebutton()->::DJIFRProto::Standard::RCButton::MergeFrom(
        from._internal_gohomebutton());
  }
  if (from._internal_has_recordbutton()) {
    _this->_internal_mutable_recordbutton()->::DJIFRProto::Standard::RCButton::MergeFrom(
        from._internal_recordbutton());
  }
  if (from._internal_has_shutterbutton()) {
    _this->_internal_mutable_shutterbutton()->::DJIFRProto::Standard::RCButton::MergeFrom(
        from._internal_shutterbutton());
  }
  if (from._internal_has_playbackbutton()) {
    _this->_internal_mutable_playbackbutton()->::DJIFRProto::Standard::RCButton::MergeFrom(
        from._internal_playbackbutton());
  }
  if (from._internal_has_pausebutton()) {
    _this->_internal_mutable_pausebutton()->::DJIFRProto::Standard::RCButton::MergeFrom(
        from._internal_pausebutton());
  }
  if (from._internal_has_gpsdata()) {
    _this->_internal_mutable_gpsdata()->::DJIFRProto::Standard::RCGPSData::MergeFrom(
        from._internal_gpsdata());
  }
  if (from._internal_leftwheel() != 0) {
    _this->_internal_set_leftwheel(from._internal_leftwheel());
  }
  if (from._internal_flightmodeswitch() != 0) {
    _this->_internal_set_flightmodeswitch(from._internal_flightmodeswitch());
  }
  if (from._internal_style() != 0) {
    _this->_internal_set_style(from._internal_style());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RCHardwareState::CopyFrom(const RCHardwareState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DJIFRProto.Standard.RCHardwareState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RCHardwareState::IsInitialized() const {
  return true;
}

void RCHardwareState::InternalSwap(RCHardwareState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RCHardwareState, _impl_.style_)
      + sizeof(RCHardwareState::_impl_.style_)
      - PROTOBUF_FIELD_OFFSET(RCHardwareState, _impl_.leftstick_)>(
          reinterpret_cast<char*>(&_impl_.leftstick_),
          reinterpret_cast<char*>(&other->_impl_.leftstick_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RCHardwareState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FRRCModelProto_2eproto_getter, &descriptor_table_FRRCModelProto_2eproto_once,
      file_level_metadata_FRRCModelProto_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Standard
}  // namespace DJIFRProto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DJIFRProto::Standard::RCFlightModel*
Arena::CreateMaybeMessage< ::DJIFRProto::Standard::RCFlightModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DJIFRProto::Standard::RCFlightModel >(arena);
}
template<> PROTOBUF_NOINLINE ::DJIFRProto::Standard::Stick*
Arena::CreateMaybeMessage< ::DJIFRProto::Standard::Stick >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DJIFRProto::Standard::Stick >(arena);
}
template<> PROTOBUF_NOINLINE ::DJIFRProto::Standard::RCRightWheel*
Arena::CreateMaybeMessage< ::DJIFRProto::Standard::RCRightWheel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DJIFRProto::Standard::RCRightWheel >(arena);
}
template<> PROTOBUF_NOINLINE ::DJIFRProto::Standard::RCButton*
Arena::CreateMaybeMessage< ::DJIFRProto::Standard::RCButton >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DJIFRProto::Standard::RCButton >(arena);
}
template<> PROTOBUF_NOINLINE ::DJIFRProto::Standard::RCAircraftMapping*
Arena::CreateMaybeMessage< ::DJIFRProto::Standard::RCAircraftMapping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DJIFRProto::Standard::RCAircraftMapping >(arena);
}
template<> PROTOBUF_NOINLINE ::DJIFRProto::Standard::RCGPSTime*
Arena::CreateMaybeMessage< ::DJIFRProto::Standard::RCGPSTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DJIFRProto::Standard::RCGPSTime >(arena);
}
template<> PROTOBUF_NOINLINE ::DJIFRProto::Standard::RCGPSData*
Arena::CreateMaybeMessage< ::DJIFRProto::Standard::RCGPSData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DJIFRProto::Standard::RCGPSData >(arena);
}
template<> PROTOBUF_NOINLINE ::DJIFRProto::Standard::RCHardwareState*
Arena::CreateMaybeMessage< ::DJIFRProto::Standard::RCHardwareState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DJIFRProto::Standard::RCHardwareState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
