// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FRRCModelProto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_FRRCModelProto_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_FRRCModelProto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "FRCommonModelProto.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_FRRCModelProto_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_FRRCModelProto_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_FRRCModelProto_2eproto;
namespace DJIFRProto {
namespace Standard {
class RCAircraftMapping;
struct RCAircraftMappingDefaultTypeInternal;
extern RCAircraftMappingDefaultTypeInternal _RCAircraftMapping_default_instance_;
class RCButton;
struct RCButtonDefaultTypeInternal;
extern RCButtonDefaultTypeInternal _RCButton_default_instance_;
class RCFlightModel;
struct RCFlightModelDefaultTypeInternal;
extern RCFlightModelDefaultTypeInternal _RCFlightModel_default_instance_;
class RCGPSData;
struct RCGPSDataDefaultTypeInternal;
extern RCGPSDataDefaultTypeInternal _RCGPSData_default_instance_;
class RCGPSTime;
struct RCGPSTimeDefaultTypeInternal;
extern RCGPSTimeDefaultTypeInternal _RCGPSTime_default_instance_;
class RCHardwareState;
struct RCHardwareStateDefaultTypeInternal;
extern RCHardwareStateDefaultTypeInternal _RCHardwareState_default_instance_;
class RCRightWheel;
struct RCRightWheelDefaultTypeInternal;
extern RCRightWheelDefaultTypeInternal _RCRightWheel_default_instance_;
class Stick;
struct StickDefaultTypeInternal;
extern StickDefaultTypeInternal _Stick_default_instance_;
}  // namespace Standard
}  // namespace DJIFRProto
PROTOBUF_NAMESPACE_OPEN
template<> ::DJIFRProto::Standard::RCAircraftMapping* Arena::CreateMaybeMessage<::DJIFRProto::Standard::RCAircraftMapping>(Arena*);
template<> ::DJIFRProto::Standard::RCButton* Arena::CreateMaybeMessage<::DJIFRProto::Standard::RCButton>(Arena*);
template<> ::DJIFRProto::Standard::RCFlightModel* Arena::CreateMaybeMessage<::DJIFRProto::Standard::RCFlightModel>(Arena*);
template<> ::DJIFRProto::Standard::RCGPSData* Arena::CreateMaybeMessage<::DJIFRProto::Standard::RCGPSData>(Arena*);
template<> ::DJIFRProto::Standard::RCGPSTime* Arena::CreateMaybeMessage<::DJIFRProto::Standard::RCGPSTime>(Arena*);
template<> ::DJIFRProto::Standard::RCHardwareState* Arena::CreateMaybeMessage<::DJIFRProto::Standard::RCHardwareState>(Arena*);
template<> ::DJIFRProto::Standard::RCRightWheel* Arena::CreateMaybeMessage<::DJIFRProto::Standard::RCRightWheel>(Arena*);
template<> ::DJIFRProto::Standard::Stick* Arena::CreateMaybeMessage<::DJIFRProto::Standard::Stick>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace DJIFRProto {
namespace Standard {

enum RCFlightModel_Switch : int {
  RCFlightModel_Switch_One = 0,
  RCFlightModel_Switch_Two = 1,
  RCFlightModel_Switch_Three = 2,
  RCFlightModel_Switch_Unknown = 3,
  RCFlightModel_Switch_RCFlightModel_Switch_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RCFlightModel_Switch_RCFlightModel_Switch_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RCFlightModel_Switch_IsValid(int value);
constexpr RCFlightModel_Switch RCFlightModel_Switch_Switch_MIN = RCFlightModel_Switch_One;
constexpr RCFlightModel_Switch RCFlightModel_Switch_Switch_MAX = RCFlightModel_Switch_Unknown;
constexpr int RCFlightModel_Switch_Switch_ARRAYSIZE = RCFlightModel_Switch_Switch_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RCFlightModel_Switch_descriptor();
template<typename T>
inline const std::string& RCFlightModel_Switch_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RCFlightModel_Switch>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RCFlightModel_Switch_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RCFlightModel_Switch_descriptor(), enum_t_value);
}
inline bool RCFlightModel_Switch_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RCFlightModel_Switch* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RCFlightModel_Switch>(
    RCFlightModel_Switch_descriptor(), name, value);
}
enum RCAircraftMapping_Style : int {
  RCAircraftMapping_Style_Style1 = 0,
  RCAircraftMapping_Style_Style2 = 1,
  RCAircraftMapping_Style_Style3 = 2,
  RCAircraftMapping_Style_StyleCustom = 3,
  RCAircraftMapping_Style_Unknown = 4,
  RCAircraftMapping_Style_RCAircraftMapping_Style_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RCAircraftMapping_Style_RCAircraftMapping_Style_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RCAircraftMapping_Style_IsValid(int value);
constexpr RCAircraftMapping_Style RCAircraftMapping_Style_Style_MIN = RCAircraftMapping_Style_Style1;
constexpr RCAircraftMapping_Style RCAircraftMapping_Style_Style_MAX = RCAircraftMapping_Style_Unknown;
constexpr int RCAircraftMapping_Style_Style_ARRAYSIZE = RCAircraftMapping_Style_Style_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RCAircraftMapping_Style_descriptor();
template<typename T>
inline const std::string& RCAircraftMapping_Style_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RCAircraftMapping_Style>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RCAircraftMapping_Style_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RCAircraftMapping_Style_descriptor(), enum_t_value);
}
inline bool RCAircraftMapping_Style_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RCAircraftMapping_Style* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RCAircraftMapping_Style>(
    RCAircraftMapping_Style_descriptor(), name, value);
}
// ===================================================================

class RCFlightModel final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.RCFlightModel) */ {
 public:
  inline RCFlightModel() : RCFlightModel(nullptr) {}
  explicit PROTOBUF_CONSTEXPR RCFlightModel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RCFlightModel(const RCFlightModel& from);
  RCFlightModel(RCFlightModel&& from) noexcept
    : RCFlightModel() {
    *this = ::std::move(from);
  }

  inline RCFlightModel& operator=(const RCFlightModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline RCFlightModel& operator=(RCFlightModel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RCFlightModel& default_instance() {
    return *internal_default_instance();
  }
  static inline const RCFlightModel* internal_default_instance() {
    return reinterpret_cast<const RCFlightModel*>(
               &_RCFlightModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RCFlightModel& a, RCFlightModel& b) {
    a.Swap(&b);
  }
  inline void Swap(RCFlightModel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RCFlightModel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RCFlightModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RCFlightModel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RCFlightModel& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RCFlightModel& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DJIFRProto.Standard.RCFlightModel";
  }
  protected:
  explicit RCFlightModel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RCFlightModel_Switch Switch;
  static constexpr Switch One =
    RCFlightModel_Switch_One;
  static constexpr Switch Two =
    RCFlightModel_Switch_Two;
  static constexpr Switch Three =
    RCFlightModel_Switch_Three;
  static constexpr Switch Unknown =
    RCFlightModel_Switch_Unknown;
  static inline bool Switch_IsValid(int value) {
    return RCFlightModel_Switch_IsValid(value);
  }
  static constexpr Switch Switch_MIN =
    RCFlightModel_Switch_Switch_MIN;
  static constexpr Switch Switch_MAX =
    RCFlightModel_Switch_Switch_MAX;
  static constexpr int Switch_ARRAYSIZE =
    RCFlightModel_Switch_Switch_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Switch_descriptor() {
    return RCFlightModel_Switch_descriptor();
  }
  template<typename T>
  static inline const std::string& Switch_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Switch>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Switch_Name.");
    return RCFlightModel_Switch_Name(enum_t_value);
  }
  static inline bool Switch_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Switch* value) {
    return RCFlightModel_Switch_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.RCFlightModel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_FRRCModelProto_2eproto;
};
// -------------------------------------------------------------------

class Stick final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.Stick) */ {
 public:
  inline Stick() : Stick(nullptr) {}
  ~Stick() override;
  explicit PROTOBUF_CONSTEXPR Stick(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Stick(const Stick& from);
  Stick(Stick&& from) noexcept
    : Stick() {
    *this = ::std::move(from);
  }

  inline Stick& operator=(const Stick& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stick& operator=(Stick&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Stick& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stick* internal_default_instance() {
    return reinterpret_cast<const Stick*>(
               &_Stick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Stick& a, Stick& b) {
    a.Swap(&b);
  }
  inline void Swap(Stick* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stick* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Stick* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Stick>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Stick& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Stick& from) {
    Stick::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stick* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DJIFRProto.Standard.Stick";
  }
  protected:
  explicit Stick(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHorizontalPositionFieldNumber = 1,
    kVerticalPositionFieldNumber = 2,
  };
  // int32 horizontalPosition = 1;
  void clear_horizontalposition();
  int32_t horizontalposition() const;
  void set_horizontalposition(int32_t value);
  private:
  int32_t _internal_horizontalposition() const;
  void _internal_set_horizontalposition(int32_t value);
  public:

  // int32 verticalPosition = 2;
  void clear_verticalposition();
  int32_t verticalposition() const;
  void set_verticalposition(int32_t value);
  private:
  int32_t _internal_verticalposition() const;
  void _internal_set_verticalposition(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.Stick)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t horizontalposition_;
    int32_t verticalposition_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FRRCModelProto_2eproto;
};
// -------------------------------------------------------------------

class RCRightWheel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.RCRightWheel) */ {
 public:
  inline RCRightWheel() : RCRightWheel(nullptr) {}
  ~RCRightWheel() override;
  explicit PROTOBUF_CONSTEXPR RCRightWheel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RCRightWheel(const RCRightWheel& from);
  RCRightWheel(RCRightWheel&& from) noexcept
    : RCRightWheel() {
    *this = ::std::move(from);
  }

  inline RCRightWheel& operator=(const RCRightWheel& from) {
    CopyFrom(from);
    return *this;
  }
  inline RCRightWheel& operator=(RCRightWheel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RCRightWheel& default_instance() {
    return *internal_default_instance();
  }
  static inline const RCRightWheel* internal_default_instance() {
    return reinterpret_cast<const RCRightWheel*>(
               &_RCRightWheel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RCRightWheel& a, RCRightWheel& b) {
    a.Swap(&b);
  }
  inline void Swap(RCRightWheel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RCRightWheel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RCRightWheel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RCRightWheel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RCRightWheel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RCRightWheel& from) {
    RCRightWheel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RCRightWheel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DJIFRProto.Standard.RCRightWheel";
  }
  protected:
  explicit RCRightWheel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsPresentFieldNumber = 1,
    kIsTurnedFieldNumber = 2,
    kIsClickedFieldNumber = 3,
    kValueFieldNumber = 4,
  };
  // bool isPresent = 1;
  void clear_ispresent();
  bool ispresent() const;
  void set_ispresent(bool value);
  private:
  bool _internal_ispresent() const;
  void _internal_set_ispresent(bool value);
  public:

  // bool isTurned = 2;
  void clear_isturned();
  bool isturned() const;
  void set_isturned(bool value);
  private:
  bool _internal_isturned() const;
  void _internal_set_isturned(bool value);
  public:

  // bool isClicked = 3;
  void clear_isclicked();
  bool isclicked() const;
  void set_isclicked(bool value);
  private:
  bool _internal_isclicked() const;
  void _internal_set_isclicked(bool value);
  public:

  // int32 value = 4;
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.RCRightWheel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool ispresent_;
    bool isturned_;
    bool isclicked_;
    int32_t value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FRRCModelProto_2eproto;
};
// -------------------------------------------------------------------

class RCButton final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.RCButton) */ {
 public:
  inline RCButton() : RCButton(nullptr) {}
  ~RCButton() override;
  explicit PROTOBUF_CONSTEXPR RCButton(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RCButton(const RCButton& from);
  RCButton(RCButton&& from) noexcept
    : RCButton() {
    *this = ::std::move(from);
  }

  inline RCButton& operator=(const RCButton& from) {
    CopyFrom(from);
    return *this;
  }
  inline RCButton& operator=(RCButton&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RCButton& default_instance() {
    return *internal_default_instance();
  }
  static inline const RCButton* internal_default_instance() {
    return reinterpret_cast<const RCButton*>(
               &_RCButton_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RCButton& a, RCButton& b) {
    a.Swap(&b);
  }
  inline void Swap(RCButton* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RCButton* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RCButton* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RCButton>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RCButton& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RCButton& from) {
    RCButton::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RCButton* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DJIFRProto.Standard.RCButton";
  }
  protected:
  explicit RCButton(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsPresentFieldNumber = 1,
    kIsClickedFieldNumber = 2,
  };
  // bool isPresent = 1;
  void clear_ispresent();
  bool ispresent() const;
  void set_ispresent(bool value);
  private:
  bool _internal_ispresent() const;
  void _internal_set_ispresent(bool value);
  public:

  // bool isClicked = 2;
  void clear_isclicked();
  bool isclicked() const;
  void set_isclicked(bool value);
  private:
  bool _internal_isclicked() const;
  void _internal_set_isclicked(bool value);
  public:

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.RCButton)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool ispresent_;
    bool isclicked_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FRRCModelProto_2eproto;
};
// -------------------------------------------------------------------

class RCAircraftMapping final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.RCAircraftMapping) */ {
 public:
  inline RCAircraftMapping() : RCAircraftMapping(nullptr) {}
  explicit PROTOBUF_CONSTEXPR RCAircraftMapping(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RCAircraftMapping(const RCAircraftMapping& from);
  RCAircraftMapping(RCAircraftMapping&& from) noexcept
    : RCAircraftMapping() {
    *this = ::std::move(from);
  }

  inline RCAircraftMapping& operator=(const RCAircraftMapping& from) {
    CopyFrom(from);
    return *this;
  }
  inline RCAircraftMapping& operator=(RCAircraftMapping&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RCAircraftMapping& default_instance() {
    return *internal_default_instance();
  }
  static inline const RCAircraftMapping* internal_default_instance() {
    return reinterpret_cast<const RCAircraftMapping*>(
               &_RCAircraftMapping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RCAircraftMapping& a, RCAircraftMapping& b) {
    a.Swap(&b);
  }
  inline void Swap(RCAircraftMapping* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RCAircraftMapping* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RCAircraftMapping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RCAircraftMapping>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RCAircraftMapping& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RCAircraftMapping& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DJIFRProto.Standard.RCAircraftMapping";
  }
  protected:
  explicit RCAircraftMapping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RCAircraftMapping_Style Style;
  static constexpr Style Style1 =
    RCAircraftMapping_Style_Style1;
  static constexpr Style Style2 =
    RCAircraftMapping_Style_Style2;
  static constexpr Style Style3 =
    RCAircraftMapping_Style_Style3;
  static constexpr Style StyleCustom =
    RCAircraftMapping_Style_StyleCustom;
  static constexpr Style Unknown =
    RCAircraftMapping_Style_Unknown;
  static inline bool Style_IsValid(int value) {
    return RCAircraftMapping_Style_IsValid(value);
  }
  static constexpr Style Style_MIN =
    RCAircraftMapping_Style_Style_MIN;
  static constexpr Style Style_MAX =
    RCAircraftMapping_Style_Style_MAX;
  static constexpr int Style_ARRAYSIZE =
    RCAircraftMapping_Style_Style_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Style_descriptor() {
    return RCAircraftMapping_Style_descriptor();
  }
  template<typename T>
  static inline const std::string& Style_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Style>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Style_Name.");
    return RCAircraftMapping_Style_Name(enum_t_value);
  }
  static inline bool Style_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Style* value) {
    return RCAircraftMapping_Style_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.RCAircraftMapping)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_FRRCModelProto_2eproto;
};
// -------------------------------------------------------------------

class RCGPSTime final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.RCGPSTime) */ {
 public:
  inline RCGPSTime() : RCGPSTime(nullptr) {}
  ~RCGPSTime() override;
  explicit PROTOBUF_CONSTEXPR RCGPSTime(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RCGPSTime(const RCGPSTime& from);
  RCGPSTime(RCGPSTime&& from) noexcept
    : RCGPSTime() {
    *this = ::std::move(from);
  }

  inline RCGPSTime& operator=(const RCGPSTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline RCGPSTime& operator=(RCGPSTime&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RCGPSTime& default_instance() {
    return *internal_default_instance();
  }
  static inline const RCGPSTime* internal_default_instance() {
    return reinterpret_cast<const RCGPSTime*>(
               &_RCGPSTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RCGPSTime& a, RCGPSTime& b) {
    a.Swap(&b);
  }
  inline void Swap(RCGPSTime* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RCGPSTime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RCGPSTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RCGPSTime>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RCGPSTime& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RCGPSTime& from) {
    RCGPSTime::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RCGPSTime* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DJIFRProto.Standard.RCGPSTime";
  }
  protected:
  explicit RCGPSTime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHourFieldNumber = 1,
    kMinuteFieldNumber = 2,
    kSecondFieldNumber = 3,
    kYearFieldNumber = 4,
    kMonthFieldNumber = 5,
    kDayFieldNumber = 6,
  };
  // uint32 hour = 1;
  void clear_hour();
  uint32_t hour() const;
  void set_hour(uint32_t value);
  private:
  uint32_t _internal_hour() const;
  void _internal_set_hour(uint32_t value);
  public:

  // uint32 minute = 2;
  void clear_minute();
  uint32_t minute() const;
  void set_minute(uint32_t value);
  private:
  uint32_t _internal_minute() const;
  void _internal_set_minute(uint32_t value);
  public:

  // uint32 second = 3;
  void clear_second();
  uint32_t second() const;
  void set_second(uint32_t value);
  private:
  uint32_t _internal_second() const;
  void _internal_set_second(uint32_t value);
  public:

  // uint32 year = 4;
  void clear_year();
  uint32_t year() const;
  void set_year(uint32_t value);
  private:
  uint32_t _internal_year() const;
  void _internal_set_year(uint32_t value);
  public:

  // uint32 month = 5;
  void clear_month();
  uint32_t month() const;
  void set_month(uint32_t value);
  private:
  uint32_t _internal_month() const;
  void _internal_set_month(uint32_t value);
  public:

  // uint32 day = 6;
  void clear_day();
  uint32_t day() const;
  void set_day(uint32_t value);
  private:
  uint32_t _internal_day() const;
  void _internal_set_day(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.RCGPSTime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t hour_;
    uint32_t minute_;
    uint32_t second_;
    uint32_t year_;
    uint32_t month_;
    uint32_t day_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FRRCModelProto_2eproto;
};
// -------------------------------------------------------------------

class RCGPSData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.RCGPSData) */ {
 public:
  inline RCGPSData() : RCGPSData(nullptr) {}
  ~RCGPSData() override;
  explicit PROTOBUF_CONSTEXPR RCGPSData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RCGPSData(const RCGPSData& from);
  RCGPSData(RCGPSData&& from) noexcept
    : RCGPSData() {
    *this = ::std::move(from);
  }

  inline RCGPSData& operator=(const RCGPSData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RCGPSData& operator=(RCGPSData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RCGPSData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RCGPSData* internal_default_instance() {
    return reinterpret_cast<const RCGPSData*>(
               &_RCGPSData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RCGPSData& a, RCGPSData& b) {
    a.Swap(&b);
  }
  inline void Swap(RCGPSData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RCGPSData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RCGPSData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RCGPSData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RCGPSData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RCGPSData& from) {
    RCGPSData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RCGPSData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DJIFRProto.Standard.RCGPSData";
  }
  protected:
  explicit RCGPSData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kLocationFieldNumber = 2,
    kEastSpeedFieldNumber = 3,
    kNorthSpeedFieldNumber = 4,
    kSatelliteCountFieldNumber = 5,
    kAccuracyFieldNumber = 6,
    kIsValidFieldNumber = 7,
  };
  // .DJIFRProto.Standard.RCGPSTime time = 1;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const ::DJIFRProto::Standard::RCGPSTime& time() const;
  PROTOBUF_NODISCARD ::DJIFRProto::Standard::RCGPSTime* release_time();
  ::DJIFRProto::Standard::RCGPSTime* mutable_time();
  void set_allocated_time(::DJIFRProto::Standard::RCGPSTime* time);
  private:
  const ::DJIFRProto::Standard::RCGPSTime& _internal_time() const;
  ::DJIFRProto::Standard::RCGPSTime* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      ::DJIFRProto::Standard::RCGPSTime* time);
  ::DJIFRProto::Standard::RCGPSTime* unsafe_arena_release_time();

  // .DJIFRProto.Standard.LocationCoordinate2D location = 2;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::DJIFRProto::Standard::LocationCoordinate2D& location() const;
  PROTOBUF_NODISCARD ::DJIFRProto::Standard::LocationCoordinate2D* release_location();
  ::DJIFRProto::Standard::LocationCoordinate2D* mutable_location();
  void set_allocated_location(::DJIFRProto::Standard::LocationCoordinate2D* location);
  private:
  const ::DJIFRProto::Standard::LocationCoordinate2D& _internal_location() const;
  ::DJIFRProto::Standard::LocationCoordinate2D* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::DJIFRProto::Standard::LocationCoordinate2D* location);
  ::DJIFRProto::Standard::LocationCoordinate2D* unsafe_arena_release_location();

  // float eastSpeed = 3;
  void clear_eastspeed();
  float eastspeed() const;
  void set_eastspeed(float value);
  private:
  float _internal_eastspeed() const;
  void _internal_set_eastspeed(float value);
  public:

  // float northSpeed = 4;
  void clear_northspeed();
  float northspeed() const;
  void set_northspeed(float value);
  private:
  float _internal_northspeed() const;
  void _internal_set_northspeed(float value);
  public:

  // int32 satelliteCount = 5;
  void clear_satellitecount();
  int32_t satellitecount() const;
  void set_satellitecount(int32_t value);
  private:
  int32_t _internal_satellitecount() const;
  void _internal_set_satellitecount(int32_t value);
  public:

  // float accuracy = 6;
  void clear_accuracy();
  float accuracy() const;
  void set_accuracy(float value);
  private:
  float _internal_accuracy() const;
  void _internal_set_accuracy(float value);
  public:

  // bool isValid = 7;
  void clear_isvalid();
  bool isvalid() const;
  void set_isvalid(bool value);
  private:
  bool _internal_isvalid() const;
  void _internal_set_isvalid(bool value);
  public:

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.RCGPSData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::DJIFRProto::Standard::RCGPSTime* time_;
    ::DJIFRProto::Standard::LocationCoordinate2D* location_;
    float eastspeed_;
    float northspeed_;
    int32_t satellitecount_;
    float accuracy_;
    bool isvalid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FRRCModelProto_2eproto;
};
// -------------------------------------------------------------------

class RCHardwareState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.RCHardwareState) */ {
 public:
  inline RCHardwareState() : RCHardwareState(nullptr) {}
  ~RCHardwareState() override;
  explicit PROTOBUF_CONSTEXPR RCHardwareState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RCHardwareState(const RCHardwareState& from);
  RCHardwareState(RCHardwareState&& from) noexcept
    : RCHardwareState() {
    *this = ::std::move(from);
  }

  inline RCHardwareState& operator=(const RCHardwareState& from) {
    CopyFrom(from);
    return *this;
  }
  inline RCHardwareState& operator=(RCHardwareState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RCHardwareState& default_instance() {
    return *internal_default_instance();
  }
  static inline const RCHardwareState* internal_default_instance() {
    return reinterpret_cast<const RCHardwareState*>(
               &_RCHardwareState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RCHardwareState& a, RCHardwareState& b) {
    a.Swap(&b);
  }
  inline void Swap(RCHardwareState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RCHardwareState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RCHardwareState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RCHardwareState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RCHardwareState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RCHardwareState& from) {
    RCHardwareState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RCHardwareState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DJIFRProto.Standard.RCHardwareState";
  }
  protected:
  explicit RCHardwareState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftStickFieldNumber = 1,
    kRightStickFieldNumber = 2,
    kRightWheelFieldNumber = 4,
    kGoHomeButtonFieldNumber = 6,
    kRecordButtonFieldNumber = 7,
    kShutterButtonFieldNumber = 8,
    kPlaybackButtonFieldNumber = 9,
    kPauseButtonFieldNumber = 10,
    kGPSDataFieldNumber = 12,
    kLeftWheelFieldNumber = 3,
    kFlightModeSwitchFieldNumber = 5,
    kStyleFieldNumber = 11,
  };
  // .DJIFRProto.Standard.Stick leftStick = 1;
  bool has_leftstick() const;
  private:
  bool _internal_has_leftstick() const;
  public:
  void clear_leftstick();
  const ::DJIFRProto::Standard::Stick& leftstick() const;
  PROTOBUF_NODISCARD ::DJIFRProto::Standard::Stick* release_leftstick();
  ::DJIFRProto::Standard::Stick* mutable_leftstick();
  void set_allocated_leftstick(::DJIFRProto::Standard::Stick* leftstick);
  private:
  const ::DJIFRProto::Standard::Stick& _internal_leftstick() const;
  ::DJIFRProto::Standard::Stick* _internal_mutable_leftstick();
  public:
  void unsafe_arena_set_allocated_leftstick(
      ::DJIFRProto::Standard::Stick* leftstick);
  ::DJIFRProto::Standard::Stick* unsafe_arena_release_leftstick();

  // .DJIFRProto.Standard.Stick rightStick = 2;
  bool has_rightstick() const;
  private:
  bool _internal_has_rightstick() const;
  public:
  void clear_rightstick();
  const ::DJIFRProto::Standard::Stick& rightstick() const;
  PROTOBUF_NODISCARD ::DJIFRProto::Standard::Stick* release_rightstick();
  ::DJIFRProto::Standard::Stick* mutable_rightstick();
  void set_allocated_rightstick(::DJIFRProto::Standard::Stick* rightstick);
  private:
  const ::DJIFRProto::Standard::Stick& _internal_rightstick() const;
  ::DJIFRProto::Standard::Stick* _internal_mutable_rightstick();
  public:
  void unsafe_arena_set_allocated_rightstick(
      ::DJIFRProto::Standard::Stick* rightstick);
  ::DJIFRProto::Standard::Stick* unsafe_arena_release_rightstick();

  // .DJIFRProto.Standard.RCRightWheel rightWheel = 4;
  bool has_rightwheel() const;
  private:
  bool _internal_has_rightwheel() const;
  public:
  void clear_rightwheel();
  const ::DJIFRProto::Standard::RCRightWheel& rightwheel() const;
  PROTOBUF_NODISCARD ::DJIFRProto::Standard::RCRightWheel* release_rightwheel();
  ::DJIFRProto::Standard::RCRightWheel* mutable_rightwheel();
  void set_allocated_rightwheel(::DJIFRProto::Standard::RCRightWheel* rightwheel);
  private:
  const ::DJIFRProto::Standard::RCRightWheel& _internal_rightwheel() const;
  ::DJIFRProto::Standard::RCRightWheel* _internal_mutable_rightwheel();
  public:
  void unsafe_arena_set_allocated_rightwheel(
      ::DJIFRProto::Standard::RCRightWheel* rightwheel);
  ::DJIFRProto::Standard::RCRightWheel* unsafe_arena_release_rightwheel();

  // .DJIFRProto.Standard.RCButton goHomeButton = 6;
  bool has_gohomebutton() const;
  private:
  bool _internal_has_gohomebutton() const;
  public:
  void clear_gohomebutton();
  const ::DJIFRProto::Standard::RCButton& gohomebutton() const;
  PROTOBUF_NODISCARD ::DJIFRProto::Standard::RCButton* release_gohomebutton();
  ::DJIFRProto::Standard::RCButton* mutable_gohomebutton();
  void set_allocated_gohomebutton(::DJIFRProto::Standard::RCButton* gohomebutton);
  private:
  const ::DJIFRProto::Standard::RCButton& _internal_gohomebutton() const;
  ::DJIFRProto::Standard::RCButton* _internal_mutable_gohomebutton();
  public:
  void unsafe_arena_set_allocated_gohomebutton(
      ::DJIFRProto::Standard::RCButton* gohomebutton);
  ::DJIFRProto::Standard::RCButton* unsafe_arena_release_gohomebutton();

  // .DJIFRProto.Standard.RCButton recordButton = 7;
  bool has_recordbutton() const;
  private:
  bool _internal_has_recordbutton() const;
  public:
  void clear_recordbutton();
  const ::DJIFRProto::Standard::RCButton& recordbutton() const;
  PROTOBUF_NODISCARD ::DJIFRProto::Standard::RCButton* release_recordbutton();
  ::DJIFRProto::Standard::RCButton* mutable_recordbutton();
  void set_allocated_recordbutton(::DJIFRProto::Standard::RCButton* recordbutton);
  private:
  const ::DJIFRProto::Standard::RCButton& _internal_recordbutton() const;
  ::DJIFRProto::Standard::RCButton* _internal_mutable_recordbutton();
  public:
  void unsafe_arena_set_allocated_recordbutton(
      ::DJIFRProto::Standard::RCButton* recordbutton);
  ::DJIFRProto::Standard::RCButton* unsafe_arena_release_recordbutton();

  // .DJIFRProto.Standard.RCButton shutterButton = 8;
  bool has_shutterbutton() const;
  private:
  bool _internal_has_shutterbutton() const;
  public:
  void clear_shutterbutton();
  const ::DJIFRProto::Standard::RCButton& shutterbutton() const;
  PROTOBUF_NODISCARD ::DJIFRProto::Standard::RCButton* release_shutterbutton();
  ::DJIFRProto::Standard::RCButton* mutable_shutterbutton();
  void set_allocated_shutterbutton(::DJIFRProto::Standard::RCButton* shutterbutton);
  private:
  const ::DJIFRProto::Standard::RCButton& _internal_shutterbutton() const;
  ::DJIFRProto::Standard::RCButton* _internal_mutable_shutterbutton();
  public:
  void unsafe_arena_set_allocated_shutterbutton(
      ::DJIFRProto::Standard::RCButton* shutterbutton);
  ::DJIFRProto::Standard::RCButton* unsafe_arena_release_shutterbutton();

  // .DJIFRProto.Standard.RCButton playbackButton = 9;
  bool has_playbackbutton() const;
  private:
  bool _internal_has_playbackbutton() const;
  public:
  void clear_playbackbutton();
  const ::DJIFRProto::Standard::RCButton& playbackbutton() const;
  PROTOBUF_NODISCARD ::DJIFRProto::Standard::RCButton* release_playbackbutton();
  ::DJIFRProto::Standard::RCButton* mutable_playbackbutton();
  void set_allocated_playbackbutton(::DJIFRProto::Standard::RCButton* playbackbutton);
  private:
  const ::DJIFRProto::Standard::RCButton& _internal_playbackbutton() const;
  ::DJIFRProto::Standard::RCButton* _internal_mutable_playbackbutton();
  public:
  void unsafe_arena_set_allocated_playbackbutton(
      ::DJIFRProto::Standard::RCButton* playbackbutton);
  ::DJIFRProto::Standard::RCButton* unsafe_arena_release_playbackbutton();

  // .DJIFRProto.Standard.RCButton pauseButton = 10;
  bool has_pausebutton() const;
  private:
  bool _internal_has_pausebutton() const;
  public:
  void clear_pausebutton();
  const ::DJIFRProto::Standard::RCButton& pausebutton() const;
  PROTOBUF_NODISCARD ::DJIFRProto::Standard::RCButton* release_pausebutton();
  ::DJIFRProto::Standard::RCButton* mutable_pausebutton();
  void set_allocated_pausebutton(::DJIFRProto::Standard::RCButton* pausebutton);
  private:
  const ::DJIFRProto::Standard::RCButton& _internal_pausebutton() const;
  ::DJIFRProto::Standard::RCButton* _internal_mutable_pausebutton();
  public:
  void unsafe_arena_set_allocated_pausebutton(
      ::DJIFRProto::Standard::RCButton* pausebutton);
  ::DJIFRProto::Standard::RCButton* unsafe_arena_release_pausebutton();

  // .DJIFRProto.Standard.RCGPSData GPSData = 12;
  bool has_gpsdata() const;
  private:
  bool _internal_has_gpsdata() const;
  public:
  void clear_gpsdata();
  const ::DJIFRProto::Standard::RCGPSData& gpsdata() const;
  PROTOBUF_NODISCARD ::DJIFRProto::Standard::RCGPSData* release_gpsdata();
  ::DJIFRProto::Standard::RCGPSData* mutable_gpsdata();
  void set_allocated_gpsdata(::DJIFRProto::Standard::RCGPSData* gpsdata);
  private:
  const ::DJIFRProto::Standard::RCGPSData& _internal_gpsdata() const;
  ::DJIFRProto::Standard::RCGPSData* _internal_mutable_gpsdata();
  public:
  void unsafe_arena_set_allocated_gpsdata(
      ::DJIFRProto::Standard::RCGPSData* gpsdata);
  ::DJIFRProto::Standard::RCGPSData* unsafe_arena_release_gpsdata();

  // int32 leftWheel = 3;
  void clear_leftwheel();
  int32_t leftwheel() const;
  void set_leftwheel(int32_t value);
  private:
  int32_t _internal_leftwheel() const;
  void _internal_set_leftwheel(int32_t value);
  public:

  // .DJIFRProto.Standard.RCFlightModel.Switch flightModeSwitch = 5;
  void clear_flightmodeswitch();
  ::DJIFRProto::Standard::RCFlightModel_Switch flightmodeswitch() const;
  void set_flightmodeswitch(::DJIFRProto::Standard::RCFlightModel_Switch value);
  private:
  ::DJIFRProto::Standard::RCFlightModel_Switch _internal_flightmodeswitch() const;
  void _internal_set_flightmodeswitch(::DJIFRProto::Standard::RCFlightModel_Switch value);
  public:

  // .DJIFRProto.Standard.RCAircraftMapping.Style style = 11;
  void clear_style();
  ::DJIFRProto::Standard::RCAircraftMapping_Style style() const;
  void set_style(::DJIFRProto::Standard::RCAircraftMapping_Style value);
  private:
  ::DJIFRProto::Standard::RCAircraftMapping_Style _internal_style() const;
  void _internal_set_style(::DJIFRProto::Standard::RCAircraftMapping_Style value);
  public:

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.RCHardwareState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::DJIFRProto::Standard::Stick* leftstick_;
    ::DJIFRProto::Standard::Stick* rightstick_;
    ::DJIFRProto::Standard::RCRightWheel* rightwheel_;
    ::DJIFRProto::Standard::RCButton* gohomebutton_;
    ::DJIFRProto::Standard::RCButton* recordbutton_;
    ::DJIFRProto::Standard::RCButton* shutterbutton_;
    ::DJIFRProto::Standard::RCButton* playbackbutton_;
    ::DJIFRProto::Standard::RCButton* pausebutton_;
    ::DJIFRProto::Standard::RCGPSData* gpsdata_;
    int32_t leftwheel_;
    int flightmodeswitch_;
    int style_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FRRCModelProto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RCFlightModel

// -------------------------------------------------------------------

// Stick

// int32 horizontalPosition = 1;
inline void Stick::clear_horizontalposition() {
  _impl_.horizontalposition_ = 0;
}
inline int32_t Stick::_internal_horizontalposition() const {
  return _impl_.horizontalposition_;
}
inline int32_t Stick::horizontalposition() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.Stick.horizontalPosition)
  return _internal_horizontalposition();
}
inline void Stick::_internal_set_horizontalposition(int32_t value) {
  
  _impl_.horizontalposition_ = value;
}
inline void Stick::set_horizontalposition(int32_t value) {
  _internal_set_horizontalposition(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.Stick.horizontalPosition)
}

// int32 verticalPosition = 2;
inline void Stick::clear_verticalposition() {
  _impl_.verticalposition_ = 0;
}
inline int32_t Stick::_internal_verticalposition() const {
  return _impl_.verticalposition_;
}
inline int32_t Stick::verticalposition() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.Stick.verticalPosition)
  return _internal_verticalposition();
}
inline void Stick::_internal_set_verticalposition(int32_t value) {
  
  _impl_.verticalposition_ = value;
}
inline void Stick::set_verticalposition(int32_t value) {
  _internal_set_verticalposition(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.Stick.verticalPosition)
}

// -------------------------------------------------------------------

// RCRightWheel

// bool isPresent = 1;
inline void RCRightWheel::clear_ispresent() {
  _impl_.ispresent_ = false;
}
inline bool RCRightWheel::_internal_ispresent() const {
  return _impl_.ispresent_;
}
inline bool RCRightWheel::ispresent() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCRightWheel.isPresent)
  return _internal_ispresent();
}
inline void RCRightWheel::_internal_set_ispresent(bool value) {
  
  _impl_.ispresent_ = value;
}
inline void RCRightWheel::set_ispresent(bool value) {
  _internal_set_ispresent(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.RCRightWheel.isPresent)
}

// bool isTurned = 2;
inline void RCRightWheel::clear_isturned() {
  _impl_.isturned_ = false;
}
inline bool RCRightWheel::_internal_isturned() const {
  return _impl_.isturned_;
}
inline bool RCRightWheel::isturned() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCRightWheel.isTurned)
  return _internal_isturned();
}
inline void RCRightWheel::_internal_set_isturned(bool value) {
  
  _impl_.isturned_ = value;
}
inline void RCRightWheel::set_isturned(bool value) {
  _internal_set_isturned(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.RCRightWheel.isTurned)
}

// bool isClicked = 3;
inline void RCRightWheel::clear_isclicked() {
  _impl_.isclicked_ = false;
}
inline bool RCRightWheel::_internal_isclicked() const {
  return _impl_.isclicked_;
}
inline bool RCRightWheel::isclicked() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCRightWheel.isClicked)
  return _internal_isclicked();
}
inline void RCRightWheel::_internal_set_isclicked(bool value) {
  
  _impl_.isclicked_ = value;
}
inline void RCRightWheel::set_isclicked(bool value) {
  _internal_set_isclicked(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.RCRightWheel.isClicked)
}

// int32 value = 4;
inline void RCRightWheel::clear_value() {
  _impl_.value_ = 0;
}
inline int32_t RCRightWheel::_internal_value() const {
  return _impl_.value_;
}
inline int32_t RCRightWheel::value() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCRightWheel.value)
  return _internal_value();
}
inline void RCRightWheel::_internal_set_value(int32_t value) {
  
  _impl_.value_ = value;
}
inline void RCRightWheel::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.RCRightWheel.value)
}

// -------------------------------------------------------------------

// RCButton

// bool isPresent = 1;
inline void RCButton::clear_ispresent() {
  _impl_.ispresent_ = false;
}
inline bool RCButton::_internal_ispresent() const {
  return _impl_.ispresent_;
}
inline bool RCButton::ispresent() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCButton.isPresent)
  return _internal_ispresent();
}
inline void RCButton::_internal_set_ispresent(bool value) {
  
  _impl_.ispresent_ = value;
}
inline void RCButton::set_ispresent(bool value) {
  _internal_set_ispresent(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.RCButton.isPresent)
}

// bool isClicked = 2;
inline void RCButton::clear_isclicked() {
  _impl_.isclicked_ = false;
}
inline bool RCButton::_internal_isclicked() const {
  return _impl_.isclicked_;
}
inline bool RCButton::isclicked() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCButton.isClicked)
  return _internal_isclicked();
}
inline void RCButton::_internal_set_isclicked(bool value) {
  
  _impl_.isclicked_ = value;
}
inline void RCButton::set_isclicked(bool value) {
  _internal_set_isclicked(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.RCButton.isClicked)
}

// -------------------------------------------------------------------

// RCAircraftMapping

// -------------------------------------------------------------------

// RCGPSTime

// uint32 hour = 1;
inline void RCGPSTime::clear_hour() {
  _impl_.hour_ = 0u;
}
inline uint32_t RCGPSTime::_internal_hour() const {
  return _impl_.hour_;
}
inline uint32_t RCGPSTime::hour() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCGPSTime.hour)
  return _internal_hour();
}
inline void RCGPSTime::_internal_set_hour(uint32_t value) {
  
  _impl_.hour_ = value;
}
inline void RCGPSTime::set_hour(uint32_t value) {
  _internal_set_hour(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.RCGPSTime.hour)
}

// uint32 minute = 2;
inline void RCGPSTime::clear_minute() {
  _impl_.minute_ = 0u;
}
inline uint32_t RCGPSTime::_internal_minute() const {
  return _impl_.minute_;
}
inline uint32_t RCGPSTime::minute() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCGPSTime.minute)
  return _internal_minute();
}
inline void RCGPSTime::_internal_set_minute(uint32_t value) {
  
  _impl_.minute_ = value;
}
inline void RCGPSTime::set_minute(uint32_t value) {
  _internal_set_minute(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.RCGPSTime.minute)
}

// uint32 second = 3;
inline void RCGPSTime::clear_second() {
  _impl_.second_ = 0u;
}
inline uint32_t RCGPSTime::_internal_second() const {
  return _impl_.second_;
}
inline uint32_t RCGPSTime::second() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCGPSTime.second)
  return _internal_second();
}
inline void RCGPSTime::_internal_set_second(uint32_t value) {
  
  _impl_.second_ = value;
}
inline void RCGPSTime::set_second(uint32_t value) {
  _internal_set_second(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.RCGPSTime.second)
}

// uint32 year = 4;
inline void RCGPSTime::clear_year() {
  _impl_.year_ = 0u;
}
inline uint32_t RCGPSTime::_internal_year() const {
  return _impl_.year_;
}
inline uint32_t RCGPSTime::year() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCGPSTime.year)
  return _internal_year();
}
inline void RCGPSTime::_internal_set_year(uint32_t value) {
  
  _impl_.year_ = value;
}
inline void RCGPSTime::set_year(uint32_t value) {
  _internal_set_year(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.RCGPSTime.year)
}

// uint32 month = 5;
inline void RCGPSTime::clear_month() {
  _impl_.month_ = 0u;
}
inline uint32_t RCGPSTime::_internal_month() const {
  return _impl_.month_;
}
inline uint32_t RCGPSTime::month() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCGPSTime.month)
  return _internal_month();
}
inline void RCGPSTime::_internal_set_month(uint32_t value) {
  
  _impl_.month_ = value;
}
inline void RCGPSTime::set_month(uint32_t value) {
  _internal_set_month(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.RCGPSTime.month)
}

// uint32 day = 6;
inline void RCGPSTime::clear_day() {
  _impl_.day_ = 0u;
}
inline uint32_t RCGPSTime::_internal_day() const {
  return _impl_.day_;
}
inline uint32_t RCGPSTime::day() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCGPSTime.day)
  return _internal_day();
}
inline void RCGPSTime::_internal_set_day(uint32_t value) {
  
  _impl_.day_ = value;
}
inline void RCGPSTime::set_day(uint32_t value) {
  _internal_set_day(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.RCGPSTime.day)
}

// -------------------------------------------------------------------

// RCGPSData

// .DJIFRProto.Standard.RCGPSTime time = 1;
inline bool RCGPSData::_internal_has_time() const {
  return this != internal_default_instance() && _impl_.time_ != nullptr;
}
inline bool RCGPSData::has_time() const {
  return _internal_has_time();
}
inline void RCGPSData::clear_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
}
inline const ::DJIFRProto::Standard::RCGPSTime& RCGPSData::_internal_time() const {
  const ::DJIFRProto::Standard::RCGPSTime* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::DJIFRProto::Standard::RCGPSTime&>(
      ::DJIFRProto::Standard::_RCGPSTime_default_instance_);
}
inline const ::DJIFRProto::Standard::RCGPSTime& RCGPSData::time() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCGPSData.time)
  return _internal_time();
}
inline void RCGPSData::unsafe_arena_set_allocated_time(
    ::DJIFRProto::Standard::RCGPSTime* time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = time;
  if (time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DJIFRProto.Standard.RCGPSData.time)
}
inline ::DJIFRProto::Standard::RCGPSTime* RCGPSData::release_time() {
  
  ::DJIFRProto::Standard::RCGPSTime* temp = _impl_.time_;
  _impl_.time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DJIFRProto::Standard::RCGPSTime* RCGPSData::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.RCGPSData.time)
  
  ::DJIFRProto::Standard::RCGPSTime* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::DJIFRProto::Standard::RCGPSTime* RCGPSData::_internal_mutable_time() {
  
  if (_impl_.time_ == nullptr) {
    auto* p = CreateMaybeMessage<::DJIFRProto::Standard::RCGPSTime>(GetArenaForAllocation());
    _impl_.time_ = p;
  }
  return _impl_.time_;
}
inline ::DJIFRProto::Standard::RCGPSTime* RCGPSData::mutable_time() {
  ::DJIFRProto::Standard::RCGPSTime* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.RCGPSData.time)
  return _msg;
}
inline void RCGPSData::set_allocated_time(::DJIFRProto::Standard::RCGPSTime* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.time_;
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(time);
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.RCGPSData.time)
}

// .DJIFRProto.Standard.LocationCoordinate2D location = 2;
inline bool RCGPSData::_internal_has_location() const {
  return this != internal_default_instance() && _impl_.location_ != nullptr;
}
inline bool RCGPSData::has_location() const {
  return _internal_has_location();
}
inline const ::DJIFRProto::Standard::LocationCoordinate2D& RCGPSData::_internal_location() const {
  const ::DJIFRProto::Standard::LocationCoordinate2D* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::DJIFRProto::Standard::LocationCoordinate2D&>(
      ::DJIFRProto::Standard::_LocationCoordinate2D_default_instance_);
}
inline const ::DJIFRProto::Standard::LocationCoordinate2D& RCGPSData::location() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCGPSData.location)
  return _internal_location();
}
inline void RCGPSData::unsafe_arena_set_allocated_location(
    ::DJIFRProto::Standard::LocationCoordinate2D* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DJIFRProto.Standard.RCGPSData.location)
}
inline ::DJIFRProto::Standard::LocationCoordinate2D* RCGPSData::release_location() {
  
  ::DJIFRProto::Standard::LocationCoordinate2D* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DJIFRProto::Standard::LocationCoordinate2D* RCGPSData::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.RCGPSData.location)
  
  ::DJIFRProto::Standard::LocationCoordinate2D* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::DJIFRProto::Standard::LocationCoordinate2D* RCGPSData::_internal_mutable_location() {
  
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::DJIFRProto::Standard::LocationCoordinate2D>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::DJIFRProto::Standard::LocationCoordinate2D* RCGPSData::mutable_location() {
  ::DJIFRProto::Standard::LocationCoordinate2D* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.RCGPSData.location)
  return _msg;
}
inline void RCGPSData::set_allocated_location(::DJIFRProto::Standard::LocationCoordinate2D* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location));
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.RCGPSData.location)
}

// float eastSpeed = 3;
inline void RCGPSData::clear_eastspeed() {
  _impl_.eastspeed_ = 0;
}
inline float RCGPSData::_internal_eastspeed() const {
  return _impl_.eastspeed_;
}
inline float RCGPSData::eastspeed() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCGPSData.eastSpeed)
  return _internal_eastspeed();
}
inline void RCGPSData::_internal_set_eastspeed(float value) {
  
  _impl_.eastspeed_ = value;
}
inline void RCGPSData::set_eastspeed(float value) {
  _internal_set_eastspeed(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.RCGPSData.eastSpeed)
}

// float northSpeed = 4;
inline void RCGPSData::clear_northspeed() {
  _impl_.northspeed_ = 0;
}
inline float RCGPSData::_internal_northspeed() const {
  return _impl_.northspeed_;
}
inline float RCGPSData::northspeed() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCGPSData.northSpeed)
  return _internal_northspeed();
}
inline void RCGPSData::_internal_set_northspeed(float value) {
  
  _impl_.northspeed_ = value;
}
inline void RCGPSData::set_northspeed(float value) {
  _internal_set_northspeed(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.RCGPSData.northSpeed)
}

// int32 satelliteCount = 5;
inline void RCGPSData::clear_satellitecount() {
  _impl_.satellitecount_ = 0;
}
inline int32_t RCGPSData::_internal_satellitecount() const {
  return _impl_.satellitecount_;
}
inline int32_t RCGPSData::satellitecount() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCGPSData.satelliteCount)
  return _internal_satellitecount();
}
inline void RCGPSData::_internal_set_satellitecount(int32_t value) {
  
  _impl_.satellitecount_ = value;
}
inline void RCGPSData::set_satellitecount(int32_t value) {
  _internal_set_satellitecount(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.RCGPSData.satelliteCount)
}

// float accuracy = 6;
inline void RCGPSData::clear_accuracy() {
  _impl_.accuracy_ = 0;
}
inline float RCGPSData::_internal_accuracy() const {
  return _impl_.accuracy_;
}
inline float RCGPSData::accuracy() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCGPSData.accuracy)
  return _internal_accuracy();
}
inline void RCGPSData::_internal_set_accuracy(float value) {
  
  _impl_.accuracy_ = value;
}
inline void RCGPSData::set_accuracy(float value) {
  _internal_set_accuracy(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.RCGPSData.accuracy)
}

// bool isValid = 7;
inline void RCGPSData::clear_isvalid() {
  _impl_.isvalid_ = false;
}
inline bool RCGPSData::_internal_isvalid() const {
  return _impl_.isvalid_;
}
inline bool RCGPSData::isvalid() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCGPSData.isValid)
  return _internal_isvalid();
}
inline void RCGPSData::_internal_set_isvalid(bool value) {
  
  _impl_.isvalid_ = value;
}
inline void RCGPSData::set_isvalid(bool value) {
  _internal_set_isvalid(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.RCGPSData.isValid)
}

// -------------------------------------------------------------------

// RCHardwareState

// .DJIFRProto.Standard.Stick leftStick = 1;
inline bool RCHardwareState::_internal_has_leftstick() const {
  return this != internal_default_instance() && _impl_.leftstick_ != nullptr;
}
inline bool RCHardwareState::has_leftstick() const {
  return _internal_has_leftstick();
}
inline void RCHardwareState::clear_leftstick() {
  if (GetArenaForAllocation() == nullptr && _impl_.leftstick_ != nullptr) {
    delete _impl_.leftstick_;
  }
  _impl_.leftstick_ = nullptr;
}
inline const ::DJIFRProto::Standard::Stick& RCHardwareState::_internal_leftstick() const {
  const ::DJIFRProto::Standard::Stick* p = _impl_.leftstick_;
  return p != nullptr ? *p : reinterpret_cast<const ::DJIFRProto::Standard::Stick&>(
      ::DJIFRProto::Standard::_Stick_default_instance_);
}
inline const ::DJIFRProto::Standard::Stick& RCHardwareState::leftstick() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCHardwareState.leftStick)
  return _internal_leftstick();
}
inline void RCHardwareState::unsafe_arena_set_allocated_leftstick(
    ::DJIFRProto::Standard::Stick* leftstick) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.leftstick_);
  }
  _impl_.leftstick_ = leftstick;
  if (leftstick) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DJIFRProto.Standard.RCHardwareState.leftStick)
}
inline ::DJIFRProto::Standard::Stick* RCHardwareState::release_leftstick() {
  
  ::DJIFRProto::Standard::Stick* temp = _impl_.leftstick_;
  _impl_.leftstick_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DJIFRProto::Standard::Stick* RCHardwareState::unsafe_arena_release_leftstick() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.RCHardwareState.leftStick)
  
  ::DJIFRProto::Standard::Stick* temp = _impl_.leftstick_;
  _impl_.leftstick_ = nullptr;
  return temp;
}
inline ::DJIFRProto::Standard::Stick* RCHardwareState::_internal_mutable_leftstick() {
  
  if (_impl_.leftstick_ == nullptr) {
    auto* p = CreateMaybeMessage<::DJIFRProto::Standard::Stick>(GetArenaForAllocation());
    _impl_.leftstick_ = p;
  }
  return _impl_.leftstick_;
}
inline ::DJIFRProto::Standard::Stick* RCHardwareState::mutable_leftstick() {
  ::DJIFRProto::Standard::Stick* _msg = _internal_mutable_leftstick();
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.RCHardwareState.leftStick)
  return _msg;
}
inline void RCHardwareState::set_allocated_leftstick(::DJIFRProto::Standard::Stick* leftstick) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.leftstick_;
  }
  if (leftstick) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(leftstick);
    if (message_arena != submessage_arena) {
      leftstick = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leftstick, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.leftstick_ = leftstick;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.RCHardwareState.leftStick)
}

// .DJIFRProto.Standard.Stick rightStick = 2;
inline bool RCHardwareState::_internal_has_rightstick() const {
  return this != internal_default_instance() && _impl_.rightstick_ != nullptr;
}
inline bool RCHardwareState::has_rightstick() const {
  return _internal_has_rightstick();
}
inline void RCHardwareState::clear_rightstick() {
  if (GetArenaForAllocation() == nullptr && _impl_.rightstick_ != nullptr) {
    delete _impl_.rightstick_;
  }
  _impl_.rightstick_ = nullptr;
}
inline const ::DJIFRProto::Standard::Stick& RCHardwareState::_internal_rightstick() const {
  const ::DJIFRProto::Standard::Stick* p = _impl_.rightstick_;
  return p != nullptr ? *p : reinterpret_cast<const ::DJIFRProto::Standard::Stick&>(
      ::DJIFRProto::Standard::_Stick_default_instance_);
}
inline const ::DJIFRProto::Standard::Stick& RCHardwareState::rightstick() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCHardwareState.rightStick)
  return _internal_rightstick();
}
inline void RCHardwareState::unsafe_arena_set_allocated_rightstick(
    ::DJIFRProto::Standard::Stick* rightstick) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rightstick_);
  }
  _impl_.rightstick_ = rightstick;
  if (rightstick) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DJIFRProto.Standard.RCHardwareState.rightStick)
}
inline ::DJIFRProto::Standard::Stick* RCHardwareState::release_rightstick() {
  
  ::DJIFRProto::Standard::Stick* temp = _impl_.rightstick_;
  _impl_.rightstick_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DJIFRProto::Standard::Stick* RCHardwareState::unsafe_arena_release_rightstick() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.RCHardwareState.rightStick)
  
  ::DJIFRProto::Standard::Stick* temp = _impl_.rightstick_;
  _impl_.rightstick_ = nullptr;
  return temp;
}
inline ::DJIFRProto::Standard::Stick* RCHardwareState::_internal_mutable_rightstick() {
  
  if (_impl_.rightstick_ == nullptr) {
    auto* p = CreateMaybeMessage<::DJIFRProto::Standard::Stick>(GetArenaForAllocation());
    _impl_.rightstick_ = p;
  }
  return _impl_.rightstick_;
}
inline ::DJIFRProto::Standard::Stick* RCHardwareState::mutable_rightstick() {
  ::DJIFRProto::Standard::Stick* _msg = _internal_mutable_rightstick();
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.RCHardwareState.rightStick)
  return _msg;
}
inline void RCHardwareState::set_allocated_rightstick(::DJIFRProto::Standard::Stick* rightstick) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rightstick_;
  }
  if (rightstick) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rightstick);
    if (message_arena != submessage_arena) {
      rightstick = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rightstick, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rightstick_ = rightstick;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.RCHardwareState.rightStick)
}

// int32 leftWheel = 3;
inline void RCHardwareState::clear_leftwheel() {
  _impl_.leftwheel_ = 0;
}
inline int32_t RCHardwareState::_internal_leftwheel() const {
  return _impl_.leftwheel_;
}
inline int32_t RCHardwareState::leftwheel() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCHardwareState.leftWheel)
  return _internal_leftwheel();
}
inline void RCHardwareState::_internal_set_leftwheel(int32_t value) {
  
  _impl_.leftwheel_ = value;
}
inline void RCHardwareState::set_leftwheel(int32_t value) {
  _internal_set_leftwheel(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.RCHardwareState.leftWheel)
}

// .DJIFRProto.Standard.RCRightWheel rightWheel = 4;
inline bool RCHardwareState::_internal_has_rightwheel() const {
  return this != internal_default_instance() && _impl_.rightwheel_ != nullptr;
}
inline bool RCHardwareState::has_rightwheel() const {
  return _internal_has_rightwheel();
}
inline void RCHardwareState::clear_rightwheel() {
  if (GetArenaForAllocation() == nullptr && _impl_.rightwheel_ != nullptr) {
    delete _impl_.rightwheel_;
  }
  _impl_.rightwheel_ = nullptr;
}
inline const ::DJIFRProto::Standard::RCRightWheel& RCHardwareState::_internal_rightwheel() const {
  const ::DJIFRProto::Standard::RCRightWheel* p = _impl_.rightwheel_;
  return p != nullptr ? *p : reinterpret_cast<const ::DJIFRProto::Standard::RCRightWheel&>(
      ::DJIFRProto::Standard::_RCRightWheel_default_instance_);
}
inline const ::DJIFRProto::Standard::RCRightWheel& RCHardwareState::rightwheel() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCHardwareState.rightWheel)
  return _internal_rightwheel();
}
inline void RCHardwareState::unsafe_arena_set_allocated_rightwheel(
    ::DJIFRProto::Standard::RCRightWheel* rightwheel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rightwheel_);
  }
  _impl_.rightwheel_ = rightwheel;
  if (rightwheel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DJIFRProto.Standard.RCHardwareState.rightWheel)
}
inline ::DJIFRProto::Standard::RCRightWheel* RCHardwareState::release_rightwheel() {
  
  ::DJIFRProto::Standard::RCRightWheel* temp = _impl_.rightwheel_;
  _impl_.rightwheel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DJIFRProto::Standard::RCRightWheel* RCHardwareState::unsafe_arena_release_rightwheel() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.RCHardwareState.rightWheel)
  
  ::DJIFRProto::Standard::RCRightWheel* temp = _impl_.rightwheel_;
  _impl_.rightwheel_ = nullptr;
  return temp;
}
inline ::DJIFRProto::Standard::RCRightWheel* RCHardwareState::_internal_mutable_rightwheel() {
  
  if (_impl_.rightwheel_ == nullptr) {
    auto* p = CreateMaybeMessage<::DJIFRProto::Standard::RCRightWheel>(GetArenaForAllocation());
    _impl_.rightwheel_ = p;
  }
  return _impl_.rightwheel_;
}
inline ::DJIFRProto::Standard::RCRightWheel* RCHardwareState::mutable_rightwheel() {
  ::DJIFRProto::Standard::RCRightWheel* _msg = _internal_mutable_rightwheel();
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.RCHardwareState.rightWheel)
  return _msg;
}
inline void RCHardwareState::set_allocated_rightwheel(::DJIFRProto::Standard::RCRightWheel* rightwheel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rightwheel_;
  }
  if (rightwheel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rightwheel);
    if (message_arena != submessage_arena) {
      rightwheel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rightwheel, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rightwheel_ = rightwheel;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.RCHardwareState.rightWheel)
}

// .DJIFRProto.Standard.RCFlightModel.Switch flightModeSwitch = 5;
inline void RCHardwareState::clear_flightmodeswitch() {
  _impl_.flightmodeswitch_ = 0;
}
inline ::DJIFRProto::Standard::RCFlightModel_Switch RCHardwareState::_internal_flightmodeswitch() const {
  return static_cast< ::DJIFRProto::Standard::RCFlightModel_Switch >(_impl_.flightmodeswitch_);
}
inline ::DJIFRProto::Standard::RCFlightModel_Switch RCHardwareState::flightmodeswitch() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCHardwareState.flightModeSwitch)
  return _internal_flightmodeswitch();
}
inline void RCHardwareState::_internal_set_flightmodeswitch(::DJIFRProto::Standard::RCFlightModel_Switch value) {
  
  _impl_.flightmodeswitch_ = value;
}
inline void RCHardwareState::set_flightmodeswitch(::DJIFRProto::Standard::RCFlightModel_Switch value) {
  _internal_set_flightmodeswitch(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.RCHardwareState.flightModeSwitch)
}

// .DJIFRProto.Standard.RCButton goHomeButton = 6;
inline bool RCHardwareState::_internal_has_gohomebutton() const {
  return this != internal_default_instance() && _impl_.gohomebutton_ != nullptr;
}
inline bool RCHardwareState::has_gohomebutton() const {
  return _internal_has_gohomebutton();
}
inline void RCHardwareState::clear_gohomebutton() {
  if (GetArenaForAllocation() == nullptr && _impl_.gohomebutton_ != nullptr) {
    delete _impl_.gohomebutton_;
  }
  _impl_.gohomebutton_ = nullptr;
}
inline const ::DJIFRProto::Standard::RCButton& RCHardwareState::_internal_gohomebutton() const {
  const ::DJIFRProto::Standard::RCButton* p = _impl_.gohomebutton_;
  return p != nullptr ? *p : reinterpret_cast<const ::DJIFRProto::Standard::RCButton&>(
      ::DJIFRProto::Standard::_RCButton_default_instance_);
}
inline const ::DJIFRProto::Standard::RCButton& RCHardwareState::gohomebutton() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCHardwareState.goHomeButton)
  return _internal_gohomebutton();
}
inline void RCHardwareState::unsafe_arena_set_allocated_gohomebutton(
    ::DJIFRProto::Standard::RCButton* gohomebutton) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gohomebutton_);
  }
  _impl_.gohomebutton_ = gohomebutton;
  if (gohomebutton) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DJIFRProto.Standard.RCHardwareState.goHomeButton)
}
inline ::DJIFRProto::Standard::RCButton* RCHardwareState::release_gohomebutton() {
  
  ::DJIFRProto::Standard::RCButton* temp = _impl_.gohomebutton_;
  _impl_.gohomebutton_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DJIFRProto::Standard::RCButton* RCHardwareState::unsafe_arena_release_gohomebutton() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.RCHardwareState.goHomeButton)
  
  ::DJIFRProto::Standard::RCButton* temp = _impl_.gohomebutton_;
  _impl_.gohomebutton_ = nullptr;
  return temp;
}
inline ::DJIFRProto::Standard::RCButton* RCHardwareState::_internal_mutable_gohomebutton() {
  
  if (_impl_.gohomebutton_ == nullptr) {
    auto* p = CreateMaybeMessage<::DJIFRProto::Standard::RCButton>(GetArenaForAllocation());
    _impl_.gohomebutton_ = p;
  }
  return _impl_.gohomebutton_;
}
inline ::DJIFRProto::Standard::RCButton* RCHardwareState::mutable_gohomebutton() {
  ::DJIFRProto::Standard::RCButton* _msg = _internal_mutable_gohomebutton();
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.RCHardwareState.goHomeButton)
  return _msg;
}
inline void RCHardwareState::set_allocated_gohomebutton(::DJIFRProto::Standard::RCButton* gohomebutton) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.gohomebutton_;
  }
  if (gohomebutton) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gohomebutton);
    if (message_arena != submessage_arena) {
      gohomebutton = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gohomebutton, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gohomebutton_ = gohomebutton;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.RCHardwareState.goHomeButton)
}

// .DJIFRProto.Standard.RCButton recordButton = 7;
inline bool RCHardwareState::_internal_has_recordbutton() const {
  return this != internal_default_instance() && _impl_.recordbutton_ != nullptr;
}
inline bool RCHardwareState::has_recordbutton() const {
  return _internal_has_recordbutton();
}
inline void RCHardwareState::clear_recordbutton() {
  if (GetArenaForAllocation() == nullptr && _impl_.recordbutton_ != nullptr) {
    delete _impl_.recordbutton_;
  }
  _impl_.recordbutton_ = nullptr;
}
inline const ::DJIFRProto::Standard::RCButton& RCHardwareState::_internal_recordbutton() const {
  const ::DJIFRProto::Standard::RCButton* p = _impl_.recordbutton_;
  return p != nullptr ? *p : reinterpret_cast<const ::DJIFRProto::Standard::RCButton&>(
      ::DJIFRProto::Standard::_RCButton_default_instance_);
}
inline const ::DJIFRProto::Standard::RCButton& RCHardwareState::recordbutton() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCHardwareState.recordButton)
  return _internal_recordbutton();
}
inline void RCHardwareState::unsafe_arena_set_allocated_recordbutton(
    ::DJIFRProto::Standard::RCButton* recordbutton) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recordbutton_);
  }
  _impl_.recordbutton_ = recordbutton;
  if (recordbutton) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DJIFRProto.Standard.RCHardwareState.recordButton)
}
inline ::DJIFRProto::Standard::RCButton* RCHardwareState::release_recordbutton() {
  
  ::DJIFRProto::Standard::RCButton* temp = _impl_.recordbutton_;
  _impl_.recordbutton_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DJIFRProto::Standard::RCButton* RCHardwareState::unsafe_arena_release_recordbutton() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.RCHardwareState.recordButton)
  
  ::DJIFRProto::Standard::RCButton* temp = _impl_.recordbutton_;
  _impl_.recordbutton_ = nullptr;
  return temp;
}
inline ::DJIFRProto::Standard::RCButton* RCHardwareState::_internal_mutable_recordbutton() {
  
  if (_impl_.recordbutton_ == nullptr) {
    auto* p = CreateMaybeMessage<::DJIFRProto::Standard::RCButton>(GetArenaForAllocation());
    _impl_.recordbutton_ = p;
  }
  return _impl_.recordbutton_;
}
inline ::DJIFRProto::Standard::RCButton* RCHardwareState::mutable_recordbutton() {
  ::DJIFRProto::Standard::RCButton* _msg = _internal_mutable_recordbutton();
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.RCHardwareState.recordButton)
  return _msg;
}
inline void RCHardwareState::set_allocated_recordbutton(::DJIFRProto::Standard::RCButton* recordbutton) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.recordbutton_;
  }
  if (recordbutton) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(recordbutton);
    if (message_arena != submessage_arena) {
      recordbutton = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recordbutton, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.recordbutton_ = recordbutton;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.RCHardwareState.recordButton)
}

// .DJIFRProto.Standard.RCButton shutterButton = 8;
inline bool RCHardwareState::_internal_has_shutterbutton() const {
  return this != internal_default_instance() && _impl_.shutterbutton_ != nullptr;
}
inline bool RCHardwareState::has_shutterbutton() const {
  return _internal_has_shutterbutton();
}
inline void RCHardwareState::clear_shutterbutton() {
  if (GetArenaForAllocation() == nullptr && _impl_.shutterbutton_ != nullptr) {
    delete _impl_.shutterbutton_;
  }
  _impl_.shutterbutton_ = nullptr;
}
inline const ::DJIFRProto::Standard::RCButton& RCHardwareState::_internal_shutterbutton() const {
  const ::DJIFRProto::Standard::RCButton* p = _impl_.shutterbutton_;
  return p != nullptr ? *p : reinterpret_cast<const ::DJIFRProto::Standard::RCButton&>(
      ::DJIFRProto::Standard::_RCButton_default_instance_);
}
inline const ::DJIFRProto::Standard::RCButton& RCHardwareState::shutterbutton() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCHardwareState.shutterButton)
  return _internal_shutterbutton();
}
inline void RCHardwareState::unsafe_arena_set_allocated_shutterbutton(
    ::DJIFRProto::Standard::RCButton* shutterbutton) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shutterbutton_);
  }
  _impl_.shutterbutton_ = shutterbutton;
  if (shutterbutton) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DJIFRProto.Standard.RCHardwareState.shutterButton)
}
inline ::DJIFRProto::Standard::RCButton* RCHardwareState::release_shutterbutton() {
  
  ::DJIFRProto::Standard::RCButton* temp = _impl_.shutterbutton_;
  _impl_.shutterbutton_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DJIFRProto::Standard::RCButton* RCHardwareState::unsafe_arena_release_shutterbutton() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.RCHardwareState.shutterButton)
  
  ::DJIFRProto::Standard::RCButton* temp = _impl_.shutterbutton_;
  _impl_.shutterbutton_ = nullptr;
  return temp;
}
inline ::DJIFRProto::Standard::RCButton* RCHardwareState::_internal_mutable_shutterbutton() {
  
  if (_impl_.shutterbutton_ == nullptr) {
    auto* p = CreateMaybeMessage<::DJIFRProto::Standard::RCButton>(GetArenaForAllocation());
    _impl_.shutterbutton_ = p;
  }
  return _impl_.shutterbutton_;
}
inline ::DJIFRProto::Standard::RCButton* RCHardwareState::mutable_shutterbutton() {
  ::DJIFRProto::Standard::RCButton* _msg = _internal_mutable_shutterbutton();
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.RCHardwareState.shutterButton)
  return _msg;
}
inline void RCHardwareState::set_allocated_shutterbutton(::DJIFRProto::Standard::RCButton* shutterbutton) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.shutterbutton_;
  }
  if (shutterbutton) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(shutterbutton);
    if (message_arena != submessage_arena) {
      shutterbutton = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shutterbutton, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.shutterbutton_ = shutterbutton;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.RCHardwareState.shutterButton)
}

// .DJIFRProto.Standard.RCButton playbackButton = 9;
inline bool RCHardwareState::_internal_has_playbackbutton() const {
  return this != internal_default_instance() && _impl_.playbackbutton_ != nullptr;
}
inline bool RCHardwareState::has_playbackbutton() const {
  return _internal_has_playbackbutton();
}
inline void RCHardwareState::clear_playbackbutton() {
  if (GetArenaForAllocation() == nullptr && _impl_.playbackbutton_ != nullptr) {
    delete _impl_.playbackbutton_;
  }
  _impl_.playbackbutton_ = nullptr;
}
inline const ::DJIFRProto::Standard::RCButton& RCHardwareState::_internal_playbackbutton() const {
  const ::DJIFRProto::Standard::RCButton* p = _impl_.playbackbutton_;
  return p != nullptr ? *p : reinterpret_cast<const ::DJIFRProto::Standard::RCButton&>(
      ::DJIFRProto::Standard::_RCButton_default_instance_);
}
inline const ::DJIFRProto::Standard::RCButton& RCHardwareState::playbackbutton() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCHardwareState.playbackButton)
  return _internal_playbackbutton();
}
inline void RCHardwareState::unsafe_arena_set_allocated_playbackbutton(
    ::DJIFRProto::Standard::RCButton* playbackbutton) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playbackbutton_);
  }
  _impl_.playbackbutton_ = playbackbutton;
  if (playbackbutton) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DJIFRProto.Standard.RCHardwareState.playbackButton)
}
inline ::DJIFRProto::Standard::RCButton* RCHardwareState::release_playbackbutton() {
  
  ::DJIFRProto::Standard::RCButton* temp = _impl_.playbackbutton_;
  _impl_.playbackbutton_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DJIFRProto::Standard::RCButton* RCHardwareState::unsafe_arena_release_playbackbutton() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.RCHardwareState.playbackButton)
  
  ::DJIFRProto::Standard::RCButton* temp = _impl_.playbackbutton_;
  _impl_.playbackbutton_ = nullptr;
  return temp;
}
inline ::DJIFRProto::Standard::RCButton* RCHardwareState::_internal_mutable_playbackbutton() {
  
  if (_impl_.playbackbutton_ == nullptr) {
    auto* p = CreateMaybeMessage<::DJIFRProto::Standard::RCButton>(GetArenaForAllocation());
    _impl_.playbackbutton_ = p;
  }
  return _impl_.playbackbutton_;
}
inline ::DJIFRProto::Standard::RCButton* RCHardwareState::mutable_playbackbutton() {
  ::DJIFRProto::Standard::RCButton* _msg = _internal_mutable_playbackbutton();
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.RCHardwareState.playbackButton)
  return _msg;
}
inline void RCHardwareState::set_allocated_playbackbutton(::DJIFRProto::Standard::RCButton* playbackbutton) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.playbackbutton_;
  }
  if (playbackbutton) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(playbackbutton);
    if (message_arena != submessage_arena) {
      playbackbutton = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playbackbutton, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playbackbutton_ = playbackbutton;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.RCHardwareState.playbackButton)
}

// .DJIFRProto.Standard.RCButton pauseButton = 10;
inline bool RCHardwareState::_internal_has_pausebutton() const {
  return this != internal_default_instance() && _impl_.pausebutton_ != nullptr;
}
inline bool RCHardwareState::has_pausebutton() const {
  return _internal_has_pausebutton();
}
inline void RCHardwareState::clear_pausebutton() {
  if (GetArenaForAllocation() == nullptr && _impl_.pausebutton_ != nullptr) {
    delete _impl_.pausebutton_;
  }
  _impl_.pausebutton_ = nullptr;
}
inline const ::DJIFRProto::Standard::RCButton& RCHardwareState::_internal_pausebutton() const {
  const ::DJIFRProto::Standard::RCButton* p = _impl_.pausebutton_;
  return p != nullptr ? *p : reinterpret_cast<const ::DJIFRProto::Standard::RCButton&>(
      ::DJIFRProto::Standard::_RCButton_default_instance_);
}
inline const ::DJIFRProto::Standard::RCButton& RCHardwareState::pausebutton() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCHardwareState.pauseButton)
  return _internal_pausebutton();
}
inline void RCHardwareState::unsafe_arena_set_allocated_pausebutton(
    ::DJIFRProto::Standard::RCButton* pausebutton) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pausebutton_);
  }
  _impl_.pausebutton_ = pausebutton;
  if (pausebutton) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DJIFRProto.Standard.RCHardwareState.pauseButton)
}
inline ::DJIFRProto::Standard::RCButton* RCHardwareState::release_pausebutton() {
  
  ::DJIFRProto::Standard::RCButton* temp = _impl_.pausebutton_;
  _impl_.pausebutton_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DJIFRProto::Standard::RCButton* RCHardwareState::unsafe_arena_release_pausebutton() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.RCHardwareState.pauseButton)
  
  ::DJIFRProto::Standard::RCButton* temp = _impl_.pausebutton_;
  _impl_.pausebutton_ = nullptr;
  return temp;
}
inline ::DJIFRProto::Standard::RCButton* RCHardwareState::_internal_mutable_pausebutton() {
  
  if (_impl_.pausebutton_ == nullptr) {
    auto* p = CreateMaybeMessage<::DJIFRProto::Standard::RCButton>(GetArenaForAllocation());
    _impl_.pausebutton_ = p;
  }
  return _impl_.pausebutton_;
}
inline ::DJIFRProto::Standard::RCButton* RCHardwareState::mutable_pausebutton() {
  ::DJIFRProto::Standard::RCButton* _msg = _internal_mutable_pausebutton();
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.RCHardwareState.pauseButton)
  return _msg;
}
inline void RCHardwareState::set_allocated_pausebutton(::DJIFRProto::Standard::RCButton* pausebutton) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pausebutton_;
  }
  if (pausebutton) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pausebutton);
    if (message_arena != submessage_arena) {
      pausebutton = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pausebutton, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pausebutton_ = pausebutton;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.RCHardwareState.pauseButton)
}

// .DJIFRProto.Standard.RCAircraftMapping.Style style = 11;
inline void RCHardwareState::clear_style() {
  _impl_.style_ = 0;
}
inline ::DJIFRProto::Standard::RCAircraftMapping_Style RCHardwareState::_internal_style() const {
  return static_cast< ::DJIFRProto::Standard::RCAircraftMapping_Style >(_impl_.style_);
}
inline ::DJIFRProto::Standard::RCAircraftMapping_Style RCHardwareState::style() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCHardwareState.style)
  return _internal_style();
}
inline void RCHardwareState::_internal_set_style(::DJIFRProto::Standard::RCAircraftMapping_Style value) {
  
  _impl_.style_ = value;
}
inline void RCHardwareState::set_style(::DJIFRProto::Standard::RCAircraftMapping_Style value) {
  _internal_set_style(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.RCHardwareState.style)
}

// .DJIFRProto.Standard.RCGPSData GPSData = 12;
inline bool RCHardwareState::_internal_has_gpsdata() const {
  return this != internal_default_instance() && _impl_.gpsdata_ != nullptr;
}
inline bool RCHardwareState::has_gpsdata() const {
  return _internal_has_gpsdata();
}
inline void RCHardwareState::clear_gpsdata() {
  if (GetArenaForAllocation() == nullptr && _impl_.gpsdata_ != nullptr) {
    delete _impl_.gpsdata_;
  }
  _impl_.gpsdata_ = nullptr;
}
inline const ::DJIFRProto::Standard::RCGPSData& RCHardwareState::_internal_gpsdata() const {
  const ::DJIFRProto::Standard::RCGPSData* p = _impl_.gpsdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::DJIFRProto::Standard::RCGPSData&>(
      ::DJIFRProto::Standard::_RCGPSData_default_instance_);
}
inline const ::DJIFRProto::Standard::RCGPSData& RCHardwareState::gpsdata() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.RCHardwareState.GPSData)
  return _internal_gpsdata();
}
inline void RCHardwareState::unsafe_arena_set_allocated_gpsdata(
    ::DJIFRProto::Standard::RCGPSData* gpsdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gpsdata_);
  }
  _impl_.gpsdata_ = gpsdata;
  if (gpsdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DJIFRProto.Standard.RCHardwareState.GPSData)
}
inline ::DJIFRProto::Standard::RCGPSData* RCHardwareState::release_gpsdata() {
  
  ::DJIFRProto::Standard::RCGPSData* temp = _impl_.gpsdata_;
  _impl_.gpsdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DJIFRProto::Standard::RCGPSData* RCHardwareState::unsafe_arena_release_gpsdata() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.RCHardwareState.GPSData)
  
  ::DJIFRProto::Standard::RCGPSData* temp = _impl_.gpsdata_;
  _impl_.gpsdata_ = nullptr;
  return temp;
}
inline ::DJIFRProto::Standard::RCGPSData* RCHardwareState::_internal_mutable_gpsdata() {
  
  if (_impl_.gpsdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::DJIFRProto::Standard::RCGPSData>(GetArenaForAllocation());
    _impl_.gpsdata_ = p;
  }
  return _impl_.gpsdata_;
}
inline ::DJIFRProto::Standard::RCGPSData* RCHardwareState::mutable_gpsdata() {
  ::DJIFRProto::Standard::RCGPSData* _msg = _internal_mutable_gpsdata();
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.RCHardwareState.GPSData)
  return _msg;
}
inline void RCHardwareState::set_allocated_gpsdata(::DJIFRProto::Standard::RCGPSData* gpsdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.gpsdata_;
  }
  if (gpsdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gpsdata);
    if (message_arena != submessage_arena) {
      gpsdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gpsdata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gpsdata_ = gpsdata;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.RCHardwareState.GPSData)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Standard
}  // namespace DJIFRProto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::DJIFRProto::Standard::RCFlightModel_Switch> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DJIFRProto::Standard::RCFlightModel_Switch>() {
  return ::DJIFRProto::Standard::RCFlightModel_Switch_descriptor();
}
template <> struct is_proto_enum< ::DJIFRProto::Standard::RCAircraftMapping_Style> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DJIFRProto::Standard::RCAircraftMapping_Style>() {
  return ::DJIFRProto::Standard::RCAircraftMapping_Style_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_FRRCModelProto_2eproto
