// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FRSummaryModelProto.proto

#include "FRSummaryModelProto.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace DJIFRProto {
namespace Standard {
PROTOBUF_CONSTEXPR ComponentInformation::ComponentInformation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.firmwareversion_)*/{}
  , /*decltype(_impl_._firmwareversion_cached_byte_size_)*/{0}
  , /*decltype(_impl_.serialnumber_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ComponentInformationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComponentInformationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComponentInformationDefaultTypeInternal() {}
  union {
    ComponentInformation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComponentInformationDefaultTypeInternal _ComponentInformation_default_instance_;
PROTOBUF_CONSTEXPR SummaryInformation_BatteriesInformationEntry_DoNotUse::SummaryInformation_BatteriesInformationEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct SummaryInformation_BatteriesInformationEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SummaryInformation_BatteriesInformationEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SummaryInformation_BatteriesInformationEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SummaryInformation_BatteriesInformationEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SummaryInformation_BatteriesInformationEntry_DoNotUseDefaultTypeInternal _SummaryInformation_BatteriesInformationEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR SummaryInformation_CamerasInformationEntry_DoNotUse::SummaryInformation_CamerasInformationEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct SummaryInformation_CamerasInformationEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SummaryInformation_CamerasInformationEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SummaryInformation_CamerasInformationEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SummaryInformation_CamerasInformationEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SummaryInformation_CamerasInformationEntry_DoNotUseDefaultTypeInternal _SummaryInformation_CamerasInformationEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR SummaryInformation_GimbalsInformationEntry_DoNotUse::SummaryInformation_GimbalsInformationEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct SummaryInformation_GimbalsInformationEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SummaryInformation_GimbalsInformationEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SummaryInformation_GimbalsInformationEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SummaryInformation_GimbalsInformationEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SummaryInformation_GimbalsInformationEntry_DoNotUseDefaultTypeInternal _SummaryInformation_GimbalsInformationEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR SummaryInformation::SummaryInformation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.appversion_)*/{}
  , /*decltype(_impl_._appversion_cached_byte_size_)*/{0}
  , /*decltype(_impl_.batteriesinformation_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.camerasinformation_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.gimbalsinformation_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.aircraftname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.remotecontrollerinformation_)*/nullptr
  , /*decltype(_impl_.flightcontrollerinformation_)*/nullptr
  , /*decltype(_impl_.startcoordinate_)*/nullptr
  , /*decltype(_impl_.platform_)*/0
  , /*decltype(_impl_.totaldistance_)*/0
  , /*decltype(_impl_.starttime_)*/0
  , /*decltype(_impl_.totaltime_)*/0
  , /*decltype(_impl_.samplingrate_)*/0
  , /*decltype(_impl_.maxheight_)*/0
  , /*decltype(_impl_.maxhorizontalspeed_)*/0
  , /*decltype(_impl_.maxvirticalspeed_)*/0
  , /*decltype(_impl_.producttype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SummaryInformationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SummaryInformationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SummaryInformationDefaultTypeInternal() {}
  union {
    SummaryInformation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SummaryInformationDefaultTypeInternal _SummaryInformation_default_instance_;
}  // namespace Standard
}  // namespace DJIFRProto
static ::_pb::Metadata file_level_metadata_FRSummaryModelProto_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_FRSummaryModelProto_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_FRSummaryModelProto_2eproto = nullptr;

const uint32_t TableStruct_FRSummaryModelProto_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::ComponentInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::ComponentInformation, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::ComponentInformation, _impl_.firmwareversion_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::ComponentInformation, _impl_.serialnumber_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation_BatteriesInformationEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation_BatteriesInformationEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation_BatteriesInformationEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation_BatteriesInformationEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation_CamerasInformationEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation_CamerasInformationEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation_CamerasInformationEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation_CamerasInformationEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation_GimbalsInformationEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation_GimbalsInformationEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation_GimbalsInformationEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation_GimbalsInformationEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation, _impl_.platform_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation, _impl_.appversion_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation, _impl_.batteriesinformation_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation, _impl_.camerasinformation_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation, _impl_.gimbalsinformation_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation, _impl_.remotecontrollerinformation_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation, _impl_.flightcontrollerinformation_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation, _impl_.aircraftname_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation, _impl_.starttime_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation, _impl_.startcoordinate_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation, _impl_.totaldistance_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation, _impl_.totaltime_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation, _impl_.samplingrate_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation, _impl_.maxheight_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation, _impl_.maxhorizontalspeed_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation, _impl_.maxvirticalspeed_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation, _impl_.uuid_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::SummaryInformation, _impl_.producttype_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::DJIFRProto::Standard::ComponentInformation)},
  { 9, 17, -1, sizeof(::DJIFRProto::Standard::SummaryInformation_BatteriesInformationEntry_DoNotUse)},
  { 19, 27, -1, sizeof(::DJIFRProto::Standard::SummaryInformation_CamerasInformationEntry_DoNotUse)},
  { 29, 37, -1, sizeof(::DJIFRProto::Standard::SummaryInformation_GimbalsInformationEntry_DoNotUse)},
  { 39, -1, -1, sizeof(::DJIFRProto::Standard::SummaryInformation)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::DJIFRProto::Standard::_ComponentInformation_default_instance_._instance,
  &::DJIFRProto::Standard::_SummaryInformation_BatteriesInformationEntry_DoNotUse_default_instance_._instance,
  &::DJIFRProto::Standard::_SummaryInformation_CamerasInformationEntry_DoNotUse_default_instance_._instance,
  &::DJIFRProto::Standard::_SummaryInformation_GimbalsInformationEntry_DoNotUse_default_instance_._instance,
  &::DJIFRProto::Standard::_SummaryInformation_default_instance_._instance,
};

const char descriptor_table_protodef_FRSummaryModelProto_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031FRSummaryModelProto.proto\022\023DJIFRProto."
  "Standard\032\030FRCommonModelProto.proto\"T\n\024Co"
  "mponentInformation\022\r\n\005index\030\001 \001(\005\022\027\n\017fir"
  "mwareVersion\030\002 \003(\005\022\024\n\014serialNumber\030\003 \001(\t"
  "\"\336\t\n\022SummaryInformation\022B\n\010platform\030\001 \001("
  "\01620.DJIFRProto.Standard.SummaryInformati"
  "on.Platform\022\022\n\nappVersion\030\002 \003(\005\022_\n\024batte"
  "riesInformation\030\003 \003(\0132A.DJIFRProto.Stand"
  "ard.SummaryInformation.BatteriesInformat"
  "ionEntry\022[\n\022camerasInformation\030\004 \003(\0132\?.D"
  "JIFRProto.Standard.SummaryInformation.Ca"
  "merasInformationEntry\022[\n\022gimbalsInformat"
  "ion\030\005 \003(\0132\?.DJIFRProto.Standard.SummaryI"
  "nformation.GimbalsInformationEntry\022N\n\033re"
  "moteControllerInformation\030\006 \001(\0132).DJIFRP"
  "roto.Standard.ComponentInformation\022N\n\033fl"
  "ightControllerInformation\030\007 \001(\0132).DJIFRP"
  "roto.Standard.ComponentInformation\022\024\n\014ai"
  "rcraftName\030\010 \001(\t\022\021\n\tstartTime\030\n \001(\001\022B\n\017s"
  "tartCoordinate\030\013 \001(\0132).DJIFRProto.Standa"
  "rd.LocationCoordinate2D\022\025\n\rtotalDistance"
  "\030\014 \001(\002\022\021\n\ttotalTime\030\r \001(\001\022\024\n\014samplingRat"
  "e\030\016 \001(\005\022\021\n\tmaxHeight\030\017 \001(\002\022\032\n\022maxHorizon"
  "talSpeed\030\020 \001(\002\022\030\n\020maxVirticalSpeed\030\021 \001(\002"
  "\022\014\n\004uuid\030\022 \001(\t\0229\n\013productType\030\023 \001(\0162$.DJ"
  "IFRProto.Standard.SDK.ProductType\032f\n\031Bat"
  "teriesInformationEntry\022\013\n\003key\030\001 \001(\005\0228\n\005v"
  "alue\030\002 \001(\0132).DJIFRProto.Standard.Compone"
  "ntInformation:\0028\001\032d\n\027CamerasInformationE"
  "ntry\022\013\n\003key\030\001 \001(\005\0228\n\005value\030\002 \001(\0132).DJIFR"
  "Proto.Standard.ComponentInformation:\0028\001\032"
  "d\n\027GimbalsInformationEntry\022\013\n\003key\030\001 \001(\005\022"
  "8\n\005value\030\002 \001(\0132).DJIFRProto.Standard.Com"
  "ponentInformation:\0028\001\"B\n\010Platform\022\013\n\007Unk"
  "nown\020\000\022\007\n\003iOS\020\001\022\013\n\007Android\020\002\022\n\n\006Window\020\n"
  "\022\007\n\003Mac\020\013B\r\242\002\nDJIFRProtob\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_FRSummaryModelProto_2eproto_deps[1] = {
  &::descriptor_table_FRCommonModelProto_2eproto,
};
static ::_pbi::once_flag descriptor_table_FRSummaryModelProto_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_FRSummaryModelProto_2eproto = {
    false, false, 1432, descriptor_table_protodef_FRSummaryModelProto_2eproto,
    "FRSummaryModelProto.proto",
    &descriptor_table_FRSummaryModelProto_2eproto_once, descriptor_table_FRSummaryModelProto_2eproto_deps, 1, 5,
    schemas, file_default_instances, TableStruct_FRSummaryModelProto_2eproto::offsets,
    file_level_metadata_FRSummaryModelProto_2eproto, file_level_enum_descriptors_FRSummaryModelProto_2eproto,
    file_level_service_descriptors_FRSummaryModelProto_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_FRSummaryModelProto_2eproto_getter() {
  return &descriptor_table_FRSummaryModelProto_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_FRSummaryModelProto_2eproto(&descriptor_table_FRSummaryModelProto_2eproto);
namespace DJIFRProto {
namespace Standard {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SummaryInformation_Platform_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_FRSummaryModelProto_2eproto);
  return file_level_enum_descriptors_FRSummaryModelProto_2eproto[0];
}
bool SummaryInformation_Platform_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SummaryInformation_Platform SummaryInformation::Unknown;
constexpr SummaryInformation_Platform SummaryInformation::iOS;
constexpr SummaryInformation_Platform SummaryInformation::Android;
constexpr SummaryInformation_Platform SummaryInformation::Window;
constexpr SummaryInformation_Platform SummaryInformation::Mac;
constexpr SummaryInformation_Platform SummaryInformation::Platform_MIN;
constexpr SummaryInformation_Platform SummaryInformation::Platform_MAX;
constexpr int SummaryInformation::Platform_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ComponentInformation::_Internal {
 public:
};

ComponentInformation::ComponentInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DJIFRProto.Standard.ComponentInformation)
}
ComponentInformation::ComponentInformation(const ComponentInformation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ComponentInformation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.firmwareversion_){from._impl_.firmwareversion_}
    , /*decltype(_impl_._firmwareversion_cached_byte_size_)*/{0}
    , decltype(_impl_.serialnumber_){}
    , decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.serialnumber_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serialnumber_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_serialnumber().empty()) {
    _this->_impl_.serialnumber_.Set(from._internal_serialnumber(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.ComponentInformation)
}

inline void ComponentInformation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.firmwareversion_){arena}
    , /*decltype(_impl_._firmwareversion_cached_byte_size_)*/{0}
    , decltype(_impl_.serialnumber_){}
    , decltype(_impl_.index_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.serialnumber_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serialnumber_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ComponentInformation::~ComponentInformation() {
  // @@protoc_insertion_point(destructor:DJIFRProto.Standard.ComponentInformation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComponentInformation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.firmwareversion_.~RepeatedField();
  _impl_.serialnumber_.Destroy();
}

void ComponentInformation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ComponentInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:DJIFRProto.Standard.ComponentInformation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.firmwareversion_.Clear();
  _impl_.serialnumber_.ClearToEmpty();
  _impl_.index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComponentInformation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 firmwareVersion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_firmwareversion(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_firmwareversion(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string serialNumber = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_serialnumber();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DJIFRProto.Standard.ComponentInformation.serialNumber"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ComponentInformation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DJIFRProto.Standard.ComponentInformation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // repeated int32 firmwareVersion = 2;
  {
    int byte_size = _impl_._firmwareversion_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_firmwareversion(), byte_size, target);
    }
  }

  // string serialNumber = 3;
  if (!this->_internal_serialnumber().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serialnumber().data(), static_cast<int>(this->_internal_serialnumber().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DJIFRProto.Standard.ComponentInformation.serialNumber");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_serialnumber(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DJIFRProto.Standard.ComponentInformation)
  return target;
}

size_t ComponentInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DJIFRProto.Standard.ComponentInformation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 firmwareVersion = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.firmwareversion_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._firmwareversion_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string serialNumber = 3;
  if (!this->_internal_serialnumber().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serialnumber());
  }

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComponentInformation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ComponentInformation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComponentInformation::GetClassData() const { return &_class_data_; }


void ComponentInformation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ComponentInformation*>(&to_msg);
  auto& from = static_cast<const ComponentInformation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DJIFRProto.Standard.ComponentInformation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.firmwareversion_.MergeFrom(from._impl_.firmwareversion_);
  if (!from._internal_serialnumber().empty()) {
    _this->_internal_set_serialnumber(from._internal_serialnumber());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComponentInformation::CopyFrom(const ComponentInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DJIFRProto.Standard.ComponentInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComponentInformation::IsInitialized() const {
  return true;
}

void ComponentInformation::InternalSwap(ComponentInformation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.firmwareversion_.InternalSwap(&other->_impl_.firmwareversion_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serialnumber_, lhs_arena,
      &other->_impl_.serialnumber_, rhs_arena
  );
  swap(_impl_.index_, other->_impl_.index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ComponentInformation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FRSummaryModelProto_2eproto_getter, &descriptor_table_FRSummaryModelProto_2eproto_once,
      file_level_metadata_FRSummaryModelProto_2eproto[0]);
}

// ===================================================================

SummaryInformation_BatteriesInformationEntry_DoNotUse::SummaryInformation_BatteriesInformationEntry_DoNotUse() {}
SummaryInformation_BatteriesInformationEntry_DoNotUse::SummaryInformation_BatteriesInformationEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SummaryInformation_BatteriesInformationEntry_DoNotUse::MergeFrom(const SummaryInformation_BatteriesInformationEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SummaryInformation_BatteriesInformationEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FRSummaryModelProto_2eproto_getter, &descriptor_table_FRSummaryModelProto_2eproto_once,
      file_level_metadata_FRSummaryModelProto_2eproto[1]);
}

// ===================================================================

SummaryInformation_CamerasInformationEntry_DoNotUse::SummaryInformation_CamerasInformationEntry_DoNotUse() {}
SummaryInformation_CamerasInformationEntry_DoNotUse::SummaryInformation_CamerasInformationEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SummaryInformation_CamerasInformationEntry_DoNotUse::MergeFrom(const SummaryInformation_CamerasInformationEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SummaryInformation_CamerasInformationEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FRSummaryModelProto_2eproto_getter, &descriptor_table_FRSummaryModelProto_2eproto_once,
      file_level_metadata_FRSummaryModelProto_2eproto[2]);
}

// ===================================================================

SummaryInformation_GimbalsInformationEntry_DoNotUse::SummaryInformation_GimbalsInformationEntry_DoNotUse() {}
SummaryInformation_GimbalsInformationEntry_DoNotUse::SummaryInformation_GimbalsInformationEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SummaryInformation_GimbalsInformationEntry_DoNotUse::MergeFrom(const SummaryInformation_GimbalsInformationEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SummaryInformation_GimbalsInformationEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FRSummaryModelProto_2eproto_getter, &descriptor_table_FRSummaryModelProto_2eproto_once,
      file_level_metadata_FRSummaryModelProto_2eproto[3]);
}

// ===================================================================

class SummaryInformation::_Internal {
 public:
  static const ::DJIFRProto::Standard::ComponentInformation& remotecontrollerinformation(const SummaryInformation* msg);
  static const ::DJIFRProto::Standard::ComponentInformation& flightcontrollerinformation(const SummaryInformation* msg);
  static const ::DJIFRProto::Standard::LocationCoordinate2D& startcoordinate(const SummaryInformation* msg);
};

const ::DJIFRProto::Standard::ComponentInformation&
SummaryInformation::_Internal::remotecontrollerinformation(const SummaryInformation* msg) {
  return *msg->_impl_.remotecontrollerinformation_;
}
const ::DJIFRProto::Standard::ComponentInformation&
SummaryInformation::_Internal::flightcontrollerinformation(const SummaryInformation* msg) {
  return *msg->_impl_.flightcontrollerinformation_;
}
const ::DJIFRProto::Standard::LocationCoordinate2D&
SummaryInformation::_Internal::startcoordinate(const SummaryInformation* msg) {
  return *msg->_impl_.startcoordinate_;
}
void SummaryInformation::clear_startcoordinate() {
  if (GetArenaForAllocation() == nullptr && _impl_.startcoordinate_ != nullptr) {
    delete _impl_.startcoordinate_;
  }
  _impl_.startcoordinate_ = nullptr;
}
SummaryInformation::SummaryInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &SummaryInformation::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:DJIFRProto.Standard.SummaryInformation)
}
SummaryInformation::SummaryInformation(const SummaryInformation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SummaryInformation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.appversion_){from._impl_.appversion_}
    , /*decltype(_impl_._appversion_cached_byte_size_)*/{0}
    , /*decltype(_impl_.batteriesinformation_)*/{}
    , /*decltype(_impl_.camerasinformation_)*/{}
    , /*decltype(_impl_.gimbalsinformation_)*/{}
    , decltype(_impl_.aircraftname_){}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.remotecontrollerinformation_){nullptr}
    , decltype(_impl_.flightcontrollerinformation_){nullptr}
    , decltype(_impl_.startcoordinate_){nullptr}
    , decltype(_impl_.platform_){}
    , decltype(_impl_.totaldistance_){}
    , decltype(_impl_.starttime_){}
    , decltype(_impl_.totaltime_){}
    , decltype(_impl_.samplingrate_){}
    , decltype(_impl_.maxheight_){}
    , decltype(_impl_.maxhorizontalspeed_){}
    , decltype(_impl_.maxvirticalspeed_){}
    , decltype(_impl_.producttype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.batteriesinformation_.MergeFrom(from._impl_.batteriesinformation_);
  _this->_impl_.camerasinformation_.MergeFrom(from._impl_.camerasinformation_);
  _this->_impl_.gimbalsinformation_.MergeFrom(from._impl_.gimbalsinformation_);
  _impl_.aircraftname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.aircraftname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_aircraftname().empty()) {
    _this->_impl_.aircraftname_.Set(from._internal_aircraftname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uuid().empty()) {
    _this->_impl_.uuid_.Set(from._internal_uuid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_remotecontrollerinformation()) {
    _this->_impl_.remotecontrollerinformation_ = new ::DJIFRProto::Standard::ComponentInformation(*from._impl_.remotecontrollerinformation_);
  }
  if (from._internal_has_flightcontrollerinformation()) {
    _this->_impl_.flightcontrollerinformation_ = new ::DJIFRProto::Standard::ComponentInformation(*from._impl_.flightcontrollerinformation_);
  }
  if (from._internal_has_startcoordinate()) {
    _this->_impl_.startcoordinate_ = new ::DJIFRProto::Standard::LocationCoordinate2D(*from._impl_.startcoordinate_);
  }
  ::memcpy(&_impl_.platform_, &from._impl_.platform_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.producttype_) -
    reinterpret_cast<char*>(&_impl_.platform_)) + sizeof(_impl_.producttype_));
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.SummaryInformation)
}

inline void SummaryInformation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.appversion_){arena}
    , /*decltype(_impl_._appversion_cached_byte_size_)*/{0}
    , /*decltype(_impl_.batteriesinformation_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.camerasinformation_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.gimbalsinformation_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.aircraftname_){}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.remotecontrollerinformation_){nullptr}
    , decltype(_impl_.flightcontrollerinformation_){nullptr}
    , decltype(_impl_.startcoordinate_){nullptr}
    , decltype(_impl_.platform_){0}
    , decltype(_impl_.totaldistance_){0}
    , decltype(_impl_.starttime_){0}
    , decltype(_impl_.totaltime_){0}
    , decltype(_impl_.samplingrate_){0}
    , decltype(_impl_.maxheight_){0}
    , decltype(_impl_.maxhorizontalspeed_){0}
    , decltype(_impl_.maxvirticalspeed_){0}
    , decltype(_impl_.producttype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.aircraftname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.aircraftname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SummaryInformation::~SummaryInformation() {
  // @@protoc_insertion_point(destructor:DJIFRProto.Standard.SummaryInformation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void SummaryInformation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.appversion_.~RepeatedField();
  _impl_.batteriesinformation_.Destruct();
  _impl_.batteriesinformation_.~MapField();
  _impl_.camerasinformation_.Destruct();
  _impl_.camerasinformation_.~MapField();
  _impl_.gimbalsinformation_.Destruct();
  _impl_.gimbalsinformation_.~MapField();
  _impl_.aircraftname_.Destroy();
  _impl_.uuid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.remotecontrollerinformation_;
  if (this != internal_default_instance()) delete _impl_.flightcontrollerinformation_;
  if (this != internal_default_instance()) delete _impl_.startcoordinate_;
}

void SummaryInformation::ArenaDtor(void* object) {
  SummaryInformation* _this = reinterpret_cast< SummaryInformation* >(object);
  _this->_impl_.batteriesinformation_.Destruct();
  _this->_impl_.camerasinformation_.Destruct();
  _this->_impl_.gimbalsinformation_.Destruct();
}
void SummaryInformation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SummaryInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:DJIFRProto.Standard.SummaryInformation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.appversion_.Clear();
  _impl_.batteriesinformation_.Clear();
  _impl_.camerasinformation_.Clear();
  _impl_.gimbalsinformation_.Clear();
  _impl_.aircraftname_.ClearToEmpty();
  _impl_.uuid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.remotecontrollerinformation_ != nullptr) {
    delete _impl_.remotecontrollerinformation_;
  }
  _impl_.remotecontrollerinformation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.flightcontrollerinformation_ != nullptr) {
    delete _impl_.flightcontrollerinformation_;
  }
  _impl_.flightcontrollerinformation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.startcoordinate_ != nullptr) {
    delete _impl_.startcoordinate_;
  }
  _impl_.startcoordinate_ = nullptr;
  ::memset(&_impl_.platform_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.producttype_) -
      reinterpret_cast<char*>(&_impl_.platform_)) + sizeof(_impl_.producttype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SummaryInformation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DJIFRProto.Standard.SummaryInformation.Platform platform = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_platform(static_cast<::DJIFRProto::Standard::SummaryInformation_Platform>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 appVersion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_appversion(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_appversion(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<int32, .DJIFRProto.Standard.ComponentInformation> batteriesInformation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.batteriesinformation_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int32, .DJIFRProto.Standard.ComponentInformation> camerasInformation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.camerasinformation_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int32, .DJIFRProto.Standard.ComponentInformation> gimbalsInformation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.gimbalsinformation_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .DJIFRProto.Standard.ComponentInformation remoteControllerInformation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_remotecontrollerinformation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DJIFRProto.Standard.ComponentInformation flightControllerInformation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_flightcontrollerinformation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string aircraftName = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_aircraftname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DJIFRProto.Standard.SummaryInformation.aircraftName"));
        } else
          goto handle_unusual;
        continue;
      // double startTime = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _impl_.starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .DJIFRProto.Standard.LocationCoordinate2D startCoordinate = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_startcoordinate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float totalDistance = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _impl_.totaldistance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // double totalTime = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _impl_.totaltime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 samplingRate = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.samplingrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float maxHeight = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _impl_.maxheight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float maxHorizontalSpeed = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          _impl_.maxhorizontalspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float maxVirticalSpeed = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 141)) {
          _impl_.maxvirticalspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string uuid = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DJIFRProto.Standard.SummaryInformation.uuid"));
        } else
          goto handle_unusual;
        continue;
      // .DJIFRProto.Standard.SDK.ProductType productType = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_producttype(static_cast<::DJIFRProto::Standard::SDK_ProductType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SummaryInformation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DJIFRProto.Standard.SummaryInformation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DJIFRProto.Standard.SummaryInformation.Platform platform = 1;
  if (this->_internal_platform() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_platform(), target);
  }

  // repeated int32 appVersion = 2;
  {
    int byte_size = _impl_._appversion_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_appversion(), byte_size, target);
    }
  }

  // map<int32, .DJIFRProto.Standard.ComponentInformation> batteriesInformation = 3;
  if (!this->_internal_batteriesinformation().empty()) {
    using MapType = ::_pb::Map<int32_t, ::DJIFRProto::Standard::ComponentInformation>;
    using WireHelper = SummaryInformation_BatteriesInformationEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_batteriesinformation();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<int32, .DJIFRProto.Standard.ComponentInformation> camerasInformation = 4;
  if (!this->_internal_camerasinformation().empty()) {
    using MapType = ::_pb::Map<int32_t, ::DJIFRProto::Standard::ComponentInformation>;
    using WireHelper = SummaryInformation_CamerasInformationEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_camerasinformation();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<int32, .DJIFRProto.Standard.ComponentInformation> gimbalsInformation = 5;
  if (!this->_internal_gimbalsinformation().empty()) {
    using MapType = ::_pb::Map<int32_t, ::DJIFRProto::Standard::ComponentInformation>;
    using WireHelper = SummaryInformation_GimbalsInformationEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_gimbalsinformation();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
      }
    }
  }

  // .DJIFRProto.Standard.ComponentInformation remoteControllerInformation = 6;
  if (this->_internal_has_remotecontrollerinformation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::remotecontrollerinformation(this),
        _Internal::remotecontrollerinformation(this).GetCachedSize(), target, stream);
  }

  // .DJIFRProto.Standard.ComponentInformation flightControllerInformation = 7;
  if (this->_internal_has_flightcontrollerinformation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::flightcontrollerinformation(this),
        _Internal::flightcontrollerinformation(this).GetCachedSize(), target, stream);
  }

  // string aircraftName = 8;
  if (!this->_internal_aircraftname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_aircraftname().data(), static_cast<int>(this->_internal_aircraftname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DJIFRProto.Standard.SummaryInformation.aircraftName");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_aircraftname(), target);
  }

  // double startTime = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_starttime = this->_internal_starttime();
  uint64_t raw_starttime;
  memcpy(&raw_starttime, &tmp_starttime, sizeof(tmp_starttime));
  if (raw_starttime != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_starttime(), target);
  }

  // .DJIFRProto.Standard.LocationCoordinate2D startCoordinate = 11;
  if (this->_internal_has_startcoordinate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::startcoordinate(this),
        _Internal::startcoordinate(this).GetCachedSize(), target, stream);
  }

  // float totalDistance = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_totaldistance = this->_internal_totaldistance();
  uint32_t raw_totaldistance;
  memcpy(&raw_totaldistance, &tmp_totaldistance, sizeof(tmp_totaldistance));
  if (raw_totaldistance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_totaldistance(), target);
  }

  // double totalTime = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_totaltime = this->_internal_totaltime();
  uint64_t raw_totaltime;
  memcpy(&raw_totaltime, &tmp_totaltime, sizeof(tmp_totaltime));
  if (raw_totaltime != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_totaltime(), target);
  }

  // int32 samplingRate = 14;
  if (this->_internal_samplingrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_samplingrate(), target);
  }

  // float maxHeight = 15;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_maxheight = this->_internal_maxheight();
  uint32_t raw_maxheight;
  memcpy(&raw_maxheight, &tmp_maxheight, sizeof(tmp_maxheight));
  if (raw_maxheight != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(15, this->_internal_maxheight(), target);
  }

  // float maxHorizontalSpeed = 16;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_maxhorizontalspeed = this->_internal_maxhorizontalspeed();
  uint32_t raw_maxhorizontalspeed;
  memcpy(&raw_maxhorizontalspeed, &tmp_maxhorizontalspeed, sizeof(tmp_maxhorizontalspeed));
  if (raw_maxhorizontalspeed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(16, this->_internal_maxhorizontalspeed(), target);
  }

  // float maxVirticalSpeed = 17;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_maxvirticalspeed = this->_internal_maxvirticalspeed();
  uint32_t raw_maxvirticalspeed;
  memcpy(&raw_maxvirticalspeed, &tmp_maxvirticalspeed, sizeof(tmp_maxvirticalspeed));
  if (raw_maxvirticalspeed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(17, this->_internal_maxvirticalspeed(), target);
  }

  // string uuid = 18;
  if (!this->_internal_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DJIFRProto.Standard.SummaryInformation.uuid");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_uuid(), target);
  }

  // .DJIFRProto.Standard.SDK.ProductType productType = 19;
  if (this->_internal_producttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      19, this->_internal_producttype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DJIFRProto.Standard.SummaryInformation)
  return target;
}

size_t SummaryInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DJIFRProto.Standard.SummaryInformation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 appVersion = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.appversion_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._appversion_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<int32, .DJIFRProto.Standard.ComponentInformation> batteriesInformation = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_batteriesinformation_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::ComponentInformation >::const_iterator
      it = this->_internal_batteriesinformation().begin();
      it != this->_internal_batteriesinformation().end(); ++it) {
    total_size += SummaryInformation_BatteriesInformationEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, .DJIFRProto.Standard.ComponentInformation> camerasInformation = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_camerasinformation_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::ComponentInformation >::const_iterator
      it = this->_internal_camerasinformation().begin();
      it != this->_internal_camerasinformation().end(); ++it) {
    total_size += SummaryInformation_CamerasInformationEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, .DJIFRProto.Standard.ComponentInformation> gimbalsInformation = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_gimbalsinformation_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::ComponentInformation >::const_iterator
      it = this->_internal_gimbalsinformation().begin();
      it != this->_internal_gimbalsinformation().end(); ++it) {
    total_size += SummaryInformation_GimbalsInformationEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string aircraftName = 8;
  if (!this->_internal_aircraftname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_aircraftname());
  }

  // string uuid = 18;
  if (!this->_internal_uuid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // .DJIFRProto.Standard.ComponentInformation remoteControllerInformation = 6;
  if (this->_internal_has_remotecontrollerinformation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.remotecontrollerinformation_);
  }

  // .DJIFRProto.Standard.ComponentInformation flightControllerInformation = 7;
  if (this->_internal_has_flightcontrollerinformation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.flightcontrollerinformation_);
  }

  // .DJIFRProto.Standard.LocationCoordinate2D startCoordinate = 11;
  if (this->_internal_has_startcoordinate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.startcoordinate_);
  }

  // .DJIFRProto.Standard.SummaryInformation.Platform platform = 1;
  if (this->_internal_platform() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_platform());
  }

  // float totalDistance = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_totaldistance = this->_internal_totaldistance();
  uint32_t raw_totaldistance;
  memcpy(&raw_totaldistance, &tmp_totaldistance, sizeof(tmp_totaldistance));
  if (raw_totaldistance != 0) {
    total_size += 1 + 4;
  }

  // double startTime = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_starttime = this->_internal_starttime();
  uint64_t raw_starttime;
  memcpy(&raw_starttime, &tmp_starttime, sizeof(tmp_starttime));
  if (raw_starttime != 0) {
    total_size += 1 + 8;
  }

  // double totalTime = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_totaltime = this->_internal_totaltime();
  uint64_t raw_totaltime;
  memcpy(&raw_totaltime, &tmp_totaltime, sizeof(tmp_totaltime));
  if (raw_totaltime != 0) {
    total_size += 1 + 8;
  }

  // int32 samplingRate = 14;
  if (this->_internal_samplingrate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_samplingrate());
  }

  // float maxHeight = 15;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_maxheight = this->_internal_maxheight();
  uint32_t raw_maxheight;
  memcpy(&raw_maxheight, &tmp_maxheight, sizeof(tmp_maxheight));
  if (raw_maxheight != 0) {
    total_size += 1 + 4;
  }

  // float maxHorizontalSpeed = 16;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_maxhorizontalspeed = this->_internal_maxhorizontalspeed();
  uint32_t raw_maxhorizontalspeed;
  memcpy(&raw_maxhorizontalspeed, &tmp_maxhorizontalspeed, sizeof(tmp_maxhorizontalspeed));
  if (raw_maxhorizontalspeed != 0) {
    total_size += 2 + 4;
  }

  // float maxVirticalSpeed = 17;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_maxvirticalspeed = this->_internal_maxvirticalspeed();
  uint32_t raw_maxvirticalspeed;
  memcpy(&raw_maxvirticalspeed, &tmp_maxvirticalspeed, sizeof(tmp_maxvirticalspeed));
  if (raw_maxvirticalspeed != 0) {
    total_size += 2 + 4;
  }

  // .DJIFRProto.Standard.SDK.ProductType productType = 19;
  if (this->_internal_producttype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_producttype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SummaryInformation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SummaryInformation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SummaryInformation::GetClassData() const { return &_class_data_; }


void SummaryInformation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SummaryInformation*>(&to_msg);
  auto& from = static_cast<const SummaryInformation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DJIFRProto.Standard.SummaryInformation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.appversion_.MergeFrom(from._impl_.appversion_);
  _this->_impl_.batteriesinformation_.MergeFrom(from._impl_.batteriesinformation_);
  _this->_impl_.camerasinformation_.MergeFrom(from._impl_.camerasinformation_);
  _this->_impl_.gimbalsinformation_.MergeFrom(from._impl_.gimbalsinformation_);
  if (!from._internal_aircraftname().empty()) {
    _this->_internal_set_aircraftname(from._internal_aircraftname());
  }
  if (!from._internal_uuid().empty()) {
    _this->_internal_set_uuid(from._internal_uuid());
  }
  if (from._internal_has_remotecontrollerinformation()) {
    _this->_internal_mutable_remotecontrollerinformation()->::DJIFRProto::Standard::ComponentInformation::MergeFrom(
        from._internal_remotecontrollerinformation());
  }
  if (from._internal_has_flightcontrollerinformation()) {
    _this->_internal_mutable_flightcontrollerinformation()->::DJIFRProto::Standard::ComponentInformation::MergeFrom(
        from._internal_flightcontrollerinformation());
  }
  if (from._internal_has_startcoordinate()) {
    _this->_internal_mutable_startcoordinate()->::DJIFRProto::Standard::LocationCoordinate2D::MergeFrom(
        from._internal_startcoordinate());
  }
  if (from._internal_platform() != 0) {
    _this->_internal_set_platform(from._internal_platform());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_totaldistance = from._internal_totaldistance();
  uint32_t raw_totaldistance;
  memcpy(&raw_totaldistance, &tmp_totaldistance, sizeof(tmp_totaldistance));
  if (raw_totaldistance != 0) {
    _this->_internal_set_totaldistance(from._internal_totaldistance());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_starttime = from._internal_starttime();
  uint64_t raw_starttime;
  memcpy(&raw_starttime, &tmp_starttime, sizeof(tmp_starttime));
  if (raw_starttime != 0) {
    _this->_internal_set_starttime(from._internal_starttime());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_totaltime = from._internal_totaltime();
  uint64_t raw_totaltime;
  memcpy(&raw_totaltime, &tmp_totaltime, sizeof(tmp_totaltime));
  if (raw_totaltime != 0) {
    _this->_internal_set_totaltime(from._internal_totaltime());
  }
  if (from._internal_samplingrate() != 0) {
    _this->_internal_set_samplingrate(from._internal_samplingrate());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_maxheight = from._internal_maxheight();
  uint32_t raw_maxheight;
  memcpy(&raw_maxheight, &tmp_maxheight, sizeof(tmp_maxheight));
  if (raw_maxheight != 0) {
    _this->_internal_set_maxheight(from._internal_maxheight());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_maxhorizontalspeed = from._internal_maxhorizontalspeed();
  uint32_t raw_maxhorizontalspeed;
  memcpy(&raw_maxhorizontalspeed, &tmp_maxhorizontalspeed, sizeof(tmp_maxhorizontalspeed));
  if (raw_maxhorizontalspeed != 0) {
    _this->_internal_set_maxhorizontalspeed(from._internal_maxhorizontalspeed());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_maxvirticalspeed = from._internal_maxvirticalspeed();
  uint32_t raw_maxvirticalspeed;
  memcpy(&raw_maxvirticalspeed, &tmp_maxvirticalspeed, sizeof(tmp_maxvirticalspeed));
  if (raw_maxvirticalspeed != 0) {
    _this->_internal_set_maxvirticalspeed(from._internal_maxvirticalspeed());
  }
  if (from._internal_producttype() != 0) {
    _this->_internal_set_producttype(from._internal_producttype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SummaryInformation::CopyFrom(const SummaryInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DJIFRProto.Standard.SummaryInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SummaryInformation::IsInitialized() const {
  return true;
}

void SummaryInformation::InternalSwap(SummaryInformation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.appversion_.InternalSwap(&other->_impl_.appversion_);
  _impl_.batteriesinformation_.InternalSwap(&other->_impl_.batteriesinformation_);
  _impl_.camerasinformation_.InternalSwap(&other->_impl_.camerasinformation_);
  _impl_.gimbalsinformation_.InternalSwap(&other->_impl_.gimbalsinformation_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.aircraftname_, lhs_arena,
      &other->_impl_.aircraftname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SummaryInformation, _impl_.producttype_)
      + sizeof(SummaryInformation::_impl_.producttype_)
      - PROTOBUF_FIELD_OFFSET(SummaryInformation, _impl_.remotecontrollerinformation_)>(
          reinterpret_cast<char*>(&_impl_.remotecontrollerinformation_),
          reinterpret_cast<char*>(&other->_impl_.remotecontrollerinformation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SummaryInformation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FRSummaryModelProto_2eproto_getter, &descriptor_table_FRSummaryModelProto_2eproto_once,
      file_level_metadata_FRSummaryModelProto_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Standard
}  // namespace DJIFRProto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DJIFRProto::Standard::ComponentInformation*
Arena::CreateMaybeMessage< ::DJIFRProto::Standard::ComponentInformation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DJIFRProto::Standard::ComponentInformation >(arena);
}
template<> PROTOBUF_NOINLINE ::DJIFRProto::Standard::SummaryInformation_BatteriesInformationEntry_DoNotUse*
Arena::CreateMaybeMessage< ::DJIFRProto::Standard::SummaryInformation_BatteriesInformationEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DJIFRProto::Standard::SummaryInformation_BatteriesInformationEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::DJIFRProto::Standard::SummaryInformation_CamerasInformationEntry_DoNotUse*
Arena::CreateMaybeMessage< ::DJIFRProto::Standard::SummaryInformation_CamerasInformationEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DJIFRProto::Standard::SummaryInformation_CamerasInformationEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::DJIFRProto::Standard::SummaryInformation_GimbalsInformationEntry_DoNotUse*
Arena::CreateMaybeMessage< ::DJIFRProto::Standard::SummaryInformation_GimbalsInformationEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DJIFRProto::Standard::SummaryInformation_GimbalsInformationEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::DJIFRProto::Standard::SummaryInformation*
Arena::CreateMaybeMessage< ::DJIFRProto::Standard::SummaryInformation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DJIFRProto::Standard::SummaryInformation >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
