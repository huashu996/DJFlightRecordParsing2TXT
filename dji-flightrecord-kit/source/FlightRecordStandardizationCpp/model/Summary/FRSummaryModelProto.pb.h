// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FRSummaryModelProto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_FRSummaryModelProto_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_FRSummaryModelProto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "FRCommonModelProto.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_FRSummaryModelProto_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_FRSummaryModelProto_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_FRSummaryModelProto_2eproto;
namespace DJIFRProto {
namespace Standard {
class ComponentInformation;
struct ComponentInformationDefaultTypeInternal;
extern ComponentInformationDefaultTypeInternal _ComponentInformation_default_instance_;
class SummaryInformation;
struct SummaryInformationDefaultTypeInternal;
extern SummaryInformationDefaultTypeInternal _SummaryInformation_default_instance_;
class SummaryInformation_BatteriesInformationEntry_DoNotUse;
struct SummaryInformation_BatteriesInformationEntry_DoNotUseDefaultTypeInternal;
extern SummaryInformation_BatteriesInformationEntry_DoNotUseDefaultTypeInternal _SummaryInformation_BatteriesInformationEntry_DoNotUse_default_instance_;
class SummaryInformation_CamerasInformationEntry_DoNotUse;
struct SummaryInformation_CamerasInformationEntry_DoNotUseDefaultTypeInternal;
extern SummaryInformation_CamerasInformationEntry_DoNotUseDefaultTypeInternal _SummaryInformation_CamerasInformationEntry_DoNotUse_default_instance_;
class SummaryInformation_GimbalsInformationEntry_DoNotUse;
struct SummaryInformation_GimbalsInformationEntry_DoNotUseDefaultTypeInternal;
extern SummaryInformation_GimbalsInformationEntry_DoNotUseDefaultTypeInternal _SummaryInformation_GimbalsInformationEntry_DoNotUse_default_instance_;
}  // namespace Standard
}  // namespace DJIFRProto
PROTOBUF_NAMESPACE_OPEN
template<> ::DJIFRProto::Standard::ComponentInformation* Arena::CreateMaybeMessage<::DJIFRProto::Standard::ComponentInformation>(Arena*);
template<> ::DJIFRProto::Standard::SummaryInformation* Arena::CreateMaybeMessage<::DJIFRProto::Standard::SummaryInformation>(Arena*);
template<> ::DJIFRProto::Standard::SummaryInformation_BatteriesInformationEntry_DoNotUse* Arena::CreateMaybeMessage<::DJIFRProto::Standard::SummaryInformation_BatteriesInformationEntry_DoNotUse>(Arena*);
template<> ::DJIFRProto::Standard::SummaryInformation_CamerasInformationEntry_DoNotUse* Arena::CreateMaybeMessage<::DJIFRProto::Standard::SummaryInformation_CamerasInformationEntry_DoNotUse>(Arena*);
template<> ::DJIFRProto::Standard::SummaryInformation_GimbalsInformationEntry_DoNotUse* Arena::CreateMaybeMessage<::DJIFRProto::Standard::SummaryInformation_GimbalsInformationEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace DJIFRProto {
namespace Standard {

enum SummaryInformation_Platform : int {
  SummaryInformation_Platform_Unknown = 0,
  SummaryInformation_Platform_iOS = 1,
  SummaryInformation_Platform_Android = 2,
  SummaryInformation_Platform_Window = 10,
  SummaryInformation_Platform_Mac = 11,
  SummaryInformation_Platform_SummaryInformation_Platform_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SummaryInformation_Platform_SummaryInformation_Platform_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SummaryInformation_Platform_IsValid(int value);
constexpr SummaryInformation_Platform SummaryInformation_Platform_Platform_MIN = SummaryInformation_Platform_Unknown;
constexpr SummaryInformation_Platform SummaryInformation_Platform_Platform_MAX = SummaryInformation_Platform_Mac;
constexpr int SummaryInformation_Platform_Platform_ARRAYSIZE = SummaryInformation_Platform_Platform_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SummaryInformation_Platform_descriptor();
template<typename T>
inline const std::string& SummaryInformation_Platform_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SummaryInformation_Platform>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SummaryInformation_Platform_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SummaryInformation_Platform_descriptor(), enum_t_value);
}
inline bool SummaryInformation_Platform_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SummaryInformation_Platform* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SummaryInformation_Platform>(
    SummaryInformation_Platform_descriptor(), name, value);
}
// ===================================================================

class ComponentInformation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.ComponentInformation) */ {
 public:
  inline ComponentInformation() : ComponentInformation(nullptr) {}
  ~ComponentInformation() override;
  explicit PROTOBUF_CONSTEXPR ComponentInformation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComponentInformation(const ComponentInformation& from);
  ComponentInformation(ComponentInformation&& from) noexcept
    : ComponentInformation() {
    *this = ::std::move(from);
  }

  inline ComponentInformation& operator=(const ComponentInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComponentInformation& operator=(ComponentInformation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComponentInformation& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComponentInformation* internal_default_instance() {
    return reinterpret_cast<const ComponentInformation*>(
               &_ComponentInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ComponentInformation& a, ComponentInformation& b) {
    a.Swap(&b);
  }
  inline void Swap(ComponentInformation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComponentInformation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ComponentInformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ComponentInformation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ComponentInformation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ComponentInformation& from) {
    ComponentInformation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComponentInformation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DJIFRProto.Standard.ComponentInformation";
  }
  protected:
  explicit ComponentInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirmwareVersionFieldNumber = 2,
    kSerialNumberFieldNumber = 3,
    kIndexFieldNumber = 1,
  };
  // repeated int32 firmwareVersion = 2;
  int firmwareversion_size() const;
  private:
  int _internal_firmwareversion_size() const;
  public:
  void clear_firmwareversion();
  private:
  int32_t _internal_firmwareversion(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_firmwareversion() const;
  void _internal_add_firmwareversion(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_firmwareversion();
  public:
  int32_t firmwareversion(int index) const;
  void set_firmwareversion(int index, int32_t value);
  void add_firmwareversion(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      firmwareversion() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_firmwareversion();

  // string serialNumber = 3;
  void clear_serialnumber();
  const std::string& serialnumber() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serialnumber(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serialnumber();
  PROTOBUF_NODISCARD std::string* release_serialnumber();
  void set_allocated_serialnumber(std::string* serialnumber);
  private:
  const std::string& _internal_serialnumber() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serialnumber(const std::string& value);
  std::string* _internal_mutable_serialnumber();
  public:

  // int32 index = 1;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.ComponentInformation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > firmwareversion_;
    mutable std::atomic<int> _firmwareversion_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serialnumber_;
    int32_t index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FRSummaryModelProto_2eproto;
};
// -------------------------------------------------------------------

class SummaryInformation_BatteriesInformationEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SummaryInformation_BatteriesInformationEntry_DoNotUse, 
    int32_t, ::DJIFRProto::Standard::ComponentInformation,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SummaryInformation_BatteriesInformationEntry_DoNotUse, 
    int32_t, ::DJIFRProto::Standard::ComponentInformation,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  SummaryInformation_BatteriesInformationEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR SummaryInformation_BatteriesInformationEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SummaryInformation_BatteriesInformationEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SummaryInformation_BatteriesInformationEntry_DoNotUse& other);
  static const SummaryInformation_BatteriesInformationEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SummaryInformation_BatteriesInformationEntry_DoNotUse*>(&_SummaryInformation_BatteriesInformationEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_FRSummaryModelProto_2eproto;
};

// -------------------------------------------------------------------

class SummaryInformation_CamerasInformationEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SummaryInformation_CamerasInformationEntry_DoNotUse, 
    int32_t, ::DJIFRProto::Standard::ComponentInformation,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SummaryInformation_CamerasInformationEntry_DoNotUse, 
    int32_t, ::DJIFRProto::Standard::ComponentInformation,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  SummaryInformation_CamerasInformationEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR SummaryInformation_CamerasInformationEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SummaryInformation_CamerasInformationEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SummaryInformation_CamerasInformationEntry_DoNotUse& other);
  static const SummaryInformation_CamerasInformationEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SummaryInformation_CamerasInformationEntry_DoNotUse*>(&_SummaryInformation_CamerasInformationEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_FRSummaryModelProto_2eproto;
};

// -------------------------------------------------------------------

class SummaryInformation_GimbalsInformationEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SummaryInformation_GimbalsInformationEntry_DoNotUse, 
    int32_t, ::DJIFRProto::Standard::ComponentInformation,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SummaryInformation_GimbalsInformationEntry_DoNotUse, 
    int32_t, ::DJIFRProto::Standard::ComponentInformation,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  SummaryInformation_GimbalsInformationEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR SummaryInformation_GimbalsInformationEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SummaryInformation_GimbalsInformationEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SummaryInformation_GimbalsInformationEntry_DoNotUse& other);
  static const SummaryInformation_GimbalsInformationEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SummaryInformation_GimbalsInformationEntry_DoNotUse*>(&_SummaryInformation_GimbalsInformationEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_FRSummaryModelProto_2eproto;
};

// -------------------------------------------------------------------

class SummaryInformation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.SummaryInformation) */ {
 public:
  inline SummaryInformation() : SummaryInformation(nullptr) {}
  ~SummaryInformation() override;
  explicit PROTOBUF_CONSTEXPR SummaryInformation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SummaryInformation(const SummaryInformation& from);
  SummaryInformation(SummaryInformation&& from) noexcept
    : SummaryInformation() {
    *this = ::std::move(from);
  }

  inline SummaryInformation& operator=(const SummaryInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline SummaryInformation& operator=(SummaryInformation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SummaryInformation& default_instance() {
    return *internal_default_instance();
  }
  static inline const SummaryInformation* internal_default_instance() {
    return reinterpret_cast<const SummaryInformation*>(
               &_SummaryInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SummaryInformation& a, SummaryInformation& b) {
    a.Swap(&b);
  }
  inline void Swap(SummaryInformation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SummaryInformation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SummaryInformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SummaryInformation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SummaryInformation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SummaryInformation& from) {
    SummaryInformation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SummaryInformation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DJIFRProto.Standard.SummaryInformation";
  }
  protected:
  explicit SummaryInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  typedef SummaryInformation_Platform Platform;
  static constexpr Platform Unknown =
    SummaryInformation_Platform_Unknown;
  static constexpr Platform iOS =
    SummaryInformation_Platform_iOS;
  static constexpr Platform Android =
    SummaryInformation_Platform_Android;
  static constexpr Platform Window =
    SummaryInformation_Platform_Window;
  static constexpr Platform Mac =
    SummaryInformation_Platform_Mac;
  static inline bool Platform_IsValid(int value) {
    return SummaryInformation_Platform_IsValid(value);
  }
  static constexpr Platform Platform_MIN =
    SummaryInformation_Platform_Platform_MIN;
  static constexpr Platform Platform_MAX =
    SummaryInformation_Platform_Platform_MAX;
  static constexpr int Platform_ARRAYSIZE =
    SummaryInformation_Platform_Platform_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Platform_descriptor() {
    return SummaryInformation_Platform_descriptor();
  }
  template<typename T>
  static inline const std::string& Platform_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Platform>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Platform_Name.");
    return SummaryInformation_Platform_Name(enum_t_value);
  }
  static inline bool Platform_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Platform* value) {
    return SummaryInformation_Platform_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAppVersionFieldNumber = 2,
    kBatteriesInformationFieldNumber = 3,
    kCamerasInformationFieldNumber = 4,
    kGimbalsInformationFieldNumber = 5,
    kAircraftNameFieldNumber = 8,
    kUuidFieldNumber = 18,
    kRemoteControllerInformationFieldNumber = 6,
    kFlightControllerInformationFieldNumber = 7,
    kStartCoordinateFieldNumber = 11,
    kPlatformFieldNumber = 1,
    kTotalDistanceFieldNumber = 12,
    kStartTimeFieldNumber = 10,
    kTotalTimeFieldNumber = 13,
    kSamplingRateFieldNumber = 14,
    kMaxHeightFieldNumber = 15,
    kMaxHorizontalSpeedFieldNumber = 16,
    kMaxVirticalSpeedFieldNumber = 17,
    kProductTypeFieldNumber = 19,
  };
  // repeated int32 appVersion = 2;
  int appversion_size() const;
  private:
  int _internal_appversion_size() const;
  public:
  void clear_appversion();
  private:
  int32_t _internal_appversion(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_appversion() const;
  void _internal_add_appversion(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_appversion();
  public:
  int32_t appversion(int index) const;
  void set_appversion(int index, int32_t value);
  void add_appversion(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      appversion() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_appversion();

  // map<int32, .DJIFRProto.Standard.ComponentInformation> batteriesInformation = 3;
  int batteriesinformation_size() const;
  private:
  int _internal_batteriesinformation_size() const;
  public:
  void clear_batteriesinformation();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::ComponentInformation >&
      _internal_batteriesinformation() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::ComponentInformation >*
      _internal_mutable_batteriesinformation();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::ComponentInformation >&
      batteriesinformation() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::ComponentInformation >*
      mutable_batteriesinformation();

  // map<int32, .DJIFRProto.Standard.ComponentInformation> camerasInformation = 4;
  int camerasinformation_size() const;
  private:
  int _internal_camerasinformation_size() const;
  public:
  void clear_camerasinformation();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::ComponentInformation >&
      _internal_camerasinformation() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::ComponentInformation >*
      _internal_mutable_camerasinformation();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::ComponentInformation >&
      camerasinformation() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::ComponentInformation >*
      mutable_camerasinformation();

  // map<int32, .DJIFRProto.Standard.ComponentInformation> gimbalsInformation = 5;
  int gimbalsinformation_size() const;
  private:
  int _internal_gimbalsinformation_size() const;
  public:
  void clear_gimbalsinformation();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::ComponentInformation >&
      _internal_gimbalsinformation() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::ComponentInformation >*
      _internal_mutable_gimbalsinformation();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::ComponentInformation >&
      gimbalsinformation() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::ComponentInformation >*
      mutable_gimbalsinformation();

  // string aircraftName = 8;
  void clear_aircraftname();
  const std::string& aircraftname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_aircraftname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_aircraftname();
  PROTOBUF_NODISCARD std::string* release_aircraftname();
  void set_allocated_aircraftname(std::string* aircraftname);
  private:
  const std::string& _internal_aircraftname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_aircraftname(const std::string& value);
  std::string* _internal_mutable_aircraftname();
  public:

  // string uuid = 18;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // .DJIFRProto.Standard.ComponentInformation remoteControllerInformation = 6;
  bool has_remotecontrollerinformation() const;
  private:
  bool _internal_has_remotecontrollerinformation() const;
  public:
  void clear_remotecontrollerinformation();
  const ::DJIFRProto::Standard::ComponentInformation& remotecontrollerinformation() const;
  PROTOBUF_NODISCARD ::DJIFRProto::Standard::ComponentInformation* release_remotecontrollerinformation();
  ::DJIFRProto::Standard::ComponentInformation* mutable_remotecontrollerinformation();
  void set_allocated_remotecontrollerinformation(::DJIFRProto::Standard::ComponentInformation* remotecontrollerinformation);
  private:
  const ::DJIFRProto::Standard::ComponentInformation& _internal_remotecontrollerinformation() const;
  ::DJIFRProto::Standard::ComponentInformation* _internal_mutable_remotecontrollerinformation();
  public:
  void unsafe_arena_set_allocated_remotecontrollerinformation(
      ::DJIFRProto::Standard::ComponentInformation* remotecontrollerinformation);
  ::DJIFRProto::Standard::ComponentInformation* unsafe_arena_release_remotecontrollerinformation();

  // .DJIFRProto.Standard.ComponentInformation flightControllerInformation = 7;
  bool has_flightcontrollerinformation() const;
  private:
  bool _internal_has_flightcontrollerinformation() const;
  public:
  void clear_flightcontrollerinformation();
  const ::DJIFRProto::Standard::ComponentInformation& flightcontrollerinformation() const;
  PROTOBUF_NODISCARD ::DJIFRProto::Standard::ComponentInformation* release_flightcontrollerinformation();
  ::DJIFRProto::Standard::ComponentInformation* mutable_flightcontrollerinformation();
  void set_allocated_flightcontrollerinformation(::DJIFRProto::Standard::ComponentInformation* flightcontrollerinformation);
  private:
  const ::DJIFRProto::Standard::ComponentInformation& _internal_flightcontrollerinformation() const;
  ::DJIFRProto::Standard::ComponentInformation* _internal_mutable_flightcontrollerinformation();
  public:
  void unsafe_arena_set_allocated_flightcontrollerinformation(
      ::DJIFRProto::Standard::ComponentInformation* flightcontrollerinformation);
  ::DJIFRProto::Standard::ComponentInformation* unsafe_arena_release_flightcontrollerinformation();

  // .DJIFRProto.Standard.LocationCoordinate2D startCoordinate = 11;
  bool has_startcoordinate() const;
  private:
  bool _internal_has_startcoordinate() const;
  public:
  void clear_startcoordinate();
  const ::DJIFRProto::Standard::LocationCoordinate2D& startcoordinate() const;
  PROTOBUF_NODISCARD ::DJIFRProto::Standard::LocationCoordinate2D* release_startcoordinate();
  ::DJIFRProto::Standard::LocationCoordinate2D* mutable_startcoordinate();
  void set_allocated_startcoordinate(::DJIFRProto::Standard::LocationCoordinate2D* startcoordinate);
  private:
  const ::DJIFRProto::Standard::LocationCoordinate2D& _internal_startcoordinate() const;
  ::DJIFRProto::Standard::LocationCoordinate2D* _internal_mutable_startcoordinate();
  public:
  void unsafe_arena_set_allocated_startcoordinate(
      ::DJIFRProto::Standard::LocationCoordinate2D* startcoordinate);
  ::DJIFRProto::Standard::LocationCoordinate2D* unsafe_arena_release_startcoordinate();

  // .DJIFRProto.Standard.SummaryInformation.Platform platform = 1;
  void clear_platform();
  ::DJIFRProto::Standard::SummaryInformation_Platform platform() const;
  void set_platform(::DJIFRProto::Standard::SummaryInformation_Platform value);
  private:
  ::DJIFRProto::Standard::SummaryInformation_Platform _internal_platform() const;
  void _internal_set_platform(::DJIFRProto::Standard::SummaryInformation_Platform value);
  public:

  // float totalDistance = 12;
  void clear_totaldistance();
  float totaldistance() const;
  void set_totaldistance(float value);
  private:
  float _internal_totaldistance() const;
  void _internal_set_totaldistance(float value);
  public:

  // double startTime = 10;
  void clear_starttime();
  double starttime() const;
  void set_starttime(double value);
  private:
  double _internal_starttime() const;
  void _internal_set_starttime(double value);
  public:

  // double totalTime = 13;
  void clear_totaltime();
  double totaltime() const;
  void set_totaltime(double value);
  private:
  double _internal_totaltime() const;
  void _internal_set_totaltime(double value);
  public:

  // int32 samplingRate = 14;
  void clear_samplingrate();
  int32_t samplingrate() const;
  void set_samplingrate(int32_t value);
  private:
  int32_t _internal_samplingrate() const;
  void _internal_set_samplingrate(int32_t value);
  public:

  // float maxHeight = 15;
  void clear_maxheight();
  float maxheight() const;
  void set_maxheight(float value);
  private:
  float _internal_maxheight() const;
  void _internal_set_maxheight(float value);
  public:

  // float maxHorizontalSpeed = 16;
  void clear_maxhorizontalspeed();
  float maxhorizontalspeed() const;
  void set_maxhorizontalspeed(float value);
  private:
  float _internal_maxhorizontalspeed() const;
  void _internal_set_maxhorizontalspeed(float value);
  public:

  // float maxVirticalSpeed = 17;
  void clear_maxvirticalspeed();
  float maxvirticalspeed() const;
  void set_maxvirticalspeed(float value);
  private:
  float _internal_maxvirticalspeed() const;
  void _internal_set_maxvirticalspeed(float value);
  public:

  // .DJIFRProto.Standard.SDK.ProductType productType = 19;
  void clear_producttype();
  ::DJIFRProto::Standard::SDK_ProductType producttype() const;
  void set_producttype(::DJIFRProto::Standard::SDK_ProductType value);
  private:
  ::DJIFRProto::Standard::SDK_ProductType _internal_producttype() const;
  void _internal_set_producttype(::DJIFRProto::Standard::SDK_ProductType value);
  public:

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.SummaryInformation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > appversion_;
    mutable std::atomic<int> _appversion_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        SummaryInformation_BatteriesInformationEntry_DoNotUse,
        int32_t, ::DJIFRProto::Standard::ComponentInformation,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> batteriesinformation_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        SummaryInformation_CamerasInformationEntry_DoNotUse,
        int32_t, ::DJIFRProto::Standard::ComponentInformation,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> camerasinformation_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        SummaryInformation_GimbalsInformationEntry_DoNotUse,
        int32_t, ::DJIFRProto::Standard::ComponentInformation,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> gimbalsinformation_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr aircraftname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    ::DJIFRProto::Standard::ComponentInformation* remotecontrollerinformation_;
    ::DJIFRProto::Standard::ComponentInformation* flightcontrollerinformation_;
    ::DJIFRProto::Standard::LocationCoordinate2D* startcoordinate_;
    int platform_;
    float totaldistance_;
    double starttime_;
    double totaltime_;
    int32_t samplingrate_;
    float maxheight_;
    float maxhorizontalspeed_;
    float maxvirticalspeed_;
    int producttype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FRSummaryModelProto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ComponentInformation

// int32 index = 1;
inline void ComponentInformation::clear_index() {
  _impl_.index_ = 0;
}
inline int32_t ComponentInformation::_internal_index() const {
  return _impl_.index_;
}
inline int32_t ComponentInformation::index() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.ComponentInformation.index)
  return _internal_index();
}
inline void ComponentInformation::_internal_set_index(int32_t value) {
  
  _impl_.index_ = value;
}
inline void ComponentInformation::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.ComponentInformation.index)
}

// repeated int32 firmwareVersion = 2;
inline int ComponentInformation::_internal_firmwareversion_size() const {
  return _impl_.firmwareversion_.size();
}
inline int ComponentInformation::firmwareversion_size() const {
  return _internal_firmwareversion_size();
}
inline void ComponentInformation::clear_firmwareversion() {
  _impl_.firmwareversion_.Clear();
}
inline int32_t ComponentInformation::_internal_firmwareversion(int index) const {
  return _impl_.firmwareversion_.Get(index);
}
inline int32_t ComponentInformation::firmwareversion(int index) const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.ComponentInformation.firmwareVersion)
  return _internal_firmwareversion(index);
}
inline void ComponentInformation::set_firmwareversion(int index, int32_t value) {
  _impl_.firmwareversion_.Set(index, value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.ComponentInformation.firmwareVersion)
}
inline void ComponentInformation::_internal_add_firmwareversion(int32_t value) {
  _impl_.firmwareversion_.Add(value);
}
inline void ComponentInformation::add_firmwareversion(int32_t value) {
  _internal_add_firmwareversion(value);
  // @@protoc_insertion_point(field_add:DJIFRProto.Standard.ComponentInformation.firmwareVersion)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ComponentInformation::_internal_firmwareversion() const {
  return _impl_.firmwareversion_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ComponentInformation::firmwareversion() const {
  // @@protoc_insertion_point(field_list:DJIFRProto.Standard.ComponentInformation.firmwareVersion)
  return _internal_firmwareversion();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ComponentInformation::_internal_mutable_firmwareversion() {
  return &_impl_.firmwareversion_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ComponentInformation::mutable_firmwareversion() {
  // @@protoc_insertion_point(field_mutable_list:DJIFRProto.Standard.ComponentInformation.firmwareVersion)
  return _internal_mutable_firmwareversion();
}

// string serialNumber = 3;
inline void ComponentInformation::clear_serialnumber() {
  _impl_.serialnumber_.ClearToEmpty();
}
inline const std::string& ComponentInformation::serialnumber() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.ComponentInformation.serialNumber)
  return _internal_serialnumber();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ComponentInformation::set_serialnumber(ArgT0&& arg0, ArgT... args) {
 
 _impl_.serialnumber_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.ComponentInformation.serialNumber)
}
inline std::string* ComponentInformation::mutable_serialnumber() {
  std::string* _s = _internal_mutable_serialnumber();
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.ComponentInformation.serialNumber)
  return _s;
}
inline const std::string& ComponentInformation::_internal_serialnumber() const {
  return _impl_.serialnumber_.Get();
}
inline void ComponentInformation::_internal_set_serialnumber(const std::string& value) {
  
  _impl_.serialnumber_.Set(value, GetArenaForAllocation());
}
inline std::string* ComponentInformation::_internal_mutable_serialnumber() {
  
  return _impl_.serialnumber_.Mutable(GetArenaForAllocation());
}
inline std::string* ComponentInformation::release_serialnumber() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.ComponentInformation.serialNumber)
  return _impl_.serialnumber_.Release();
}
inline void ComponentInformation::set_allocated_serialnumber(std::string* serialnumber) {
  if (serialnumber != nullptr) {
    
  } else {
    
  }
  _impl_.serialnumber_.SetAllocated(serialnumber, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.serialnumber_.IsDefault()) {
    _impl_.serialnumber_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.ComponentInformation.serialNumber)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SummaryInformation

// .DJIFRProto.Standard.SummaryInformation.Platform platform = 1;
inline void SummaryInformation::clear_platform() {
  _impl_.platform_ = 0;
}
inline ::DJIFRProto::Standard::SummaryInformation_Platform SummaryInformation::_internal_platform() const {
  return static_cast< ::DJIFRProto::Standard::SummaryInformation_Platform >(_impl_.platform_);
}
inline ::DJIFRProto::Standard::SummaryInformation_Platform SummaryInformation::platform() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.SummaryInformation.platform)
  return _internal_platform();
}
inline void SummaryInformation::_internal_set_platform(::DJIFRProto::Standard::SummaryInformation_Platform value) {
  
  _impl_.platform_ = value;
}
inline void SummaryInformation::set_platform(::DJIFRProto::Standard::SummaryInformation_Platform value) {
  _internal_set_platform(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.SummaryInformation.platform)
}

// repeated int32 appVersion = 2;
inline int SummaryInformation::_internal_appversion_size() const {
  return _impl_.appversion_.size();
}
inline int SummaryInformation::appversion_size() const {
  return _internal_appversion_size();
}
inline void SummaryInformation::clear_appversion() {
  _impl_.appversion_.Clear();
}
inline int32_t SummaryInformation::_internal_appversion(int index) const {
  return _impl_.appversion_.Get(index);
}
inline int32_t SummaryInformation::appversion(int index) const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.SummaryInformation.appVersion)
  return _internal_appversion(index);
}
inline void SummaryInformation::set_appversion(int index, int32_t value) {
  _impl_.appversion_.Set(index, value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.SummaryInformation.appVersion)
}
inline void SummaryInformation::_internal_add_appversion(int32_t value) {
  _impl_.appversion_.Add(value);
}
inline void SummaryInformation::add_appversion(int32_t value) {
  _internal_add_appversion(value);
  // @@protoc_insertion_point(field_add:DJIFRProto.Standard.SummaryInformation.appVersion)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SummaryInformation::_internal_appversion() const {
  return _impl_.appversion_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SummaryInformation::appversion() const {
  // @@protoc_insertion_point(field_list:DJIFRProto.Standard.SummaryInformation.appVersion)
  return _internal_appversion();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SummaryInformation::_internal_mutable_appversion() {
  return &_impl_.appversion_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SummaryInformation::mutable_appversion() {
  // @@protoc_insertion_point(field_mutable_list:DJIFRProto.Standard.SummaryInformation.appVersion)
  return _internal_mutable_appversion();
}

// map<int32, .DJIFRProto.Standard.ComponentInformation> batteriesInformation = 3;
inline int SummaryInformation::_internal_batteriesinformation_size() const {
  return _impl_.batteriesinformation_.size();
}
inline int SummaryInformation::batteriesinformation_size() const {
  return _internal_batteriesinformation_size();
}
inline void SummaryInformation::clear_batteriesinformation() {
  _impl_.batteriesinformation_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::ComponentInformation >&
SummaryInformation::_internal_batteriesinformation() const {
  return _impl_.batteriesinformation_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::ComponentInformation >&
SummaryInformation::batteriesinformation() const {
  // @@protoc_insertion_point(field_map:DJIFRProto.Standard.SummaryInformation.batteriesInformation)
  return _internal_batteriesinformation();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::ComponentInformation >*
SummaryInformation::_internal_mutable_batteriesinformation() {
  return _impl_.batteriesinformation_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::ComponentInformation >*
SummaryInformation::mutable_batteriesinformation() {
  // @@protoc_insertion_point(field_mutable_map:DJIFRProto.Standard.SummaryInformation.batteriesInformation)
  return _internal_mutable_batteriesinformation();
}

// map<int32, .DJIFRProto.Standard.ComponentInformation> camerasInformation = 4;
inline int SummaryInformation::_internal_camerasinformation_size() const {
  return _impl_.camerasinformation_.size();
}
inline int SummaryInformation::camerasinformation_size() const {
  return _internal_camerasinformation_size();
}
inline void SummaryInformation::clear_camerasinformation() {
  _impl_.camerasinformation_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::ComponentInformation >&
SummaryInformation::_internal_camerasinformation() const {
  return _impl_.camerasinformation_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::ComponentInformation >&
SummaryInformation::camerasinformation() const {
  // @@protoc_insertion_point(field_map:DJIFRProto.Standard.SummaryInformation.camerasInformation)
  return _internal_camerasinformation();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::ComponentInformation >*
SummaryInformation::_internal_mutable_camerasinformation() {
  return _impl_.camerasinformation_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::ComponentInformation >*
SummaryInformation::mutable_camerasinformation() {
  // @@protoc_insertion_point(field_mutable_map:DJIFRProto.Standard.SummaryInformation.camerasInformation)
  return _internal_mutable_camerasinformation();
}

// map<int32, .DJIFRProto.Standard.ComponentInformation> gimbalsInformation = 5;
inline int SummaryInformation::_internal_gimbalsinformation_size() const {
  return _impl_.gimbalsinformation_.size();
}
inline int SummaryInformation::gimbalsinformation_size() const {
  return _internal_gimbalsinformation_size();
}
inline void SummaryInformation::clear_gimbalsinformation() {
  _impl_.gimbalsinformation_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::ComponentInformation >&
SummaryInformation::_internal_gimbalsinformation() const {
  return _impl_.gimbalsinformation_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::ComponentInformation >&
SummaryInformation::gimbalsinformation() const {
  // @@protoc_insertion_point(field_map:DJIFRProto.Standard.SummaryInformation.gimbalsInformation)
  return _internal_gimbalsinformation();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::ComponentInformation >*
SummaryInformation::_internal_mutable_gimbalsinformation() {
  return _impl_.gimbalsinformation_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::ComponentInformation >*
SummaryInformation::mutable_gimbalsinformation() {
  // @@protoc_insertion_point(field_mutable_map:DJIFRProto.Standard.SummaryInformation.gimbalsInformation)
  return _internal_mutable_gimbalsinformation();
}

// .DJIFRProto.Standard.ComponentInformation remoteControllerInformation = 6;
inline bool SummaryInformation::_internal_has_remotecontrollerinformation() const {
  return this != internal_default_instance() && _impl_.remotecontrollerinformation_ != nullptr;
}
inline bool SummaryInformation::has_remotecontrollerinformation() const {
  return _internal_has_remotecontrollerinformation();
}
inline void SummaryInformation::clear_remotecontrollerinformation() {
  if (GetArenaForAllocation() == nullptr && _impl_.remotecontrollerinformation_ != nullptr) {
    delete _impl_.remotecontrollerinformation_;
  }
  _impl_.remotecontrollerinformation_ = nullptr;
}
inline const ::DJIFRProto::Standard::ComponentInformation& SummaryInformation::_internal_remotecontrollerinformation() const {
  const ::DJIFRProto::Standard::ComponentInformation* p = _impl_.remotecontrollerinformation_;
  return p != nullptr ? *p : reinterpret_cast<const ::DJIFRProto::Standard::ComponentInformation&>(
      ::DJIFRProto::Standard::_ComponentInformation_default_instance_);
}
inline const ::DJIFRProto::Standard::ComponentInformation& SummaryInformation::remotecontrollerinformation() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.SummaryInformation.remoteControllerInformation)
  return _internal_remotecontrollerinformation();
}
inline void SummaryInformation::unsafe_arena_set_allocated_remotecontrollerinformation(
    ::DJIFRProto::Standard::ComponentInformation* remotecontrollerinformation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.remotecontrollerinformation_);
  }
  _impl_.remotecontrollerinformation_ = remotecontrollerinformation;
  if (remotecontrollerinformation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DJIFRProto.Standard.SummaryInformation.remoteControllerInformation)
}
inline ::DJIFRProto::Standard::ComponentInformation* SummaryInformation::release_remotecontrollerinformation() {
  
  ::DJIFRProto::Standard::ComponentInformation* temp = _impl_.remotecontrollerinformation_;
  _impl_.remotecontrollerinformation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DJIFRProto::Standard::ComponentInformation* SummaryInformation::unsafe_arena_release_remotecontrollerinformation() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.SummaryInformation.remoteControllerInformation)
  
  ::DJIFRProto::Standard::ComponentInformation* temp = _impl_.remotecontrollerinformation_;
  _impl_.remotecontrollerinformation_ = nullptr;
  return temp;
}
inline ::DJIFRProto::Standard::ComponentInformation* SummaryInformation::_internal_mutable_remotecontrollerinformation() {
  
  if (_impl_.remotecontrollerinformation_ == nullptr) {
    auto* p = CreateMaybeMessage<::DJIFRProto::Standard::ComponentInformation>(GetArenaForAllocation());
    _impl_.remotecontrollerinformation_ = p;
  }
  return _impl_.remotecontrollerinformation_;
}
inline ::DJIFRProto::Standard::ComponentInformation* SummaryInformation::mutable_remotecontrollerinformation() {
  ::DJIFRProto::Standard::ComponentInformation* _msg = _internal_mutable_remotecontrollerinformation();
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.SummaryInformation.remoteControllerInformation)
  return _msg;
}
inline void SummaryInformation::set_allocated_remotecontrollerinformation(::DJIFRProto::Standard::ComponentInformation* remotecontrollerinformation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.remotecontrollerinformation_;
  }
  if (remotecontrollerinformation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(remotecontrollerinformation);
    if (message_arena != submessage_arena) {
      remotecontrollerinformation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remotecontrollerinformation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.remotecontrollerinformation_ = remotecontrollerinformation;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.SummaryInformation.remoteControllerInformation)
}

// .DJIFRProto.Standard.ComponentInformation flightControllerInformation = 7;
inline bool SummaryInformation::_internal_has_flightcontrollerinformation() const {
  return this != internal_default_instance() && _impl_.flightcontrollerinformation_ != nullptr;
}
inline bool SummaryInformation::has_flightcontrollerinformation() const {
  return _internal_has_flightcontrollerinformation();
}
inline void SummaryInformation::clear_flightcontrollerinformation() {
  if (GetArenaForAllocation() == nullptr && _impl_.flightcontrollerinformation_ != nullptr) {
    delete _impl_.flightcontrollerinformation_;
  }
  _impl_.flightcontrollerinformation_ = nullptr;
}
inline const ::DJIFRProto::Standard::ComponentInformation& SummaryInformation::_internal_flightcontrollerinformation() const {
  const ::DJIFRProto::Standard::ComponentInformation* p = _impl_.flightcontrollerinformation_;
  return p != nullptr ? *p : reinterpret_cast<const ::DJIFRProto::Standard::ComponentInformation&>(
      ::DJIFRProto::Standard::_ComponentInformation_default_instance_);
}
inline const ::DJIFRProto::Standard::ComponentInformation& SummaryInformation::flightcontrollerinformation() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.SummaryInformation.flightControllerInformation)
  return _internal_flightcontrollerinformation();
}
inline void SummaryInformation::unsafe_arena_set_allocated_flightcontrollerinformation(
    ::DJIFRProto::Standard::ComponentInformation* flightcontrollerinformation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.flightcontrollerinformation_);
  }
  _impl_.flightcontrollerinformation_ = flightcontrollerinformation;
  if (flightcontrollerinformation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DJIFRProto.Standard.SummaryInformation.flightControllerInformation)
}
inline ::DJIFRProto::Standard::ComponentInformation* SummaryInformation::release_flightcontrollerinformation() {
  
  ::DJIFRProto::Standard::ComponentInformation* temp = _impl_.flightcontrollerinformation_;
  _impl_.flightcontrollerinformation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DJIFRProto::Standard::ComponentInformation* SummaryInformation::unsafe_arena_release_flightcontrollerinformation() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.SummaryInformation.flightControllerInformation)
  
  ::DJIFRProto::Standard::ComponentInformation* temp = _impl_.flightcontrollerinformation_;
  _impl_.flightcontrollerinformation_ = nullptr;
  return temp;
}
inline ::DJIFRProto::Standard::ComponentInformation* SummaryInformation::_internal_mutable_flightcontrollerinformation() {
  
  if (_impl_.flightcontrollerinformation_ == nullptr) {
    auto* p = CreateMaybeMessage<::DJIFRProto::Standard::ComponentInformation>(GetArenaForAllocation());
    _impl_.flightcontrollerinformation_ = p;
  }
  return _impl_.flightcontrollerinformation_;
}
inline ::DJIFRProto::Standard::ComponentInformation* SummaryInformation::mutable_flightcontrollerinformation() {
  ::DJIFRProto::Standard::ComponentInformation* _msg = _internal_mutable_flightcontrollerinformation();
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.SummaryInformation.flightControllerInformation)
  return _msg;
}
inline void SummaryInformation::set_allocated_flightcontrollerinformation(::DJIFRProto::Standard::ComponentInformation* flightcontrollerinformation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.flightcontrollerinformation_;
  }
  if (flightcontrollerinformation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(flightcontrollerinformation);
    if (message_arena != submessage_arena) {
      flightcontrollerinformation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flightcontrollerinformation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.flightcontrollerinformation_ = flightcontrollerinformation;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.SummaryInformation.flightControllerInformation)
}

// string aircraftName = 8;
inline void SummaryInformation::clear_aircraftname() {
  _impl_.aircraftname_.ClearToEmpty();
}
inline const std::string& SummaryInformation::aircraftname() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.SummaryInformation.aircraftName)
  return _internal_aircraftname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SummaryInformation::set_aircraftname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.aircraftname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.SummaryInformation.aircraftName)
}
inline std::string* SummaryInformation::mutable_aircraftname() {
  std::string* _s = _internal_mutable_aircraftname();
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.SummaryInformation.aircraftName)
  return _s;
}
inline const std::string& SummaryInformation::_internal_aircraftname() const {
  return _impl_.aircraftname_.Get();
}
inline void SummaryInformation::_internal_set_aircraftname(const std::string& value) {
  
  _impl_.aircraftname_.Set(value, GetArenaForAllocation());
}
inline std::string* SummaryInformation::_internal_mutable_aircraftname() {
  
  return _impl_.aircraftname_.Mutable(GetArenaForAllocation());
}
inline std::string* SummaryInformation::release_aircraftname() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.SummaryInformation.aircraftName)
  return _impl_.aircraftname_.Release();
}
inline void SummaryInformation::set_allocated_aircraftname(std::string* aircraftname) {
  if (aircraftname != nullptr) {
    
  } else {
    
  }
  _impl_.aircraftname_.SetAllocated(aircraftname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.aircraftname_.IsDefault()) {
    _impl_.aircraftname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.SummaryInformation.aircraftName)
}

// double startTime = 10;
inline void SummaryInformation::clear_starttime() {
  _impl_.starttime_ = 0;
}
inline double SummaryInformation::_internal_starttime() const {
  return _impl_.starttime_;
}
inline double SummaryInformation::starttime() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.SummaryInformation.startTime)
  return _internal_starttime();
}
inline void SummaryInformation::_internal_set_starttime(double value) {
  
  _impl_.starttime_ = value;
}
inline void SummaryInformation::set_starttime(double value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.SummaryInformation.startTime)
}

// .DJIFRProto.Standard.LocationCoordinate2D startCoordinate = 11;
inline bool SummaryInformation::_internal_has_startcoordinate() const {
  return this != internal_default_instance() && _impl_.startcoordinate_ != nullptr;
}
inline bool SummaryInformation::has_startcoordinate() const {
  return _internal_has_startcoordinate();
}
inline const ::DJIFRProto::Standard::LocationCoordinate2D& SummaryInformation::_internal_startcoordinate() const {
  const ::DJIFRProto::Standard::LocationCoordinate2D* p = _impl_.startcoordinate_;
  return p != nullptr ? *p : reinterpret_cast<const ::DJIFRProto::Standard::LocationCoordinate2D&>(
      ::DJIFRProto::Standard::_LocationCoordinate2D_default_instance_);
}
inline const ::DJIFRProto::Standard::LocationCoordinate2D& SummaryInformation::startcoordinate() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.SummaryInformation.startCoordinate)
  return _internal_startcoordinate();
}
inline void SummaryInformation::unsafe_arena_set_allocated_startcoordinate(
    ::DJIFRProto::Standard::LocationCoordinate2D* startcoordinate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.startcoordinate_);
  }
  _impl_.startcoordinate_ = startcoordinate;
  if (startcoordinate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DJIFRProto.Standard.SummaryInformation.startCoordinate)
}
inline ::DJIFRProto::Standard::LocationCoordinate2D* SummaryInformation::release_startcoordinate() {
  
  ::DJIFRProto::Standard::LocationCoordinate2D* temp = _impl_.startcoordinate_;
  _impl_.startcoordinate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DJIFRProto::Standard::LocationCoordinate2D* SummaryInformation::unsafe_arena_release_startcoordinate() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.SummaryInformation.startCoordinate)
  
  ::DJIFRProto::Standard::LocationCoordinate2D* temp = _impl_.startcoordinate_;
  _impl_.startcoordinate_ = nullptr;
  return temp;
}
inline ::DJIFRProto::Standard::LocationCoordinate2D* SummaryInformation::_internal_mutable_startcoordinate() {
  
  if (_impl_.startcoordinate_ == nullptr) {
    auto* p = CreateMaybeMessage<::DJIFRProto::Standard::LocationCoordinate2D>(GetArenaForAllocation());
    _impl_.startcoordinate_ = p;
  }
  return _impl_.startcoordinate_;
}
inline ::DJIFRProto::Standard::LocationCoordinate2D* SummaryInformation::mutable_startcoordinate() {
  ::DJIFRProto::Standard::LocationCoordinate2D* _msg = _internal_mutable_startcoordinate();
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.SummaryInformation.startCoordinate)
  return _msg;
}
inline void SummaryInformation::set_allocated_startcoordinate(::DJIFRProto::Standard::LocationCoordinate2D* startcoordinate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.startcoordinate_);
  }
  if (startcoordinate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(startcoordinate));
    if (message_arena != submessage_arena) {
      startcoordinate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, startcoordinate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.startcoordinate_ = startcoordinate;
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.SummaryInformation.startCoordinate)
}

// float totalDistance = 12;
inline void SummaryInformation::clear_totaldistance() {
  _impl_.totaldistance_ = 0;
}
inline float SummaryInformation::_internal_totaldistance() const {
  return _impl_.totaldistance_;
}
inline float SummaryInformation::totaldistance() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.SummaryInformation.totalDistance)
  return _internal_totaldistance();
}
inline void SummaryInformation::_internal_set_totaldistance(float value) {
  
  _impl_.totaldistance_ = value;
}
inline void SummaryInformation::set_totaldistance(float value) {
  _internal_set_totaldistance(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.SummaryInformation.totalDistance)
}

// double totalTime = 13;
inline void SummaryInformation::clear_totaltime() {
  _impl_.totaltime_ = 0;
}
inline double SummaryInformation::_internal_totaltime() const {
  return _impl_.totaltime_;
}
inline double SummaryInformation::totaltime() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.SummaryInformation.totalTime)
  return _internal_totaltime();
}
inline void SummaryInformation::_internal_set_totaltime(double value) {
  
  _impl_.totaltime_ = value;
}
inline void SummaryInformation::set_totaltime(double value) {
  _internal_set_totaltime(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.SummaryInformation.totalTime)
}

// int32 samplingRate = 14;
inline void SummaryInformation::clear_samplingrate() {
  _impl_.samplingrate_ = 0;
}
inline int32_t SummaryInformation::_internal_samplingrate() const {
  return _impl_.samplingrate_;
}
inline int32_t SummaryInformation::samplingrate() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.SummaryInformation.samplingRate)
  return _internal_samplingrate();
}
inline void SummaryInformation::_internal_set_samplingrate(int32_t value) {
  
  _impl_.samplingrate_ = value;
}
inline void SummaryInformation::set_samplingrate(int32_t value) {
  _internal_set_samplingrate(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.SummaryInformation.samplingRate)
}

// float maxHeight = 15;
inline void SummaryInformation::clear_maxheight() {
  _impl_.maxheight_ = 0;
}
inline float SummaryInformation::_internal_maxheight() const {
  return _impl_.maxheight_;
}
inline float SummaryInformation::maxheight() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.SummaryInformation.maxHeight)
  return _internal_maxheight();
}
inline void SummaryInformation::_internal_set_maxheight(float value) {
  
  _impl_.maxheight_ = value;
}
inline void SummaryInformation::set_maxheight(float value) {
  _internal_set_maxheight(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.SummaryInformation.maxHeight)
}

// float maxHorizontalSpeed = 16;
inline void SummaryInformation::clear_maxhorizontalspeed() {
  _impl_.maxhorizontalspeed_ = 0;
}
inline float SummaryInformation::_internal_maxhorizontalspeed() const {
  return _impl_.maxhorizontalspeed_;
}
inline float SummaryInformation::maxhorizontalspeed() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.SummaryInformation.maxHorizontalSpeed)
  return _internal_maxhorizontalspeed();
}
inline void SummaryInformation::_internal_set_maxhorizontalspeed(float value) {
  
  _impl_.maxhorizontalspeed_ = value;
}
inline void SummaryInformation::set_maxhorizontalspeed(float value) {
  _internal_set_maxhorizontalspeed(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.SummaryInformation.maxHorizontalSpeed)
}

// float maxVirticalSpeed = 17;
inline void SummaryInformation::clear_maxvirticalspeed() {
  _impl_.maxvirticalspeed_ = 0;
}
inline float SummaryInformation::_internal_maxvirticalspeed() const {
  return _impl_.maxvirticalspeed_;
}
inline float SummaryInformation::maxvirticalspeed() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.SummaryInformation.maxVirticalSpeed)
  return _internal_maxvirticalspeed();
}
inline void SummaryInformation::_internal_set_maxvirticalspeed(float value) {
  
  _impl_.maxvirticalspeed_ = value;
}
inline void SummaryInformation::set_maxvirticalspeed(float value) {
  _internal_set_maxvirticalspeed(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.SummaryInformation.maxVirticalSpeed)
}

// string uuid = 18;
inline void SummaryInformation::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& SummaryInformation::uuid() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.SummaryInformation.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SummaryInformation::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.SummaryInformation.uuid)
}
inline std::string* SummaryInformation::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:DJIFRProto.Standard.SummaryInformation.uuid)
  return _s;
}
inline const std::string& SummaryInformation::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void SummaryInformation::_internal_set_uuid(const std::string& value) {
  
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* SummaryInformation::_internal_mutable_uuid() {
  
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* SummaryInformation::release_uuid() {
  // @@protoc_insertion_point(field_release:DJIFRProto.Standard.SummaryInformation.uuid)
  return _impl_.uuid_.Release();
}
inline void SummaryInformation::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DJIFRProto.Standard.SummaryInformation.uuid)
}

// .DJIFRProto.Standard.SDK.ProductType productType = 19;
inline void SummaryInformation::clear_producttype() {
  _impl_.producttype_ = 0;
}
inline ::DJIFRProto::Standard::SDK_ProductType SummaryInformation::_internal_producttype() const {
  return static_cast< ::DJIFRProto::Standard::SDK_ProductType >(_impl_.producttype_);
}
inline ::DJIFRProto::Standard::SDK_ProductType SummaryInformation::producttype() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.SummaryInformation.productType)
  return _internal_producttype();
}
inline void SummaryInformation::_internal_set_producttype(::DJIFRProto::Standard::SDK_ProductType value) {
  
  _impl_.producttype_ = value;
}
inline void SummaryInformation::set_producttype(::DJIFRProto::Standard::SDK_ProductType value) {
  _internal_set_producttype(value);
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.SummaryInformation.productType)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Standard
}  // namespace DJIFRProto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::DJIFRProto::Standard::SummaryInformation_Platform> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DJIFRProto::Standard::SummaryInformation_Platform>() {
  return ::DJIFRProto::Standard::SummaryInformation_Platform_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_FRSummaryModelProto_2eproto
