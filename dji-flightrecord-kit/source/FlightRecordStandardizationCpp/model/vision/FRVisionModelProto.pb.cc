// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FRVisionModelProto.proto

#include "FRVisionModelProto.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace DJIFRProto {
namespace Standard {
PROTOBUF_CONSTEXPR Vision::Vision(
    ::_pbi::ConstantInitialized) {}
struct VisionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VisionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VisionDefaultTypeInternal() {}
  union {
    Vision _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VisionDefaultTypeInternal _Vision_default_instance_;
PROTOBUF_CONSTEXPR VisionControlState::VisionControlState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.isascentlimitedbyobstacle_)*/false
  , /*decltype(_impl_.isavoidingactiveobstaclecollision_)*/false
  , /*decltype(_impl_.isbraking_)*/false
  , /*decltype(_impl_.isperformingprecisionlanding_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VisionControlStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VisionControlStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VisionControlStateDefaultTypeInternal() {}
  union {
    VisionControlState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VisionControlStateDefaultTypeInternal _VisionControlState_default_instance_;
PROTOBUF_CONSTEXPR ObstacleDetectionSector::ObstacleDetectionSector(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.obstacledistanceinmeters_)*/0
  , /*decltype(_impl_.warninglevel_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ObstacleDetectionSectorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObstacleDetectionSectorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObstacleDetectionSectorDefaultTypeInternal() {}
  union {
    ObstacleDetectionSector _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObstacleDetectionSectorDefaultTypeInternal _ObstacleDetectionSector_default_instance_;
PROTOBUF_CONSTEXPR VisionDetectionState::VisionDetectionState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.detectionsectors_)*/{}
  , /*decltype(_impl_.position_)*/0
  , /*decltype(_impl_.issensorbeingused_)*/false
  , /*decltype(_impl_.obstacledistanceinmeters_)*/0
  , /*decltype(_impl_.systemwarning_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VisionDetectionStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VisionDetectionStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VisionDetectionStateDefaultTypeInternal() {}
  union {
    VisionDetectionState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VisionDetectionStateDefaultTypeInternal _VisionDetectionState_default_instance_;
PROTOBUF_CONSTEXPR VisionState_DetectionStateMapEntry_DoNotUse::VisionState_DetectionStateMapEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct VisionState_DetectionStateMapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VisionState_DetectionStateMapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VisionState_DetectionStateMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    VisionState_DetectionStateMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VisionState_DetectionStateMapEntry_DoNotUseDefaultTypeInternal _VisionState_DetectionStateMapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR VisionState::VisionState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.detectionstatemap_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.controlstate_)*/nullptr
  , /*decltype(_impl_.collisionavoidanceenabled_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VisionStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VisionStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VisionStateDefaultTypeInternal() {}
  union {
    VisionState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VisionStateDefaultTypeInternal _VisionState_default_instance_;
}  // namespace Standard
}  // namespace DJIFRProto
static ::_pb::Metadata file_level_metadata_FRVisionModelProto_2eproto[6];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_FRVisionModelProto_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_FRVisionModelProto_2eproto = nullptr;

const uint32_t TableStruct_FRVisionModelProto_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::Vision, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::VisionControlState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::VisionControlState, _impl_.isascentlimitedbyobstacle_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::VisionControlState, _impl_.isavoidingactiveobstaclecollision_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::VisionControlState, _impl_.isbraking_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::VisionControlState, _impl_.isperformingprecisionlanding_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::ObstacleDetectionSector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::ObstacleDetectionSector, _impl_.obstacledistanceinmeters_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::ObstacleDetectionSector, _impl_.warninglevel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::VisionDetectionState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::VisionDetectionState, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::VisionDetectionState, _impl_.issensorbeingused_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::VisionDetectionState, _impl_.systemwarning_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::VisionDetectionState, _impl_.obstacledistanceinmeters_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::VisionDetectionState, _impl_.detectionsectors_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::VisionState_DetectionStateMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::VisionState_DetectionStateMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::VisionState_DetectionStateMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::VisionState_DetectionStateMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::VisionState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::VisionState, _impl_.collisionavoidanceenabled_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::VisionState, _impl_.controlstate_),
  PROTOBUF_FIELD_OFFSET(::DJIFRProto::Standard::VisionState, _impl_.detectionstatemap_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::DJIFRProto::Standard::Vision)},
  { 6, -1, -1, sizeof(::DJIFRProto::Standard::VisionControlState)},
  { 16, -1, -1, sizeof(::DJIFRProto::Standard::ObstacleDetectionSector)},
  { 24, -1, -1, sizeof(::DJIFRProto::Standard::VisionDetectionState)},
  { 35, 43, -1, sizeof(::DJIFRProto::Standard::VisionState_DetectionStateMapEntry_DoNotUse)},
  { 45, -1, -1, sizeof(::DJIFRProto::Standard::VisionState)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::DJIFRProto::Standard::_Vision_default_instance_._instance,
  &::DJIFRProto::Standard::_VisionControlState_default_instance_._instance,
  &::DJIFRProto::Standard::_ObstacleDetectionSector_default_instance_._instance,
  &::DJIFRProto::Standard::_VisionDetectionState_default_instance_._instance,
  &::DJIFRProto::Standard::_VisionState_DetectionStateMapEntry_DoNotUse_default_instance_._instance,
  &::DJIFRProto::Standard::_VisionState_default_instance_._instance,
};

const char descriptor_table_protodef_FRVisionModelProto_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030FRVisionModelProto.proto\022\023DJIFRProto.S"
  "tandard\"\260\002\n\006Vision\"b\n\036ObstacleDetectionS"
  "ectorWarning\022\024\n\020DetectionInvalid\020\000\022\021\n\rDe"
  "tectionSafe\020\001\022\013\n\007Warning\020\002\022\n\n\006Danger\020\003\"T"
  "\n\024VisionSensorPosition\022\010\n\004Nose\020\000\022\010\n\004Tail"
  "\020\001\022\t\n\005Right\020\002\022\010\n\004Left\020\003\022\023\n\017PositionUnkno"
  "wn\020\004\"l\n\023VisionSystemWarning\022\027\n\023VisionSys"
  "temInvalid\020\000\022\024\n\020VisionSystemSafe\020\001\022\r\n\tDa"
  "ngerous\020\002\022\027\n\023VisionSystemUnknown\020\003\"\233\001\n\022V"
  "isionControlState\022!\n\031isAscentLimitedByOb"
  "stacle\030\001 \001(\010\022)\n!isAvoidingActiveObstacle"
  "Collision\030\002 \001(\010\022\021\n\tisBraking\030\003 \001(\010\022$\n\034is"
  "PerformingPrecisionLanding\030\004 \001(\010\"\215\001\n\027Obs"
  "tacleDetectionSector\022 \n\030obstacleDistance"
  "InMeters\030\001 \001(\001\022P\n\014warningLevel\030\002 \001(\0162:.D"
  "JIFRProto.Standard.Vision.ObstacleDetect"
  "ionSectorWarning\"\247\002\n\024VisionDetectionStat"
  "e\022B\n\010position\030\001 \001(\01620.DJIFRProto.Standar"
  "d.Vision.VisionSensorPosition\022\031\n\021isSenso"
  "rBeingUsed\030\002 \001(\010\022F\n\rsystemWarning\030\003 \001(\0162"
  "/.DJIFRProto.Standard.Vision.VisionSyste"
  "mWarning\022 \n\030obstacleDistanceInMeters\030\004 \001"
  "(\001\022F\n\020detectionSectors\030\005 \003(\0132,.DJIFRProt"
  "o.Standard.ObstacleDetectionSector\"\250\002\n\013V"
  "isionState\022!\n\031collisionAvoidanceEnabled\030"
  "\001 \001(\010\022=\n\014controlState\030\002 \001(\0132\'.DJIFRProto"
  ".Standard.VisionControlState\022R\n\021detectio"
  "nStateMap\030\003 \003(\01327.DJIFRProto.Standard.Vi"
  "sionState.DetectionStateMapEntry\032c\n\026Dete"
  "ctionStateMapEntry\022\013\n\003key\030\001 \001(\005\0228\n\005value"
  "\030\002 \001(\0132).DJIFRProto.Standard.VisionDetec"
  "tionState:\0028\001B\r\242\002\nDJIFRProtob\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_FRVisionModelProto_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_FRVisionModelProto_2eproto = {
    false, false, 1276, descriptor_table_protodef_FRVisionModelProto_2eproto,
    "FRVisionModelProto.proto",
    &descriptor_table_FRVisionModelProto_2eproto_once, nullptr, 0, 6,
    schemas, file_default_instances, TableStruct_FRVisionModelProto_2eproto::offsets,
    file_level_metadata_FRVisionModelProto_2eproto, file_level_enum_descriptors_FRVisionModelProto_2eproto,
    file_level_service_descriptors_FRVisionModelProto_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_FRVisionModelProto_2eproto_getter() {
  return &descriptor_table_FRVisionModelProto_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_FRVisionModelProto_2eproto(&descriptor_table_FRVisionModelProto_2eproto);
namespace DJIFRProto {
namespace Standard {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vision_ObstacleDetectionSectorWarning_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_FRVisionModelProto_2eproto);
  return file_level_enum_descriptors_FRVisionModelProto_2eproto[0];
}
bool Vision_ObstacleDetectionSectorWarning_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Vision_ObstacleDetectionSectorWarning Vision::DetectionInvalid;
constexpr Vision_ObstacleDetectionSectorWarning Vision::DetectionSafe;
constexpr Vision_ObstacleDetectionSectorWarning Vision::Warning;
constexpr Vision_ObstacleDetectionSectorWarning Vision::Danger;
constexpr Vision_ObstacleDetectionSectorWarning Vision::ObstacleDetectionSectorWarning_MIN;
constexpr Vision_ObstacleDetectionSectorWarning Vision::ObstacleDetectionSectorWarning_MAX;
constexpr int Vision::ObstacleDetectionSectorWarning_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vision_VisionSensorPosition_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_FRVisionModelProto_2eproto);
  return file_level_enum_descriptors_FRVisionModelProto_2eproto[1];
}
bool Vision_VisionSensorPosition_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Vision_VisionSensorPosition Vision::Nose;
constexpr Vision_VisionSensorPosition Vision::Tail;
constexpr Vision_VisionSensorPosition Vision::Right;
constexpr Vision_VisionSensorPosition Vision::Left;
constexpr Vision_VisionSensorPosition Vision::PositionUnknown;
constexpr Vision_VisionSensorPosition Vision::VisionSensorPosition_MIN;
constexpr Vision_VisionSensorPosition Vision::VisionSensorPosition_MAX;
constexpr int Vision::VisionSensorPosition_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vision_VisionSystemWarning_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_FRVisionModelProto_2eproto);
  return file_level_enum_descriptors_FRVisionModelProto_2eproto[2];
}
bool Vision_VisionSystemWarning_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Vision_VisionSystemWarning Vision::VisionSystemInvalid;
constexpr Vision_VisionSystemWarning Vision::VisionSystemSafe;
constexpr Vision_VisionSystemWarning Vision::Dangerous;
constexpr Vision_VisionSystemWarning Vision::VisionSystemUnknown;
constexpr Vision_VisionSystemWarning Vision::VisionSystemWarning_MIN;
constexpr Vision_VisionSystemWarning Vision::VisionSystemWarning_MAX;
constexpr int Vision::VisionSystemWarning_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Vision::_Internal {
 public:
};

Vision::Vision(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:DJIFRProto.Standard.Vision)
}
Vision::Vision(const Vision& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Vision* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.Vision)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vision::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vision::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Vision::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FRVisionModelProto_2eproto_getter, &descriptor_table_FRVisionModelProto_2eproto_once,
      file_level_metadata_FRVisionModelProto_2eproto[0]);
}

// ===================================================================

class VisionControlState::_Internal {
 public:
};

VisionControlState::VisionControlState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DJIFRProto.Standard.VisionControlState)
}
VisionControlState::VisionControlState(const VisionControlState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VisionControlState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.isascentlimitedbyobstacle_){}
    , decltype(_impl_.isavoidingactiveobstaclecollision_){}
    , decltype(_impl_.isbraking_){}
    , decltype(_impl_.isperformingprecisionlanding_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.isascentlimitedbyobstacle_, &from._impl_.isascentlimitedbyobstacle_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.isperformingprecisionlanding_) -
    reinterpret_cast<char*>(&_impl_.isascentlimitedbyobstacle_)) + sizeof(_impl_.isperformingprecisionlanding_));
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.VisionControlState)
}

inline void VisionControlState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.isascentlimitedbyobstacle_){false}
    , decltype(_impl_.isavoidingactiveobstaclecollision_){false}
    , decltype(_impl_.isbraking_){false}
    , decltype(_impl_.isperformingprecisionlanding_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VisionControlState::~VisionControlState() {
  // @@protoc_insertion_point(destructor:DJIFRProto.Standard.VisionControlState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VisionControlState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VisionControlState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VisionControlState::Clear() {
// @@protoc_insertion_point(message_clear_start:DJIFRProto.Standard.VisionControlState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.isascentlimitedbyobstacle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.isperformingprecisionlanding_) -
      reinterpret_cast<char*>(&_impl_.isascentlimitedbyobstacle_)) + sizeof(_impl_.isperformingprecisionlanding_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VisionControlState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool isAscentLimitedByObstacle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.isascentlimitedbyobstacle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isAvoidingActiveObstacleCollision = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.isavoidingactiveobstaclecollision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isBraking = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.isbraking_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isPerformingPrecisionLanding = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.isperformingprecisionlanding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VisionControlState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DJIFRProto.Standard.VisionControlState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isAscentLimitedByObstacle = 1;
  if (this->_internal_isascentlimitedbyobstacle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_isascentlimitedbyobstacle(), target);
  }

  // bool isAvoidingActiveObstacleCollision = 2;
  if (this->_internal_isavoidingactiveobstaclecollision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_isavoidingactiveobstaclecollision(), target);
  }

  // bool isBraking = 3;
  if (this->_internal_isbraking() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_isbraking(), target);
  }

  // bool isPerformingPrecisionLanding = 4;
  if (this->_internal_isperformingprecisionlanding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_isperformingprecisionlanding(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DJIFRProto.Standard.VisionControlState)
  return target;
}

size_t VisionControlState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DJIFRProto.Standard.VisionControlState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool isAscentLimitedByObstacle = 1;
  if (this->_internal_isascentlimitedbyobstacle() != 0) {
    total_size += 1 + 1;
  }

  // bool isAvoidingActiveObstacleCollision = 2;
  if (this->_internal_isavoidingactiveobstaclecollision() != 0) {
    total_size += 1 + 1;
  }

  // bool isBraking = 3;
  if (this->_internal_isbraking() != 0) {
    total_size += 1 + 1;
  }

  // bool isPerformingPrecisionLanding = 4;
  if (this->_internal_isperformingprecisionlanding() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VisionControlState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VisionControlState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VisionControlState::GetClassData() const { return &_class_data_; }


void VisionControlState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VisionControlState*>(&to_msg);
  auto& from = static_cast<const VisionControlState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DJIFRProto.Standard.VisionControlState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_isascentlimitedbyobstacle() != 0) {
    _this->_internal_set_isascentlimitedbyobstacle(from._internal_isascentlimitedbyobstacle());
  }
  if (from._internal_isavoidingactiveobstaclecollision() != 0) {
    _this->_internal_set_isavoidingactiveobstaclecollision(from._internal_isavoidingactiveobstaclecollision());
  }
  if (from._internal_isbraking() != 0) {
    _this->_internal_set_isbraking(from._internal_isbraking());
  }
  if (from._internal_isperformingprecisionlanding() != 0) {
    _this->_internal_set_isperformingprecisionlanding(from._internal_isperformingprecisionlanding());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VisionControlState::CopyFrom(const VisionControlState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DJIFRProto.Standard.VisionControlState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisionControlState::IsInitialized() const {
  return true;
}

void VisionControlState::InternalSwap(VisionControlState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VisionControlState, _impl_.isperformingprecisionlanding_)
      + sizeof(VisionControlState::_impl_.isperformingprecisionlanding_)
      - PROTOBUF_FIELD_OFFSET(VisionControlState, _impl_.isascentlimitedbyobstacle_)>(
          reinterpret_cast<char*>(&_impl_.isascentlimitedbyobstacle_),
          reinterpret_cast<char*>(&other->_impl_.isascentlimitedbyobstacle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VisionControlState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FRVisionModelProto_2eproto_getter, &descriptor_table_FRVisionModelProto_2eproto_once,
      file_level_metadata_FRVisionModelProto_2eproto[1]);
}

// ===================================================================

class ObstacleDetectionSector::_Internal {
 public:
};

ObstacleDetectionSector::ObstacleDetectionSector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DJIFRProto.Standard.ObstacleDetectionSector)
}
ObstacleDetectionSector::ObstacleDetectionSector(const ObstacleDetectionSector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObstacleDetectionSector* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.obstacledistanceinmeters_){}
    , decltype(_impl_.warninglevel_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.obstacledistanceinmeters_, &from._impl_.obstacledistanceinmeters_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.warninglevel_) -
    reinterpret_cast<char*>(&_impl_.obstacledistanceinmeters_)) + sizeof(_impl_.warninglevel_));
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.ObstacleDetectionSector)
}

inline void ObstacleDetectionSector::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.obstacledistanceinmeters_){0}
    , decltype(_impl_.warninglevel_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ObstacleDetectionSector::~ObstacleDetectionSector() {
  // @@protoc_insertion_point(destructor:DJIFRProto.Standard.ObstacleDetectionSector)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObstacleDetectionSector::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ObstacleDetectionSector::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObstacleDetectionSector::Clear() {
// @@protoc_insertion_point(message_clear_start:DJIFRProto.Standard.ObstacleDetectionSector)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.obstacledistanceinmeters_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.warninglevel_) -
      reinterpret_cast<char*>(&_impl_.obstacledistanceinmeters_)) + sizeof(_impl_.warninglevel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObstacleDetectionSector::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double obstacleDistanceInMeters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.obstacledistanceinmeters_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .DJIFRProto.Standard.Vision.ObstacleDetectionSectorWarning warningLevel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_warninglevel(static_cast<::DJIFRProto::Standard::Vision_ObstacleDetectionSectorWarning>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObstacleDetectionSector::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DJIFRProto.Standard.ObstacleDetectionSector)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double obstacleDistanceInMeters = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_obstacledistanceinmeters = this->_internal_obstacledistanceinmeters();
  uint64_t raw_obstacledistanceinmeters;
  memcpy(&raw_obstacledistanceinmeters, &tmp_obstacledistanceinmeters, sizeof(tmp_obstacledistanceinmeters));
  if (raw_obstacledistanceinmeters != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_obstacledistanceinmeters(), target);
  }

  // .DJIFRProto.Standard.Vision.ObstacleDetectionSectorWarning warningLevel = 2;
  if (this->_internal_warninglevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_warninglevel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DJIFRProto.Standard.ObstacleDetectionSector)
  return target;
}

size_t ObstacleDetectionSector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DJIFRProto.Standard.ObstacleDetectionSector)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double obstacleDistanceInMeters = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_obstacledistanceinmeters = this->_internal_obstacledistanceinmeters();
  uint64_t raw_obstacledistanceinmeters;
  memcpy(&raw_obstacledistanceinmeters, &tmp_obstacledistanceinmeters, sizeof(tmp_obstacledistanceinmeters));
  if (raw_obstacledistanceinmeters != 0) {
    total_size += 1 + 8;
  }

  // .DJIFRProto.Standard.Vision.ObstacleDetectionSectorWarning warningLevel = 2;
  if (this->_internal_warninglevel() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_warninglevel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObstacleDetectionSector::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObstacleDetectionSector::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObstacleDetectionSector::GetClassData() const { return &_class_data_; }


void ObstacleDetectionSector::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObstacleDetectionSector*>(&to_msg);
  auto& from = static_cast<const ObstacleDetectionSector&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DJIFRProto.Standard.ObstacleDetectionSector)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_obstacledistanceinmeters = from._internal_obstacledistanceinmeters();
  uint64_t raw_obstacledistanceinmeters;
  memcpy(&raw_obstacledistanceinmeters, &tmp_obstacledistanceinmeters, sizeof(tmp_obstacledistanceinmeters));
  if (raw_obstacledistanceinmeters != 0) {
    _this->_internal_set_obstacledistanceinmeters(from._internal_obstacledistanceinmeters());
  }
  if (from._internal_warninglevel() != 0) {
    _this->_internal_set_warninglevel(from._internal_warninglevel());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObstacleDetectionSector::CopyFrom(const ObstacleDetectionSector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DJIFRProto.Standard.ObstacleDetectionSector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleDetectionSector::IsInitialized() const {
  return true;
}

void ObstacleDetectionSector::InternalSwap(ObstacleDetectionSector* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObstacleDetectionSector, _impl_.warninglevel_)
      + sizeof(ObstacleDetectionSector::_impl_.warninglevel_)
      - PROTOBUF_FIELD_OFFSET(ObstacleDetectionSector, _impl_.obstacledistanceinmeters_)>(
          reinterpret_cast<char*>(&_impl_.obstacledistanceinmeters_),
          reinterpret_cast<char*>(&other->_impl_.obstacledistanceinmeters_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstacleDetectionSector::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FRVisionModelProto_2eproto_getter, &descriptor_table_FRVisionModelProto_2eproto_once,
      file_level_metadata_FRVisionModelProto_2eproto[2]);
}

// ===================================================================

class VisionDetectionState::_Internal {
 public:
};

VisionDetectionState::VisionDetectionState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DJIFRProto.Standard.VisionDetectionState)
}
VisionDetectionState::VisionDetectionState(const VisionDetectionState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VisionDetectionState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.detectionsectors_){from._impl_.detectionsectors_}
    , decltype(_impl_.position_){}
    , decltype(_impl_.issensorbeingused_){}
    , decltype(_impl_.obstacledistanceinmeters_){}
    , decltype(_impl_.systemwarning_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.position_, &from._impl_.position_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.systemwarning_) -
    reinterpret_cast<char*>(&_impl_.position_)) + sizeof(_impl_.systemwarning_));
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.VisionDetectionState)
}

inline void VisionDetectionState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.detectionsectors_){arena}
    , decltype(_impl_.position_){0}
    , decltype(_impl_.issensorbeingused_){false}
    , decltype(_impl_.obstacledistanceinmeters_){0}
    , decltype(_impl_.systemwarning_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VisionDetectionState::~VisionDetectionState() {
  // @@protoc_insertion_point(destructor:DJIFRProto.Standard.VisionDetectionState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VisionDetectionState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.detectionsectors_.~RepeatedPtrField();
}

void VisionDetectionState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VisionDetectionState::Clear() {
// @@protoc_insertion_point(message_clear_start:DJIFRProto.Standard.VisionDetectionState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.detectionsectors_.Clear();
  ::memset(&_impl_.position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.systemwarning_) -
      reinterpret_cast<char*>(&_impl_.position_)) + sizeof(_impl_.systemwarning_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VisionDetectionState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DJIFRProto.Standard.Vision.VisionSensorPosition position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_position(static_cast<::DJIFRProto::Standard::Vision_VisionSensorPosition>(val));
        } else
          goto handle_unusual;
        continue;
      // bool isSensorBeingUsed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.issensorbeingused_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DJIFRProto.Standard.Vision.VisionSystemWarning systemWarning = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_systemwarning(static_cast<::DJIFRProto::Standard::Vision_VisionSystemWarning>(val));
        } else
          goto handle_unusual;
        continue;
      // double obstacleDistanceInMeters = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.obstacledistanceinmeters_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .DJIFRProto.Standard.ObstacleDetectionSector detectionSectors = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_detectionsectors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VisionDetectionState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DJIFRProto.Standard.VisionDetectionState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DJIFRProto.Standard.Vision.VisionSensorPosition position = 1;
  if (this->_internal_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_position(), target);
  }

  // bool isSensorBeingUsed = 2;
  if (this->_internal_issensorbeingused() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_issensorbeingused(), target);
  }

  // .DJIFRProto.Standard.Vision.VisionSystemWarning systemWarning = 3;
  if (this->_internal_systemwarning() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_systemwarning(), target);
  }

  // double obstacleDistanceInMeters = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_obstacledistanceinmeters = this->_internal_obstacledistanceinmeters();
  uint64_t raw_obstacledistanceinmeters;
  memcpy(&raw_obstacledistanceinmeters, &tmp_obstacledistanceinmeters, sizeof(tmp_obstacledistanceinmeters));
  if (raw_obstacledistanceinmeters != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_obstacledistanceinmeters(), target);
  }

  // repeated .DJIFRProto.Standard.ObstacleDetectionSector detectionSectors = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_detectionsectors_size()); i < n; i++) {
    const auto& repfield = this->_internal_detectionsectors(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DJIFRProto.Standard.VisionDetectionState)
  return target;
}

size_t VisionDetectionState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DJIFRProto.Standard.VisionDetectionState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DJIFRProto.Standard.ObstacleDetectionSector detectionSectors = 5;
  total_size += 1UL * this->_internal_detectionsectors_size();
  for (const auto& msg : this->_impl_.detectionsectors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .DJIFRProto.Standard.Vision.VisionSensorPosition position = 1;
  if (this->_internal_position() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_position());
  }

  // bool isSensorBeingUsed = 2;
  if (this->_internal_issensorbeingused() != 0) {
    total_size += 1 + 1;
  }

  // double obstacleDistanceInMeters = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_obstacledistanceinmeters = this->_internal_obstacledistanceinmeters();
  uint64_t raw_obstacledistanceinmeters;
  memcpy(&raw_obstacledistanceinmeters, &tmp_obstacledistanceinmeters, sizeof(tmp_obstacledistanceinmeters));
  if (raw_obstacledistanceinmeters != 0) {
    total_size += 1 + 8;
  }

  // .DJIFRProto.Standard.Vision.VisionSystemWarning systemWarning = 3;
  if (this->_internal_systemwarning() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_systemwarning());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VisionDetectionState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VisionDetectionState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VisionDetectionState::GetClassData() const { return &_class_data_; }


void VisionDetectionState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VisionDetectionState*>(&to_msg);
  auto& from = static_cast<const VisionDetectionState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DJIFRProto.Standard.VisionDetectionState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.detectionsectors_.MergeFrom(from._impl_.detectionsectors_);
  if (from._internal_position() != 0) {
    _this->_internal_set_position(from._internal_position());
  }
  if (from._internal_issensorbeingused() != 0) {
    _this->_internal_set_issensorbeingused(from._internal_issensorbeingused());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_obstacledistanceinmeters = from._internal_obstacledistanceinmeters();
  uint64_t raw_obstacledistanceinmeters;
  memcpy(&raw_obstacledistanceinmeters, &tmp_obstacledistanceinmeters, sizeof(tmp_obstacledistanceinmeters));
  if (raw_obstacledistanceinmeters != 0) {
    _this->_internal_set_obstacledistanceinmeters(from._internal_obstacledistanceinmeters());
  }
  if (from._internal_systemwarning() != 0) {
    _this->_internal_set_systemwarning(from._internal_systemwarning());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VisionDetectionState::CopyFrom(const VisionDetectionState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DJIFRProto.Standard.VisionDetectionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisionDetectionState::IsInitialized() const {
  return true;
}

void VisionDetectionState::InternalSwap(VisionDetectionState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.detectionsectors_.InternalSwap(&other->_impl_.detectionsectors_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VisionDetectionState, _impl_.systemwarning_)
      + sizeof(VisionDetectionState::_impl_.systemwarning_)
      - PROTOBUF_FIELD_OFFSET(VisionDetectionState, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VisionDetectionState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FRVisionModelProto_2eproto_getter, &descriptor_table_FRVisionModelProto_2eproto_once,
      file_level_metadata_FRVisionModelProto_2eproto[3]);
}

// ===================================================================

VisionState_DetectionStateMapEntry_DoNotUse::VisionState_DetectionStateMapEntry_DoNotUse() {}
VisionState_DetectionStateMapEntry_DoNotUse::VisionState_DetectionStateMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void VisionState_DetectionStateMapEntry_DoNotUse::MergeFrom(const VisionState_DetectionStateMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata VisionState_DetectionStateMapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FRVisionModelProto_2eproto_getter, &descriptor_table_FRVisionModelProto_2eproto_once,
      file_level_metadata_FRVisionModelProto_2eproto[4]);
}

// ===================================================================

class VisionState::_Internal {
 public:
  static const ::DJIFRProto::Standard::VisionControlState& controlstate(const VisionState* msg);
};

const ::DJIFRProto::Standard::VisionControlState&
VisionState::_Internal::controlstate(const VisionState* msg) {
  return *msg->_impl_.controlstate_;
}
VisionState::VisionState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &VisionState::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:DJIFRProto.Standard.VisionState)
}
VisionState::VisionState(const VisionState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VisionState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.detectionstatemap_)*/{}
    , decltype(_impl_.controlstate_){nullptr}
    , decltype(_impl_.collisionavoidanceenabled_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.detectionstatemap_.MergeFrom(from._impl_.detectionstatemap_);
  if (from._internal_has_controlstate()) {
    _this->_impl_.controlstate_ = new ::DJIFRProto::Standard::VisionControlState(*from._impl_.controlstate_);
  }
  _this->_impl_.collisionavoidanceenabled_ = from._impl_.collisionavoidanceenabled_;
  // @@protoc_insertion_point(copy_constructor:DJIFRProto.Standard.VisionState)
}

inline void VisionState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.detectionstatemap_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.controlstate_){nullptr}
    , decltype(_impl_.collisionavoidanceenabled_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VisionState::~VisionState() {
  // @@protoc_insertion_point(destructor:DJIFRProto.Standard.VisionState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void VisionState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.detectionstatemap_.Destruct();
  _impl_.detectionstatemap_.~MapField();
  if (this != internal_default_instance()) delete _impl_.controlstate_;
}

void VisionState::ArenaDtor(void* object) {
  VisionState* _this = reinterpret_cast< VisionState* >(object);
  _this->_impl_.detectionstatemap_.Destruct();
}
void VisionState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VisionState::Clear() {
// @@protoc_insertion_point(message_clear_start:DJIFRProto.Standard.VisionState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.detectionstatemap_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.controlstate_ != nullptr) {
    delete _impl_.controlstate_;
  }
  _impl_.controlstate_ = nullptr;
  _impl_.collisionavoidanceenabled_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VisionState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool collisionAvoidanceEnabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.collisionavoidanceenabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DJIFRProto.Standard.VisionControlState controlState = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlstate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<int32, .DJIFRProto.Standard.VisionDetectionState> detectionStateMap = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.detectionstatemap_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VisionState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DJIFRProto.Standard.VisionState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool collisionAvoidanceEnabled = 1;
  if (this->_internal_collisionavoidanceenabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_collisionavoidanceenabled(), target);
  }

  // .DJIFRProto.Standard.VisionControlState controlState = 2;
  if (this->_internal_has_controlstate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::controlstate(this),
        _Internal::controlstate(this).GetCachedSize(), target, stream);
  }

  // map<int32, .DJIFRProto.Standard.VisionDetectionState> detectionStateMap = 3;
  if (!this->_internal_detectionstatemap().empty()) {
    using MapType = ::_pb::Map<int32_t, ::DJIFRProto::Standard::VisionDetectionState>;
    using WireHelper = VisionState_DetectionStateMapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_detectionstatemap();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DJIFRProto.Standard.VisionState)
  return target;
}

size_t VisionState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DJIFRProto.Standard.VisionState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .DJIFRProto.Standard.VisionDetectionState> detectionStateMap = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_detectionstatemap_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::DJIFRProto::Standard::VisionDetectionState >::const_iterator
      it = this->_internal_detectionstatemap().begin();
      it != this->_internal_detectionstatemap().end(); ++it) {
    total_size += VisionState_DetectionStateMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .DJIFRProto.Standard.VisionControlState controlState = 2;
  if (this->_internal_has_controlstate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.controlstate_);
  }

  // bool collisionAvoidanceEnabled = 1;
  if (this->_internal_collisionavoidanceenabled() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VisionState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VisionState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VisionState::GetClassData() const { return &_class_data_; }


void VisionState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VisionState*>(&to_msg);
  auto& from = static_cast<const VisionState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DJIFRProto.Standard.VisionState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.detectionstatemap_.MergeFrom(from._impl_.detectionstatemap_);
  if (from._internal_has_controlstate()) {
    _this->_internal_mutable_controlstate()->::DJIFRProto::Standard::VisionControlState::MergeFrom(
        from._internal_controlstate());
  }
  if (from._internal_collisionavoidanceenabled() != 0) {
    _this->_internal_set_collisionavoidanceenabled(from._internal_collisionavoidanceenabled());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VisionState::CopyFrom(const VisionState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DJIFRProto.Standard.VisionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisionState::IsInitialized() const {
  return true;
}

void VisionState::InternalSwap(VisionState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.detectionstatemap_.InternalSwap(&other->_impl_.detectionstatemap_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VisionState, _impl_.collisionavoidanceenabled_)
      + sizeof(VisionState::_impl_.collisionavoidanceenabled_)
      - PROTOBUF_FIELD_OFFSET(VisionState, _impl_.controlstate_)>(
          reinterpret_cast<char*>(&_impl_.controlstate_),
          reinterpret_cast<char*>(&other->_impl_.controlstate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VisionState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FRVisionModelProto_2eproto_getter, &descriptor_table_FRVisionModelProto_2eproto_once,
      file_level_metadata_FRVisionModelProto_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Standard
}  // namespace DJIFRProto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DJIFRProto::Standard::Vision*
Arena::CreateMaybeMessage< ::DJIFRProto::Standard::Vision >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DJIFRProto::Standard::Vision >(arena);
}
template<> PROTOBUF_NOINLINE ::DJIFRProto::Standard::VisionControlState*
Arena::CreateMaybeMessage< ::DJIFRProto::Standard::VisionControlState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DJIFRProto::Standard::VisionControlState >(arena);
}
template<> PROTOBUF_NOINLINE ::DJIFRProto::Standard::ObstacleDetectionSector*
Arena::CreateMaybeMessage< ::DJIFRProto::Standard::ObstacleDetectionSector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DJIFRProto::Standard::ObstacleDetectionSector >(arena);
}
template<> PROTOBUF_NOINLINE ::DJIFRProto::Standard::VisionDetectionState*
Arena::CreateMaybeMessage< ::DJIFRProto::Standard::VisionDetectionState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DJIFRProto::Standard::VisionDetectionState >(arena);
}
template<> PROTOBUF_NOINLINE ::DJIFRProto::Standard::VisionState_DetectionStateMapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::DJIFRProto::Standard::VisionState_DetectionStateMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DJIFRProto::Standard::VisionState_DetectionStateMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::DJIFRProto::Standard::VisionState*
Arena::CreateMaybeMessage< ::DJIFRProto::Standard::VisionState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DJIFRProto::Standard::VisionState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
